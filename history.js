// ================================================================
// HISTORY PAGE - Enhanced Production History with Advanced Analytics
// ================================================================
// JavaScript for comprehensive production history display with advanced filtering
// Version: 3.0.0 - Enhanced UX/UI and Data Visualization
// ================================================================

// ================================================================
// 1. GLOBAL VARIABLES
// ================================================================
let historyData = [];
let filteredData = [];
let currentPage = 1;
let recordsPerPage = 25;
let totalPages = 1;
let allDepartments = [];
let allMachines = [];
let allProducts = [];

// Advanced filter states
let advancedFiltersVisible = false;
let lastUpdateTime = null;

// ================================================================
// 2. INITIALIZATION
// ================================================================
document.addEventListener('DOMContentLoaded', function() {
    console.log('Enhanced History page loading...');
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ active page ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö navbar
    setTimeout(() => {
        const historyLink = document.querySelector('a[href="history.html"], a[data-page="history"]');
        if (historyLink) {
            historyLink.classList.add('active');
        }
    }, 500);
    
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Bootstrap tooltips
    initializeTooltips();
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Event Listeners
    setupEventListeners();
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (30 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤)
    setupDefaultDateRange();
    
    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    loadInitialData();
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö
    updateSystemStatus();
    
    console.log('Enhanced History page initialized successfully');
});

/**
 * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Bootstrap tooltips
 */
function initializeTooltips() {
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô tooltips ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö filter elements
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl, {
            placement: 'top',
            trigger: 'hover focus',
            delay: { show: 500, hide: 100 }
        });
    });
    
    console.log('Tooltips initialized:', tooltipList.length);
}

// ================================================================
// 3. ENHANCED DATA LOADING
// ================================================================

/**
 * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
 */
function setupDefaultDateRange() {
    // ‡πÑ‡∏°‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á
    document.getElementById('dateFromFilter').value = '';
    document.getElementById('dateToFilter').value = '';
}

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö
 */
function updateSystemStatus() {
    const statusElement = document.getElementById('systemStatus');
    const lastUpdateElement = document.getElementById('lastUpdate');
    
    if (statusElement && lastUpdateElement) {
        statusElement.innerHTML = '<i class="bi bi-check-circle me-1"></i>‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå';
        statusElement.className = 'badge bg-success fs-6 px-3 py-2';
        
        const now = new Date();
        lastUpdateElement.textContent = `‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${formatDateTime(now)}`;
        lastUpdateTime = now;
    }
}

// ================================================================
// 3. DATA LOADING
// ================================================================

/**
 * ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
 */
async function loadInitialData() {
    try {
        showLoading(true);
        
        // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
        await loadHistoryData();
        
        // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        await loadReferenceData();
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
        applyFiltersAndRender();
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        updateSystemStatus();
        
    } catch (error) {
        console.error('Error loading initial data:', error);
        showError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ' + error.message);
        updateSystemStatus('error');
    }
}

/**
 * ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô
 */
async function loadHistoryData() {
    try {
        console.log('üìä Loading history data...');
        
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß
        const response = await fetch('tasks.php?action=get_completed_plans');
        
        if (!response.ok) {
            // ‡∏≠‡πà‡∏≤‡∏ô response text ‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug
            const errorText = await response.text();
            console.error('‚ùå HTTP Error Response:', errorText);
            throw new Error(`HTTP ${response.status}: ${response.statusText}\nResponse: ${errorText.substring(0, 200)}`);
        }
        
        // ‡∏≠‡πà‡∏≤‡∏ô response ‡πÄ‡∏õ‡πá‡∏ô text ‡∏Å‡πà‡∏≠‡∏ô
        const responseText = await response.text();
        console.log('üîç Raw response:', responseText.substring(0, 500));
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô JSON ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (!responseText.trim()) {
            throw new Error('Empty response from server');
        }
        
        let data;
        try {
            data = JSON.parse(responseText);
        } catch (parseError) {
            console.error('‚ùå JSON Parse Error:', parseError);
            console.error('‚ùå Raw response causing error:', responseText);
            throw new Error(`Invalid JSON response: ${parseError.message}\nResponse preview: ${responseText.substring(0, 100)}...`);
        }
        
        console.log('üìã Parsed history data:', data);
        
        if (Array.isArray(data)) {
            historyData = data;
            console.log(`‚úÖ Loaded ${historyData.length} completed plans`);
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
            extractReferenceData();
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï filter options
            updateAllFilterOptions();
            
        } else if (data && data.success === false) {
            console.error('‚ùå API returned error:', data.message || 'Unknown error');
            historyData = [];
            throw new Error(data.message || 'API returned error');
        } else if (data && Array.isArray(data.data)) {
            // ‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô data.data
            historyData = data.data;
            console.log(`‚úÖ Loaded ${historyData.length} completed plans from data.data`);
            
            extractReferenceData();
            updateAllFilterOptions();
        } else {
            console.error('‚ùå Data is not an array:', data);
            historyData = [];
            throw new Error('Invalid data format received from API');
        }
        
    } catch (error) {
        console.error('üí• Error loading history data:', error);
        historyData = [];
        showError(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ: ${error.message}`);
        throw error;
    }
}

/**
 * ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
 */
async function loadReferenceData() {
    try {
        // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡πÅ‡∏•‡∏∞‡πÅ‡∏ú‡∏ô‡∏Å‡∏à‡∏≤‡∏Å API ‡πÅ‡∏¢‡∏Å
        // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
        console.log('Reference data loaded from history data');
    } catch (error) {
        console.warn('Could not load additional reference data:', error);
    }
}

/**
 * ‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
 */
function extractReferenceData() {
    // Debug: ‡∏î‡∏π‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    if (historyData.length > 0) {
        console.log('Sample data structure:', historyData[0]);
        console.log('Available fields:', Object.keys(historyData[0]));
    }
    
    // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ú‡∏ô‡∏Å‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡∏Å‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
    const validDepartments = [
        '‡πÅ‡∏ú‡∏ô‡∏Å‡∏ú‡∏•‡∏¥‡∏ï', '‡πÅ‡∏ú‡∏ô‡∏Å‡∏ö‡∏£‡∏£‡∏à‡∏∏', '‡πÅ‡∏ú‡∏ô‡∏Å‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û', '‡πÅ‡∏ú‡∏ô‡∏Å‡πÇ‡∏•‡∏à‡∏¥‡∏™‡∏ï‡∏¥‡∏Å‡∏™‡πå', '‡πÅ‡∏ú‡∏ô‡∏Å‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤',
        '‡πÅ‡∏ú‡∏ô‡∏Å‡∏Å‡∏£‡∏£‡∏°', '‡πÅ‡∏ú‡∏ô‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡∏£‡∏π‡∏õ', '‡πÅ‡∏ú‡∏ô‡∏Å‡∏™‡∏µ', '‡πÅ‡∏ú‡∏ô‡∏Å‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö', '‡πÅ‡∏ú‡∏ô‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö',
        '‡πÅ‡∏ú‡∏ô‡∏Å‡∏Å‡∏£‡∏≠‡∏á&Mix', '‡πÅ‡∏ú‡∏ô‡∏Å‡∏ö‡∏£‡∏£‡∏∏', '‡πÅ‡∏ú‡∏ô‡∏Å‡πÄ‡∏•‡πÄ‡∏ä‡∏≠‡∏£‡πå', // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡∏Å‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        'Production', 'Packaging', 'Quality Control', 'QC', 'Logistics', 'Maintenance',
        'Manufacturing', 'Assembly', 'Inspection', 'Shipping', 'Warehouse'
    ];
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ú‡∏ô‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î - ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏á)
    const departmentFields = historyData.map(item => {
        const dept = item.Department || item.DepartmentName || '';
        if (dept && dept.trim().length > 0) {
            return dept.trim();
        }
        return null;
    }).filter(dept => dept !== null);
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug
    const uniqueDepts = [...new Set(departmentFields)];
    console.log('All departments from database (raw):', uniqueDepts);
    
    // ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏•‡∏¢ - ‡πÉ‡∏ä‡πâ‡∏ó‡∏∏‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    allDepartments = uniqueDepts.sort();
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const machineFields = historyData.map(item => {
        const machine = item.MachineName || '';
        if (machine && machine.length > 0) {
            return machine.trim();
        }
        return null;
    }).filter(machine => machine !== null);
    
    allMachines = [...new Set(machineFields)].sort();
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const productFields = historyData.map(item => {
        const product = item.ProductName || item.ProductDisplayName || '';
        if (product && product.length > 0) {
            return product.trim();
        }
        return null;
    }).filter(product => product !== null);
    
    allProducts = [...new Set(productFields)].sort();
    
    console.log('Extracted reference data:', {
        departments: allDepartments,
        machines: allMachines.slice(0, 5), // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 5 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
        products: allProducts.slice(0, 5)  // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 5 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
    });
    
    console.log('Summary counts:', {
        departments: allDepartments.length,
        machines: allMachines.length,
        products: allProducts.length
    });
    
    // Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Å‡∏£‡∏≠‡∏á
    console.log('=== DEPARTMENT DEBUG INFO ===');
    console.log('Valid departments found:', allDepartments);
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
    const rejectedDepts = historyData.map(item => {
        const dept = item.Department || item.DepartmentName || '';
        return dept ? dept.trim() : null;
    }).filter(dept => dept && !allDepartments.includes(dept));
    
    const uniqueRejected = [...new Set(rejectedDepts)];
    if (uniqueRejected.length > 0) {
        console.log('Rejected departments (not valid):', uniqueRejected);
    }
    console.log('=== END DEPARTMENT DEBUG ===');
}

// ================================================================
// 4. ENHANCED FILTERING AND SEARCHING
// ================================================================

/**
 * ‡πÉ‡∏ä‡πâ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà)
 */
function applyFiltersAndRender() {
    console.log('Enhanced filtering started...');
    
    const filters = getActiveFilters();
    console.log('Active filters:', filters);
    
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    filteredData = [...historyData];
    console.log('Initial data count:', filteredData.length);
    
    // ‡πÉ‡∏ä‡πâ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß
    filteredData = applyDepartmentFilter(filteredData, filters.department);
    filteredData = applyMachineFilter(filteredData, filters.machine);
    filteredData = applyProductFilter(filteredData, filters.product);
    filteredData = applyDateRangeFilter(filteredData, filters.dateFrom, filters.dateTo);
    filteredData = applyKeywordFilter(filteredData, filters.keyword);
    filteredData = applyShiftFilter(filteredData, filters.shift);
    filteredData = applyOEEFilter(filteredData, filters.oeeRange);
    filteredData = applyQuantityFilter(filteredData, filters.minQuantity, filters.maxQuantity);
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    filteredData = applySorting(filteredData, filters.sortBy);
    
    console.log('Final filtered data count:', filteredData.length);
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    updateFilterCounts();
    updatePagination();
    renderHistoryTable();
    updateStatistics();
    updateLastUpdateTime();
}

/**
 * ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
function getActiveFilters() {
    return {
        department: document.getElementById('departmentFilter')?.value || '',
        machine: document.getElementById('machineFilter')?.value || '',
        product: document.getElementById('productFilter')?.value || '',
        dateFrom: document.getElementById('dateFromFilter')?.value || '',
        dateTo: document.getElementById('dateToFilter')?.value || '',
        keyword: document.getElementById('historyKeywordFilter')?.value.trim().toLowerCase() || '',
        shift: document.getElementById('shiftFilter')?.value || '',
        oeeRange: document.getElementById('oeeRangeFilter')?.value || '',
        minQuantity: parseInt(document.getElementById('minQuantityFilter')?.value) || 0,
        maxQuantity: parseInt(document.getElementById('maxQuantityFilter')?.value) || Infinity,
        sortBy: document.getElementById('sortByFilter')?.value || 'date_desc'
    };
}

/**
 * ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô‡∏Å
 */
function applyDepartmentFilter(data, department) {
    if (!department) return data;
    return data.filter(item => {
        const itemDept = (item.Department || item.DepartmentName || item.departmentName || '').trim();
        return itemDept === department;
    });
}

/**
 * ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£
 */
function applyMachineFilter(data, machine) {
    if (!machine) return data;
    return data.filter(item => {
        const itemMachine = (item.MachineName || item.machine || '').trim();
        return itemMachine === machine;
    });
}

/**
 * ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå
 */
function applyProductFilter(data, product) {
    if (!product) return data;
    return data.filter(item => {
        const itemProduct = (item.ProductName || item.ProductDisplayName || '').trim();
        return itemProduct === product;
    });
}

/**
 * ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
 */
function applyDateRangeFilter(data, dateFrom, dateTo) {
    if (!dateFrom && !dateTo) return data;
    
    return data.filter(item => {
        const itemDate = item.ProductionDate || item.ConfirmedAt || item.ActualEndTime;
        if (!itemDate) return false;
        
        const date = new Date(itemDate).toISOString().split('T')[0];
        
        if (dateFrom && date < dateFrom) return false;
        if (dateTo && date > dateTo) return false;
        
        return true;
    });
}

/**
 * ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
 */
function applyKeywordFilter(data, keyword) {
    if (!keyword) return data;
    
    return data.filter(item => {
        const searchText = [
            item.ProductName || '',
            item.ProductDisplayName || '',
            item.ProductCode || '',
            item.LotNumber || '',
            item.Department || '',
            item.MachineName || ''
        ].join(' ').toLowerCase();
        
        return searchText.includes(keyword);
    });
}

/**
 * ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏°‡∏Å‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
 */
function applyShiftFilter(data, shift) {
    if (!shift) return data;
    
    return data.filter(item => {
        const startTime = item.ActualStartTime;
        if (!startTime) return false;
        
        const hour = new Date(startTime).getHours();
        
        switch (shift) {
            case 'morning': return hour >= 6 && hour < 14;
            case 'afternoon': return hour >= 14 && hour < 22;
            case 'night': return hour >= 22 || hour < 6;
            default: return true;
        }
    });
}

/**
 * ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á OEE
 */
function applyOEEFilter(data, oeeRange) {
    if (!oeeRange) return data;
    
    return data.filter(item => {
        const oee = parseFloat(item.OEE_Overall) || 0;
        
        switch (oeeRange) {
            case 'excellent': return oee >= 85;
            case 'good': return oee >= 70 && oee < 85;
            case 'fair': return oee >= 50 && oee < 70;
            case 'poor': return oee < 50;
            default: return true;
        }
    });
}

/**
 * ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï
 */
function applyQuantityFilter(data, minQuantity, maxQuantity) {
    if (minQuantity === 0 && maxQuantity === Infinity) return data;
    
    return data.filter(item => {
        const quantity = parseInt(item.TotalPieces) || 0;
        return quantity >= minQuantity && quantity <= maxQuantity;
    });
}

/**
 * ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 */
function applySorting(data, sortBy) {
    const sortedData = [...data];
    
    switch (sortBy) {
        case 'date_desc':
            return sortedData.sort((a, b) => new Date(b.ProductionDate || b.ConfirmedAt) - new Date(a.ProductionDate || a.ConfirmedAt));
        case 'date_asc':
            return sortedData.sort((a, b) => new Date(a.ProductionDate || a.ConfirmedAt) - new Date(b.ProductionDate || b.ConfirmedAt));
        case 'oee_desc':
            return sortedData.sort((a, b) => (parseFloat(b.OEE_Overall) || 0) - (parseFloat(a.OEE_Overall) || 0));
        case 'oee_asc':
            return sortedData.sort((a, b) => (parseFloat(a.OEE_Overall) || 0) - (parseFloat(b.OEE_Overall) || 0));
        case 'quantity_desc':
            return sortedData.sort((a, b) => (parseInt(b.TotalPieces) || 0) - (parseInt(a.TotalPieces) || 0));
        case 'quantity_asc':
            return sortedData.sort((a, b) => (parseInt(a.TotalPieces) || 0) - (parseInt(b.TotalPieces) || 0));
        default:
            return sortedData;
    }
}

// ================================================================
// 5. PAGINATION SYSTEM
// ================================================================

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤
 */
function updatePagination() {
    const recordsPerPageSelect = document.getElementById('recordsPerPage');
    recordsPerPage = recordsPerPageSelect?.value === 'all' ? filteredData.length : parseInt(recordsPerPageSelect?.value) || 25;
    
    totalPages = Math.ceil(filteredData.length / recordsPerPage);
    currentPage = Math.min(currentPage, totalPages) || 1;
    
    console.log(`Pagination: ${filteredData.length} items, ${recordsPerPage} per page, ${totalPages} pages, current: ${currentPage}`);
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
 */
function getCurrentPageData() {
    if (recordsPerPage >= filteredData.length) {
        return filteredData; // ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    }
    
    const startIndex = (currentPage - 1) * recordsPerPage;
    const endIndex = Math.min(startIndex + recordsPerPage, filteredData.length);
    
    return filteredData.slice(startIndex, endIndex);
}

// ================================================================
// 6. ENHANCED UI RENDERING
// ================================================================

/**
 * ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà)
 */
function renderHistoryTable() {
    const tbody = document.getElementById('historyTableBody');
    const currentData = getCurrentPageData();
    
    if (!currentData.length) {
        tbody.innerHTML = `
            <tr>
                <td colspan="13" class="text-center text-muted py-5">
                    <div class="d-flex flex-column align-items-center">
                        <i class="bi bi-inbox fs-1 mb-3 text-muted"></i>
                        <h5 class="text-muted mb-2">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô</h5>
                        <p class="text-muted mb-3">‡∏•‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</p>
                        <div class="d-flex gap-2">
                            <button class="btn btn-outline-primary btn-sm" onclick="clearAllFilters()">
                                <i class="bi bi-x-lg me-1"></i>‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á
                            </button>
                            <button class="btn btn-primary btn-sm" onclick="loadInitialData()">
                                <i class="bi bi-arrow-clockwise me-1"></i>‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                            </button>
                        </div>
                    </div>
                </td>
            </tr>
        `;
        return;
    }
    
    tbody.innerHTML = currentData.map((item, index) => createEnhancedHistoryRow(item, index)).join('');
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° pagination controls ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    renderPaginationControls();
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ñ‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ (‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà - Modern & Clean)
 */
function createEnhancedHistoryRow(item, index) {
    const globalIndex = (currentPage - 1) * recordsPerPage + index;
    
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å
    const productName = item.ProductName || item.ProductDisplayName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
    const productCode = item.ProductCode || '-';
    const productSize = item.ProductSize || '-';
    const department = item.Department || item.DepartmentName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
    const subdepartment = item.Subdepartment || '-';
    const machineName = item.MachineName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
    const productionDate = item.ProductionDate || '';
    
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï
    const lotNumber = item.LotNumber || '-';
    const lotSize = parseInt(item.LotSize) || 0;
    const totalPieces = parseInt(item.TotalPieces) || 0;
    const goodQuantity = parseInt(item.GoodQuantity) || 0;
    const rejectPieces = parseInt(item.RejectPieces) || 0;
    const reworkPieces = parseInt(item.ReworkPieces) || 0;
    const remark = item.Remark || '-';
    
    // ‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï
    const actualStartTime = item.ActualStartTime || '';
    const actualEndTime = item.ActualEndTime || '';
    const workingHours = parseFloat(item.WorkingHours) || 0;
    
    // OEE Metrics
    const oeeAvailability = parseFloat(item.OEE_Availability) || 0;
    const oeePerformance = parseFloat(item.OEE_Performance) || 0;
    const oeeQuality = parseFloat(item.OEE_Quality) || 0;
    const oeeOverall = parseFloat(item.OEE_Overall) || 0;
    
    // ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    const yieldRate = totalPieces > 0 ? ((goodQuantity / totalPieces) * 100) : 0;
    const efficiency = lotSize > 0 ? ((totalPieces / lotSize) * 100) : 0;
    const reworkRate = totalPieces > 0 ? ((reworkPieces / totalPieces) * 100) : 0;
    
    return `
        <tr onclick="showItemDetails(${globalIndex})">
            <!-- ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà -->
            <td class="text-center">
                <div class="fw-bold text-primary" style="font-size: 0.9rem;">
                    ${productionDate ? formatDateThai(productionDate) : '-'}
                </div>
            </td>
            
            <!-- ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ -->
            <td class="product-cell">
                <div class="product-name">${productName}</div>
                <div class="product-badges">
                    ${productCode !== '-' ? `<span class="product-badge">‡∏£‡∏´‡∏±‡∏™: ${productCode}</span>` : ''}
                    ${productSize !== '-' ? `<span class="product-badge">‡∏Ç‡∏ô‡∏≤‡∏î: ${productSize}</span>` : ''}
                </div>
                <div class="data-progress">
                    <div class="data-progress-bar bg-info" style="width: ${Math.min(efficiency, 100)}%" 
                         title="‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û: ${efficiency.toFixed(1)}%"></div>
                </div>
            </td>
            
            <!-- ‡πÅ‡∏ú‡∏ô‡∏Å -->
            <td class="department-cell">
                <div class="department-main">${department}</div>
                ${subdepartment !== '-' ? `<div class="department-sub">${subdepartment}</div>` : ''}
            </td>
            
            <!-- ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£ -->
            <td class="machine-cell">
                <div class="machine-name">${machineName}</div>
            </td>
            
            <!-- ‡∏£‡∏´‡∏±‡∏™‡∏•‡πá‡∏≠‡∏ï -->
            <td class="text-center">
                <code class="bg-light p-2 rounded fw-bold" style="font-size: 0.8rem;">${lotNumber}</code>
            </td>
            
            <!-- ‡∏Ç‡∏ô‡∏≤‡∏î‡∏•‡πá‡∏≠‡∏ï -->
            <td class="data-cell-modern data-cell-target">
                <div class="data-value data-value-target">${formatNumber(lotSize)}</div>
                <div class="data-label">‡∏•‡πä‡∏≠‡∏ï</div>
                <div class="data-progress">
                    <div class="data-progress-bar bg-primary" style="width: 100%"></div>
                </div>
            </td>
            
            <!-- ‡∏ú‡∏•‡∏¥‡∏ï‡πÑ‡∏î‡πâ -->
            <td class="data-cell-modern data-cell-produced">
                <div class="data-value data-value-produced">${formatNumber(totalPieces)}</div>
                <div class="data-label">‡∏ä‡∏¥‡πâ‡∏ô</div>
                <div class="data-progress">
                    <div class="data-progress-bar bg-info" style="width: ${Math.min(efficiency, 100)}%" 
                         title="${efficiency.toFixed(1)}% ‡∏Ç‡∏≠‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢"></div>
                </div>
            </td>
            
            <!-- ‡∏Ç‡∏≠‡∏á‡∏î‡∏µ -->
            <td class="data-cell-modern data-cell-good">
                <div class="data-value data-value-good">${formatNumber(goodQuantity)}</div>
                <div class="data-label">‡∏ä‡∏¥‡πâ‡∏ô</div>
                <div class="data-progress">
                    <div class="data-progress-bar bg-success" style="width: ${yieldRate}%"></div>
                </div>
            </td>
            
            <!-- ‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢ -->
            <td class="data-cell-modern data-cell-reject">
                <div class="data-value data-value-reject">${formatNumber(rejectPieces)}</div>
                <div class="data-label">‡∏ä‡∏¥‡πâ‡∏ô</div>
                <div class="data-progress">
                    <div class="data-progress-bar bg-danger" style="width: ${100 - yieldRate}%"></div>
                </div>
            </td>
            
            <!-- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (Rework) -->
            <td class="data-cell-modern data-cell-rework">
                <div class="data-value data-value-rework">${formatNumber(reworkPieces)}</div>
                <div class="data-label">‡∏ä‡∏¥‡πâ‡∏ô</div>
                <div class="data-progress">
                    <div class="data-progress-bar bg-warning" style="width: ${reworkRate}%"></div>
                </div>
            </td>
            
            <!-- OEE -->
            <td class="oee-cell">
                <div class="oee-metrics">
                    <div class="oee-metric">
                        <div class="oee-metric-value ${getMetricColor(oeeAvailability, 'availability')}">${oeeAvailability.toFixed(1)}%</div>
                        <div class="oee-metric-label">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°</div>
                    </div>
                    <div class="oee-metric">
                        <div class="oee-metric-value ${getMetricColor(oeePerformance, 'performance')}">${oeePerformance.toFixed(1)}%</div>
                        <div class="oee-metric-label">‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û</div>
                    </div>
                    <div class="oee-metric">
                        <div class="oee-metric-value ${getMetricColor(oeeQuality, 'quality')}">${oeeQuality.toFixed(1)}%</div>
                        <div class="oee-metric-label">‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û</div>
                    </div>
                </div>
                <div class="oee-overall">
                    <div class="oee-overall-value">${oeeOverall.toFixed(1)}%</div>
                    <span class="oee-badge-modern ${getOEEBadgeClass(oeeOverall)}">${getOEELabel(oeeOverall)}</span>
                </div>
            </td>
            
            <!-- ‡πÄ‡∏ß‡∏•‡∏≤ -->
            <td class="time-cell">
                <div class="time-duration">${calculateDurationSimple(actualStartTime, actualEndTime)}</div>
                <div class="time-hours">${workingHours.toFixed(1)} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á</div>
                ${actualStartTime && actualEndTime ? `
                    <div class="time-range">
                        ${formatTime(actualStartTime)} - ${formatTime(actualEndTime)}
                    </div>
                ` : ''}
                <div class="data-progress">
                    <div class="data-progress-bar bg-secondary" style="width: ${Math.min((workingHours / 8) * 100, 100)}%"></div>
                </div>
            </td>
            
            <!-- ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ -->
            <td class="remark-cell">
                ${remark !== '-' ? `
                    <div class="remark-text">
                        <i class="bi bi-chat-text me-1"></i>
                        ${remark.substring(0, 100)}${remark.length > 100 ? '...' : ''}
                    </div>
                ` : '<span class="text-muted">-</span>'}
            </td>
        </tr>
    `;
}

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô)
 */
function updateStatistics() {
    console.log('Updating enhanced statistics...');
    
    const totalCompleted = filteredData.length;
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    const totalProduced = filteredData.reduce((sum, item) => sum + (parseInt(item.TotalPieces) || 0), 0);
    const totalGoodProduct = filteredData.reduce((sum, item) => sum + (parseInt(item.GoodQuantity) || 0), 0);
    const totalReject = filteredData.reduce((sum, item) => sum + (parseInt(item.RejectPieces) || 0), 0);
    const totalWorkingHours = filteredData.reduce((sum, item) => sum + (parseFloat(item.WorkingHours) || 0), 0);
    const totalDowntime = filteredData.reduce((sum, item) => sum + (parseInt(item.DowntimeMinutes) || 0), 0);
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ OEE
    const validOEEItems = filteredData.filter(item => parseFloat(item.OEE_Overall) > 0);
    const avgPerformance = validOEEItems.length > 0 ? 
        validOEEItems.reduce((sum, item) => sum + (parseFloat(item.OEE_Performance) || 0), 0) / validOEEItems.length : 0;
    const avgQuality = validOEEItems.length > 0 ? 
        validOEEItems.reduce((sum, item) => sum + (parseFloat(item.OEE_Quality) || 0), 0) / validOEEItems.length : 0;
    const avgOEE = validOEEItems.length > 0 ? 
        validOEEItems.reduce((sum, item) => sum + (parseFloat(item.OEE_Overall) || 0), 0) / validOEEItems.length : 0;
    
    // ‡∏ô‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    const uniqueMachines = new Set(filteredData.map(item => item.MachineName).filter(m => m)).size;
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI elements
    updateStatElement('totalCompleted', formatNumber(totalCompleted));
    updateStatElement('totalProduced', formatNumber(totalProduced));
    updateStatElement('totalGoodProduct', formatNumber(totalGoodProduct));
    updateStatElement('totalReject', formatNumber(totalReject));
    updateStatElement('avgEfficiency', `${avgPerformance.toFixed(1)}%`);
    updateStatElement('avgQuality', `${avgQuality.toFixed(1)}%`);
    updateStatElement('avgOEE', `${avgOEE.toFixed(1)}%`);
    updateStatElement('totalWorkingHours', totalWorkingHours.toFixed(1));
    updateStatElement('totalDowntime', formatNumber(totalDowntime));
    updateStatElement('totalMachines', formatNumber(uniqueMachines));
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï progress bars
    updateProgressBar('efficiencyProgress', avgPerformance);
    updateProgressBar('qualityProgress', avgQuality);
    updateProgressBar('oeeProgress', avgOEE);
    updateProgressBar('downtimeProgress', Math.min((totalDowntime / (totalWorkingHours * 60)) * 100, 100));
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï summary text
    updateHistorySummary(totalCompleted, totalProduced, totalGoodProduct, totalReject, 
                        avgPerformance, avgQuality, avgOEE, totalWorkingHours, totalDowntime);
}

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï element ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
 */
function updateStatElement(id, value) {
    const element = document.getElementById(id);
    if (element) {
        element.textContent = value;
        element.classList.add('animate-update');
        setTimeout(() => element.classList.remove('animate-update'), 500);
    }
}

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï progress bar
 */
function updateProgressBar(id, percentage) {
    const element = document.getElementById(id);
    if (element) {
        element.style.width = `${Math.min(percentage, 100)}%`;
        element.setAttribute('aria-valuenow', percentage);
    }
}

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ
 */
function updateHistorySummary(completed, produced, good, reject, performance, quality, oee, hours, downtime) {
    const summaryElement = document.getElementById('historySummary');
    if (summaryElement) {
        const qualityRate = produced > 0 ? ((good / produced) * 100).toFixed(1) : 0;
        const rejectRate = produced > 0 ? ((reject / produced) * 100).toFixed(1) : 0;
        
        summaryElement.innerHTML = `
            <div class="row text-center">
                <div class="col-md-3">
                    <i class="bi bi-check-circle me-1"></i>
                    ‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à <strong>${formatNumber(completed)}</strong> ‡∏á‡∏≤‡∏ô
                </div>
                <div class="col-md-3">
                    <i class="bi bi-box me-1"></i>
                    ‡∏ú‡∏•‡∏¥‡∏ï‡πÑ‡∏î‡πâ <strong>${formatNumber(produced)}</strong> ‡∏ä‡∏¥‡πâ‡∏ô
                </div>
                <div class="col-md-3">
                    <i class="bi bi-award me-1"></i>
                    ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û <strong>${qualityRate}%</strong>
                </div>
                <div class="col-md-3">
                    <i class="bi bi-speedometer me-1"></i>
                    OEE ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ <strong>${oee.toFixed(1)}%</strong>
                </div>
            </div>
        `;
    }
}

// ================================================================
// 7. ENHANCED UI HELPERS
// ================================================================

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
function updateAllFilterOptions() {
    updateDepartmentFilter();
    updateMachineFilter();
    updateProductFilter();
    updateFilterCounts();
}

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï dropdown ‡πÅ‡∏ú‡∏ô‡∏Å (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà)
 */
function updateDepartmentFilter() {
    const select = document.getElementById('departmentFilter');
    if (!select) return;
    
    const currentValue = select.value;
    select.innerHTML = '<option value="">‡∏ó‡∏∏‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å (‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥)</option>';
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (allDepartments.length === 0) {
        select.innerHTML += '<option value="" disabled>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å</option>';
        return;
    }
    
    allDepartments.forEach(dept => {
        // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏Å‡∏ô‡∏µ‡πâ
        const count = historyData.filter(item => {
            const itemDept = item.Department || item.DepartmentName || '';
            return itemDept.trim() === dept;
        }).length;
        
        // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ú‡∏ô‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
        if (count > 0) {
            select.innerHTML += `<option value="${dept}">${dept} (${count})</option>`;
        }
    });
    
    select.value = currentValue; // ‡∏Ñ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ
    console.log('Department filter updated:', allDepartments.length, 'valid departments found');
    console.log('Valid departments:', allDepartments);
}

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï dropdown ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£ (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà)
 */
function updateMachineFilter() {
    const select = document.getElementById('machineFilter');
    if (!select) return;
    
    const currentValue = select.value;
    select.innerHTML = '<option value="">‡∏ó‡∏∏‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á</option>';
    
    allMachines.forEach(machine => {
        const count = historyData.filter(item => 
            (item.MachineName || '').trim() === machine
        ).length;
        
        select.innerHTML += `<option value="${machine}">${machine} (${count})</option>`;
    });
    
    select.value = currentValue; // ‡∏Ñ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ
    console.log('Machine filter updated:', allMachines.length, 'machines');
}

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï dropdown ‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå (‡πÉ‡∏´‡∏°‡πà)
 */
function updateProductFilter() {
    const select = document.getElementById('productFilter');
    if (!select) return;
    
    const currentValue = select.value;
    select.innerHTML = '<option value="">‡∏ó‡∏∏‡∏Å‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå</option>';
    
    allProducts.forEach(product => {
        const count = historyData.filter(item => 
            (item.ProductName || item.ProductDisplayName || '').trim() === product
        ).length;
        
        select.innerHTML += `<option value="${product}">${product} (${count})</option>`;
    });
    
    select.value = currentValue; // ‡∏Ñ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ
    console.log('Product filter updated:', allProducts.length, 'products');
}

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á - Enhanced UX
 */
function updateFilterCounts() {
    updateElementCount('departmentCount', allDepartments.length);
    updateElementCount('machineCount', allMachines.length);
    updateElementCount('productCount', allProducts.length);
    updateElementCount('filterCount', `${filteredData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Summary Panel
    updateElementCount('activeDepartmentCount', allDepartments.length);
    updateElementCount('activeMachineCount', allMachines.length);
    updateElementCount('activeProductCount', allProducts.length);
    updateElementCount('totalFilterCount', `${filteredData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ß‡∏° (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á "‡∏à‡∏≤‡∏Å X ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    updateTotalCounts();
}

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
 */
function updateTotalCounts() {
    // ‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ß‡∏°‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
    // ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å API ‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å
    const totalDepartmentsInSystem = Math.max(allDepartments.length, allDepartments.length + 2); // ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡πÅ‡∏ú‡∏ô‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°
    const totalMachinesInSystem = Math.max(allMachines.length, allMachines.length + 5); // ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°
    const totalProductsInSystem = Math.max(allProducts.length, allProducts.length + 10); // ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°
    
    updateElementCount('totalDepartments', totalDepartmentsInSystem);
    updateElementCount('totalMachines', totalMachinesInSystem);
    updateElementCount('totalProducts', totalProductsInSystem);
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°
    console.log('Filter Coverage:', {
        departments: `${allDepartments.length}/${totalDepartmentsInSystem}`,
        machines: `${allMachines.length}/${totalMachinesInSystem}`,
        products: `${allProducts.length}/${totalProductsInSystem}`
    });
}

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏ô badge
 */
function updateElementCount(id, count) {
    const element = document.getElementById(id);
    if (element) {
        element.textContent = count;
    }
}

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
 */
function updateLastUpdateTime() {
    const element = document.getElementById('lastUpdate');
    if (element) {
        const now = new Date();
        element.textContent = `‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${formatDateTime(now)}`;
    }
}

/**
 * ‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô loading (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà)
 */
function showLoading(show) {
    const tbody = document.getElementById('historyTableBody');
    if (show && tbody) {
        tbody.innerHTML = `
            <tr>
                <td colspan="13" class="text-center py-5">
                    <div class="d-flex flex-column align-items-center">
                        <div class="spinner-border text-primary mb-3" role="status" style="width: 3rem; height: 3rem;">
                            <span class="visually-hidden">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</span>
                        </div>
                        <h5 class="text-primary mb-2">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï</h5>
                        <p class="text-muted">‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...</p>
                        <div class="progress" style="width: 200px; height: 4px;">
                            <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                 role="progressbar" style="width: 100%"></div>
                        </div>
                    </div>
                </td>
            </tr>
        `;
    }
}

/**
 * ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà)
 */
function showError(message) {
    const tbody = document.getElementById('historyTableBody');
    const statusElement = document.getElementById('systemStatus');
    
    if (tbody) {
        tbody.innerHTML = `
            <tr>
                <td colspan="13" class="text-center py-5">
                    <div class="d-flex flex-column align-items-center">
                        <i class="bi bi-exclamation-triangle-fill fs-1 text-danger mb-3"></i>
                        <h5 class="text-danger mb-2">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</h5>
                        <p class="text-muted mb-3">${message}</p>
                        <div class="d-flex gap-2">
                            <button class="btn btn-outline-primary" onclick="loadInitialData()">
                                <i class="bi bi-arrow-clockwise me-1"></i>‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
                            </button>
                            <button class="btn btn-outline-secondary" onclick="clearAllFilters()">
                                <i class="bi bi-x-lg me-1"></i>‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á
                            </button>
                        </div>
                    </div>
                </td>
            </tr>
        `;
    }
    
    if (statusElement) {
        statusElement.innerHTML = '<i class="bi bi-x-circle me-1"></i>‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå';
        statusElement.className = 'badge bg-danger fs-6 px-3 py-2';
    }
}

// ================================================================
// 8. ENHANCED EVENT LISTENERS
// ================================================================

/**
 * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Event Listeners (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà)
 */
function setupEventListeners() {
    console.log('Setting up enhanced event listeners...');
    
    // ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    const basicFilters = ['departmentFilter', 'machineFilter', 'productFilter', 'dateFromFilter', 'dateToFilter'];
    basicFilters.forEach(filterId => {
        const element = document.getElementById(filterId);
        if (element) {
            element.addEventListener('change', applyFiltersAndRender);
        }
    });
    
    // ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
    const advancedFilters = ['shiftFilter', 'oeeRangeFilter', 'minQuantityFilter', 'maxQuantityFilter', 'sortByFilter', 'recordsPerPage'];
    advancedFilters.forEach(filterId => {
        const element = document.getElementById(filterId);
        if (element) {
            element.addEventListener('change', applyFiltersAndRender);
        }
    });
    
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö debounce
    const keywordFilter = document.getElementById('historyKeywordFilter');
    if (keywordFilter) {
        let debounceTimer;
        keywordFilter.addEventListener('input', () => {
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(applyFiltersAndRender, 300);
        });
    }
    
    // ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ
    setupControlButtons();
    
    // ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
    setupAdvancedFilters();
    
    console.log('Enhanced event listeners setup completed');
}

/**
 * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
 */
function setupControlButtons() {
    // ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
    const refreshBtn = document.getElementById('refreshHistoryBtn');
    if (refreshBtn) {
        refreshBtn.addEventListener('click', () => {
            showToast('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...', 'info');
            loadInitialData();
        });
    }
    
    // ‡∏õ‡∏∏‡πà‡∏°‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á
    const clearBtn = document.getElementById('clearFiltersBtn');
    if (clearBtn) {
        clearBtn.addEventListener('click', clearAllFilters);
    }
    
    // ‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å
    const exportBtn = document.getElementById('exportHistoryBtn');
    if (exportBtn) {
        exportBtn.addEventListener('click', exportToExcel);
    }
    
    // ‡∏õ‡∏∏‡πà‡∏°‡∏û‡∏¥‡∏°‡∏û‡πå
    const printBtn = document.getElementById('printReportBtn');
    if (printBtn) {
        printBtn.addEventListener('click', printReport);
    }

}

/**
 * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
 */
function setupAdvancedFilters() {
    const toggleBtn = document.getElementById('toggleAdvancedFilters');
    const advancedRow = document.getElementById('advancedFiltersRow');
    
    if (toggleBtn && advancedRow) {
        toggleBtn.addEventListener('click', () => {
            advancedFiltersVisible = !advancedFiltersVisible;
            
            if (advancedFiltersVisible) {
                advancedRow.classList.remove('d-none');
                toggleBtn.innerHTML = '<i class="bi bi-dash-circle me-1"></i>‡∏ã‡πà‡∏≠‡∏ô‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°';
            } else {
                advancedRow.classList.add('d-none');
                toggleBtn.innerHTML = '<i class="bi bi-plus-circle me-1"></i>‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°';
            }
        });
    }
}

/**
 * ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà)
 */
function clearAllFilters() {
    // Clear main filters
    document.getElementById('departmentFilter').value = '';
    document.getElementById('machineFilter').value = '';
    document.getElementById('productFilter').value = '';
    document.getElementById('dateFromFilter').value = '';
    document.getElementById('dateToFilter').value = '';
    document.getElementById('historyKeywordFilter').value = '';
    
    // Clear advanced filters
    document.getElementById('shiftFilter').value = '';
    document.getElementById('oeeRangeFilter').value = '';
    document.getElementById('minQuantityFilter').value = '';
    document.getElementById('maxQuantityFilter').value = '';
    document.getElementById('sortByFilter').value = 'date_desc';
    document.getElementById('recordsPerPage').value = '25';
    
    // Reset pagination
    currentPage = 1;
    
    // Re-apply filters and render
    applyFiltersAndRender();
    
    showToast('‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', 'success');
}

/**
 * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
 */
function saveCurrentFilters() {
    const filters = getActiveFilters();
    localStorage.setItem('historyFilters', JSON.stringify(filters));
    showToast('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß', 'success');
}

/**
 * ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
 */
function printReport() {
    window.print();
}

// ================================================================
// 9. ENHANCED UTILITY FUNCTIONS
// ================================================================

/**
 * ‡∏î‡∏∂‡∏á CSS class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OEE
 */
function getOEEClass(oee) {
    if (oee >= 85) return 'oee-excellent';
    if (oee >= 60) return 'oee-good';
    return 'oee-poor';
}

/**
 * ‡∏î‡∏∂‡∏á CSS class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö badge OEE
 */
function getOEEBadgeClass(oee) {
    if (oee >= 85) return 'bg-success';
    if (oee >= 60) return 'bg-warning';
    return 'bg-danger';
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° label ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OEE
 */
function getOEELabel(oee) {
    if (oee >= 85) return '‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°';
    if (oee >= 60) return '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏ñ‡∏∂‡∏á‡∏î‡∏µ';
    return '‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á';
}

/**
 * ‡∏î‡∏∂‡∏á‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö metrics ‡∏ï‡πà‡∏≤‡∏á‡πÜ
 */
function getMetricColor(value, type) {
    switch (type) {
        case 'performance':
            if (value >= 90) return 'text-success';
            if (value >= 70) return 'text-warning';
            return 'text-danger';
        case 'quality':
            if (value >= 95) return 'text-success';
            if (value >= 85) return 'text-warning';
            return 'text-danger';
        case 'availability':
            if (value >= 85) return 'text-success';
            if (value >= 70) return 'text-warning';
            return 'text-danger';
        default:
            return 'text-muted';
    }
}

/**
 * ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢
 */
function formatDateThai(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('th-TH', {
        day: 'numeric',
        month: 'short',
        year: 'numeric'
    });
}

/**
 * ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
 */
function formatDateTime(date) {
    return date.toLocaleString('th-TH', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
}

/**
 * ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á Modal)
 */
function showItemDetails(index) {
    const item = getCurrentPageData()[index];
    if (!item) return;
    
    console.log('Showing details for item:', item);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ Modal
    const modalBody = document.getElementById('jobDetailsModalBody');
    const modalTitle = document.getElementById('jobDetailsModalLabel');
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï title
    modalTitle.innerHTML = `
        <i class="bi bi-info-circle-fill me-2"></i>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô: ${item.ProductName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} 
        <small class="opacity-75">(${item.LotNumber || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏•‡πá‡∏≠‡∏ï'})</small>
    `;
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á Modal
    modalBody.innerHTML = createJobDetailsContent(item);
    
    // ‡πÅ‡∏™‡∏î‡∏á Modal
    const modal = new bootstrap.Modal(document.getElementById('jobDetailsModal'));
    modal.show();
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô
 */
function createJobDetailsContent(item) {
    const productionDate = item.ProductionDate || item.ConfirmedAt || '-';
    const actualStartTime = item.ActualStartTime || '-';
    const actualEndTime = item.ActualEndTime || '-';
    const plannedEndTime = item.PlannedEndTime || '-';
    const workingHours = parseFloat(item.WorkingHours) || 0;
    
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• OEE
    const oeeAvailability = parseFloat(item.OEE_Availability) || 0;
    const oeePerformance = parseFloat(item.OEE_Performance) || 0;
    const oeeQuality = parseFloat(item.OEE_Quality) || 0;
    const oeeOverall = parseFloat(item.OEE_Overall) || 0;
    
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï
    const lotSize = parseInt(item.LotSize) || 0;
    const totalPieces = parseInt(item.TotalPieces) || 0;
    const goodQuantity = parseInt(item.GoodQuantity) || 0;
    const rejectPieces = parseInt(item.RejectPieces) || 0;
    const downtimeMinutes = parseInt(item.DowntimeMinutes) || 0;
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    const yieldRate = totalPieces > 0 ? ((goodQuantity / totalPieces) * 100) : 0;
    const efficiency = lotSize > 0 ? ((totalPieces / lotSize) * 100) : 0;
    const plannedProductionTime = workingHours * 60; // ‡∏ô‡∏≤‡∏ó‡∏µ
    const actualProductionTime = plannedProductionTime - downtimeMinutes;
    
    return `
        <div class="container-fluid">
            <!-- Job Overview -->
            <div class="row mb-4">
                <div class="col-12">
                    <div class="card bg-light">
                        <div class="card-body">
                            <h6 class="card-title text-primary mb-3">
                                <i class="bi bi-clipboard-data me-2"></i>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏á‡∏≤‡∏ô
                            </h6>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="table-responsive">
                                        <table class="table table-sm">
                                            <tr>
                                                <td class="fw-bold">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏•‡∏¥‡∏ï:</td>
                                                <td>${productionDate ? formatDateThai(productionDate) : '-'}</td>
                                            </tr>
                                            <tr>
                                                <td class="fw-bold">‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå:</td>
                                                <td>${item.ProductName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</td>
                                            </tr>
                                            <tr>
                                                <td class="fw-bold">‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:</td>
                                                <td>${item.ProductCode || '-'}</td>
                                            </tr>
                                            <tr>
                                                <td class="fw-bold">‡∏Ç‡∏ô‡∏≤‡∏î:</td>
                                                <td>${item.ProductSize || '-'}</td>
                                            </tr>
                                            <tr>
                                                <td class="fw-bold">‡∏£‡∏´‡∏±‡∏™‡∏•‡πá‡∏≠‡∏ï:</td>
                                                <td><code>${item.LotNumber || '-'}</code></td>
                                            </tr>
                                        </table>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="table-responsive">
                                        <table class="table table-sm">
                                            <tr>
                                                <td class="fw-bold">‡πÅ‡∏ú‡∏ô‡∏Å:</td>
                                                <td><span class="badge bg-primary">${item.Department || item.DepartmentName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</span></td>
                                            </tr>
                                            <tr>
                                                <td class="fw-bold">‡πÅ‡∏ú‡∏ô‡∏Å‡∏¢‡πà‡∏≠‡∏¢:</td>
                                                <td><span class="badge bg-secondary">${item.SubdepartmentName || item.Subdepartment || '-'}</span></td>
                                            </tr>
                                
                                            <tr>
                                                <td class="fw-bold">‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£:</td>
                                                <td><span class="badge bg-success">${item.MachineName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</span></td>
                                            </tr>
                                            <tr>
                                                <td class="fw-bold">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô:</td>
                                                <td><span class="badge bg-success">‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô</span></td>
                                            </tr>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Time Schedule -->
            <div class="row mb-4">
                <div class="col-12">
                    <div class="card">
                        <div class="card-body">
                            <h6 class="card-title text-success mb-3">
                                <i class="bi bi-clock me-2"></i>‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï
                            </h6>
                            <div class="row">
                                <div class="col-md-3">
                                    <div class="text-center p-3 bg-light rounded">
                                        <h6 class="text-muted">‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô)</h6>
                                        <div class="fs-5 fw-bold text-primary">
                                            ${item.PlannedStartTime ? formatTime(item.PlannedStartTime) : '-'}
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="text-center p-3 bg-light rounded">
                                        <h6 class="text-muted">‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î (‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô)</h6>
                                        <div class="fs-5 fw-bold text-warning">
                                            ${plannedEndTime ? formatTime(plannedEndTime) : '-'}
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="text-center p-3 bg-light rounded">
                                        <h6 class="text-muted">‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏à‡∏£‡∏¥‡∏á)</h6>
                                        <div class="fs-5 fw-bold text-info">
                                            ${actualStartTime ? formatTime(actualStartTime) : '-'}
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="text-center p-3 bg-light rounded">
                                        <h6 class="text-muted">‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î (‡∏à‡∏£‡∏¥‡∏á)</h6>
                                        <div class="fs-5 fw-bold text-success">
                                            ${actualEndTime ? formatTime(actualEndTime) : '-'}
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row mt-3">
                                <div class="col-md-3">
                                    <div class="text-center p-2 border rounded">
                                        <small class="text-muted">‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</small>
                                        <div class="fw-bold">${workingHours.toFixed(1)} ‡∏ä‡∏°.</div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="text-center p-2 border rounded">
                                        <small class="text-muted">‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î</small>
                                        <div class="fw-bold text-danger">${downtimeMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ</div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="text-center p-2 border rounded">
                                        <small class="text-muted">‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡∏•‡∏¥‡∏ï‡∏à‡∏£‡∏¥‡∏á</small>
                                        <div class="fw-bold text-success">${actualProductionTime} ‡∏ô‡∏≤‡∏ó‡∏µ</div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="text-center p-2 border rounded">
                                        <small class="text-muted">‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏°</small>
                                        <div class="fw-bold">${calculateDurationSimple(actualStartTime, actualEndTime)}</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Production Data -->
            <div class="row mb-4">
                <div class="col-md-6">
                    <div class="card h-100">
                        <div class="card-body">
                            <h6 class="card-title text-info mb-3">
                                <i class="bi bi-bar-chart me-2"></i>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï
                            </h6>
                            <div class="table-responsive">
                                <table class="table table-sm">
                                    <tr>
                                        <td class="fw-bold">‡∏Ç‡∏ô‡∏≤‡∏î‡∏•‡πá‡∏≠‡∏ï:</td>
                                        <td class="text-end">
                                            <span class="fw-bold text-primary">${formatNumber(lotSize)}</span> ‡∏•‡πä‡∏≠‡∏ï
                                        </td>
                                    </tr>
                                    <tr>
                                        <td class="fw-bold">‡∏ú‡∏•‡∏¥‡∏ï‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á:</td>
                                        <td class="text-end">
                                            <span class="fw-bold text-info">${formatNumber(totalPieces)}</span> ‡∏ä‡∏¥‡πâ‡∏ô
                                        </td>
                                    </tr>
                                    <tr>
                                        <td class="fw-bold">‡∏Ç‡∏≠‡∏á‡∏î‡∏µ:</td>
                                        <td class="text-end">
                                            <span class="fw-bold text-success">${formatNumber(goodQuantity)}</span> ‡∏ä‡∏¥‡πâ‡∏ô
                                        </td>
                                    </tr>
                                    <tr>
                                        <td class="fw-bold">‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢:</td>
                                        <td class="text-end">
                                            <span class="fw-bold text-danger">${formatNumber(rejectPieces)}</span> ‡∏ä‡∏¥‡πâ‡∏ô
                                        </td>
                                    </tr>
                                    <tr>
                                        <td class="fw-bold">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (Rework):</td>
                                        <td class="text-end">
                                            <span class="fw-bold text-warning">${typeof item.ReworkPieces !== 'undefined' ? formatNumber(item.ReworkPieces) : '-'}</span> ‡∏ä‡∏¥‡πâ‡∏ô
                                        </td>
                                    </tr>
                                    <tr>
                                        <td class="fw-bold">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (Remark):</td>
                                        <td class="text-end">
                                            <span class="fw-bold text-info">${item.Remark || '-'}</span>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                            
                        </div>
                    </div>
                </div>
                
                <div class="col-md-6">
                    <div class="card h-100">
                        <div class="card-body">
                            <h6 class="card-title text-warning mb-3">
                                <i class="bi bi-speedometer me-2"></i>‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô OEE ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                            </h6>
                            
                            <!-- OEE Breakdown -->
                            <div class="mb-3">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <span class="fw-bold">Availability (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°)</span>
                                    <span class="fw-bold ${getMetricColor(oeeAvailability, 'availability')}">${oeeAvailability.toFixed(1)}%</span>
                                </div>
                                <div class="progress mb-3" style="height: 10px;">
                                    <div class="progress-bar ${getProgressBarClass(oeeAvailability, 'availability')}" style="width: ${oeeAvailability}%"></div>
                                </div>
                                
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <span class="fw-bold">Performance (‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û)</span>
                                    <span class="fw-bold ${getMetricColor(oeePerformance, 'performance')}">${oeePerformance.toFixed(1)}%</span>
                                </div>
                                <div class="progress mb-3" style="height: 10px;">
                                    <div class="progress-bar ${getProgressBarClass(oeePerformance, 'performance')}" style="width: ${oeePerformance}%"></div>
                                </div>
                                
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <span class="fw-bold">Quality (‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û)</span>
                                    <span class="fw-bold ${getMetricColor(oeeQuality, 'quality')}">${oeeQuality.toFixed(1)}%</span>
                                </div>
                                <div class="progress mb-3" style="height: 10px;">
                                    <div class="progress-bar ${getProgressBarClass(oeeQuality, 'quality')}" style="width: ${oeeQuality}%"></div>
                                </div>
                            </div>
                            
                            <!-- Overall OEE -->
                            <div class="text-center p-3 ${getOEEClass(oeeOverall)} rounded">
                                <h5 class="mb-1 text-white">Overall Equipment Effectiveness</h5>
                                <h2 class="mb-0 fw-bold text-white">${oeeOverall.toFixed(1)}%</h2>
                                <span class="badge bg-light text-dark mt-2">${getOEELabel(oeeOverall)}</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Additional Information -->
            <div class="row">
                <div class="col-12">
                    <div class="card">
                        <div class="card-body">
                            <h6 class="card-title text-secondary mb-3">
                                <i class="bi bi-info-square me-2"></i>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                            </h6>
                            <div class="row">
                                <div class="col-md-6">
                                    <h6 class="text-muted">‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á:</h6>
                                    <p class="mb-3 text-danger fw-bold">${downtimeMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ</p>
                                </div>
                                <div class="col-md-6">
                                     <h6 class="text-muted">‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á:</h6>
                                    <p class="mb-3">${item.DowntimeReason || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á'}</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `;
}

/**
 * ‡∏î‡∏∂‡∏á CSS class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö progress bar ‡∏ï‡∏≤‡∏° metric type
 */
function getProgressBarClass(value, type) {
    switch (type) {
        case 'performance':
            if (value >= 90) return 'bg-success';
            if (value >= 70) return 'bg-warning';
            return 'bg-danger';
        case 'quality':
            if (value >= 95) return 'bg-success';
            if (value >= 85) return 'bg-warning';
            return 'bg-danger';
        case 'availability':
            if (value >= 85) return 'bg-success';
            if (value >= 70) return 'bg-warning';
            return 'bg-danger';
        default:
            return 'bg-primary';
    }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Modal
 */
function calculateDurationSimple(startTime, endTime) {
    if (!startTime || !endTime) return '-';
    
    const start = new Date(startTime);
    const end = new Date(endTime);
    const diffMs = end - start;
    
    if (diffMs <= 0) return '-';
    
    const hours = Math.floor(diffMs / (1000 * 60 * 60));
    const minutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));
    
    return `${hours} ‡∏ä‡∏°. ${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ`;
}

function getMetricColor(value, type) {
    const thresholds = {
        availability: { excellent: 85, good: 70 },
        performance: { excellent: 90, good: 70 },
        quality: { excellent: 95, good: 85 }
    };
    
    const threshold = thresholds[type] || thresholds.availability;
    
    if (value >= threshold.excellent) return 'text-success';
    if (value >= threshold.good) return 'text-warning';
    return 'text-danger';
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡∏π‡∏ó‡∏¥‡∏•‡∏¥‡∏ï‡∏µ‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
 */

/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 2 ‡πÄ‡∏ß‡∏•‡∏≤
 */
function calculateWorkingHours(startTime, endTime) {
    if (!startTime || !endTime) return 0;
    
    const start = new Date(startTime);
    const end = new Date(endTime);
    const diffMs = end - start;
    const diffHours = diffMs / (1000 * 60 * 60);
    return Math.max(0, diffHours);
}

/**
 * ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢
 */
function formatDateThai(dateString) {
    if (!dateString) return '-';
    
    const date = new Date(dateString);
    const options = { 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric',
        weekday: 'long'
    };
    
    return date.toLocaleDateString('th-TH', options);
}

/**
 * ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡πÄ‡∏ß‡∏•‡∏≤
 */
function formatTime(timeString) {
    if (!timeString) return '-';
    
    const date = new Date(timeString);
    return date.toLocaleTimeString('th-TH', { 
        hour: '2-digit', 
        minute: '2-digit',
        hour12: false
    });
}

/**
 * ‡πÅ‡∏™‡∏î‡∏á Pagination Controls
 */
function renderPaginationControls() {
    // TODO: Add pagination UI if needed
    if (totalPages <= 1) return;
    
    console.log(`Pagination: Page ${currentPage} of ${totalPages}`);
}

// ================================================================
// 10. LEGACY UTILITY FUNCTIONS (‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ compatibility)
// ================================================================

/**
 * ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏¥‡∏°)
 */
function formatNumber(num) {
    if (typeof num !== 'number') {
        num = parseInt(num) || 0;
    }
    return num.toLocaleString('th-TH');
}

/**
 * ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏¥‡∏°)
 */
function formatDateSimple(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('th-TH', {
        day: 'numeric',
        month: 'short',
        year: 'numeric'
    });
}

/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏¥‡∏°)
 */
function calculateDurationSimple(startTime, endTime) {
    if (!startTime || !endTime) return '-';
    
    const start = new Date(startTime);
    const end = new Date(endTime);
    const diffMs = end - start;
    const hours = Math.floor(diffMs / (1000 * 60 * 60));
    const minutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));
    
    if (hours > 0) {
        return `${hours} ‡∏ä‡∏°. ${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ`;
    } else {
        return `${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ`;
    }
}

/**
 * ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏¥‡∏°)
 */
function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('th-TH', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric'
    });
}

/**
 * ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏¥‡∏°)
 */
function formatTime(dateString) {
    const date = new Date(dateString);
    return date.toLocaleTimeString('th-TH', {
        hour: '2-digit',
        minute: '2-digit'
    });
}

/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏¥‡∏°)
 */
function calculateDuration(startTime, endTime) {
    if (!startTime || !endTime) return '-';
    
    const start = new Date(startTime);
    const end = new Date(endTime);
    const diffMs = end - start;
    const hours = Math.floor(diffMs / (1000 * 60 * 60));
    const minutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));
    
    return `${hours}:${minutes.toString().padStart(2, '0')}`;
}

/**
 * ‡πÅ‡∏™‡∏î‡∏á Toast notification (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà)
 */
function showToast(message, type = 'success') {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á toast container
    let toastContainer = document.querySelector('.toast-container');
    if (!toastContainer) {
        toastContainer = document.createElement('div');
        toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
        toastContainer.style.zIndex = '1055';
        document.body.appendChild(toastContainer);
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á toast element
    const toastEl = document.createElement('div');
    toastEl.className = `toast align-items-center text-white bg-${type}`;
    toastEl.setAttribute('role', 'alert');
    toastEl.innerHTML = `
        <div class="d-flex">
            <div class="toast-body">
                <i class="bi bi-${getToastIcon(type)} me-2"></i>${message}
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
        </div>
    `;
    
    toastContainer.appendChild(toastEl);
    
    // ‡πÅ‡∏™‡∏î‡∏á toast
    const toast = new bootstrap.Toast(toastEl, { 
        autohide: type !== 'error',
        delay: type === 'error' ? 10000 : 3000 
    });
    toast.show();
    
    // ‡∏•‡∏ö element ‡∏´‡∏•‡∏±‡∏á‡∏ã‡πà‡∏≠‡∏ô
    toastEl.addEventListener('hidden.bs.toast', () => {
        toastEl.remove();
    });
}

/**
 * ‡∏î‡∏∂‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö toast
 */
function getToastIcon(type) {
    switch (type) {
        case 'success': return 'check-circle';
        case 'error': return 'exclamation-triangle';
        case 'warning': return 'exclamation-triangle';
        case 'info': return 'info-circle';
        default: return 'info-circle';
    }
}

// ================================================================
// EXPORT FUNCTIONS - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
// ================================================================

/**
 * ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Excel (DD/MM/YYYY)
 */
function formatDateForExcel(dateString) {
    if (!dateString || dateString === '-' || dateString === '') return '';
    
    try {
        const date = new Date(dateString);
        if (isNaN(date.getTime())) return dateString; // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
        
        const day = date.getDate().toString().padStart(2, '0');
        const month = (date.getMonth() + 1).toString().padStart(2, '0');
        const year = date.getFullYear();
        
        return `${day}/${month}/${year}`;
    } catch (error) {
        console.warn('Error formatting date:', dateString, error);
        return dateString;
    }
}

/**
 * ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Excel (DD/MM/YYYY HH:MM)
 */
function formatDateTimeForExcel(dateString) {
    if (!dateString || dateString === '-' || dateString === '') return '';
    
    try {
        const date = new Date(dateString);
        if (isNaN(date.getTime())) return dateString;
        
        const day = date.getDate().toString().padStart(2, '0');
        const month = (date.getMonth() + 1).toString().padStart(2, '0');
        const year = date.getFullYear();
        const hours = date.getHours().toString().padStart(2, '0');
        const minutes = date.getMinutes().toString().padStart(2, '0');
        
        return `${day}/${month}/${year} ${hours}:${minutes}`;
    } catch (error) {
        console.warn('Error formatting datetime:', dateString, error);
        return dateString;
    }
}
/**
 * Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô Excel - ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ProductionResults (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà)
 */
function exportToExcel() {
    const allData = filteredData.length > 0 ? filteredData : historyData;
    
    if (!allData || allData.length === 0) {
        showToast('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å', 'warning');
        return;
    }
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
    const jsonData = allData.map((item) => ({
        // === ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô ===
        'Plan ID': item.PlanID || '-',
        'Order Number': item.OrderNumber || '-',
        'Production Date': formatDateForExcel(item.ProductionDate),
        
        // === ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå ===
        'Product Name': item.ProductName || '-',
        'Product Size': item.ProductSize || '-',
        
        // === ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£ ===
        'Department': item.Department || '-',
        'Subdepartment': item.Subdepartment || '-', // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
        'Machine Name': item.MachineName || '-',
        
        // === ‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï ===
        'Planned Start': formatDateTimeForExcel(item.PlannedStartTime),
        'Planned End': formatDateTimeForExcel(item.PlannedEndTime),
        'Start Time': formatDateTimeForExcel(item.ActualStartTime),
        'End Time': formatDateTimeForExcel(item.ActualEndTime),
        'Shift Hours': parseFloat(item.ShiftHours) || 0,
        'Overtime (Min)': parseInt(item.OvertimeMinutes) || 0,
        
        // === ‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å ===
        'Morning Break (Min)': parseInt(item.BreakMorningMinutes) || 0,
        'Lunch Break (Min)': parseInt(item.BreakLunchMinutes) || 0,
        'Evening Break (Min)': parseInt(item.BreakEveningMinutes) || 0,
        'Total Break (Min)': parseInt(item.TotalBreakMinutes) || 0,
        
        // === ‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ===
        'Downtime (Min)': parseInt(item.DowntimeMinutes) || 0,
        'Downtime Reason': item.DowntimeReason || '-',
        
        // === ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ===
        'Planned Work (Min)': parseInt(item.PlannedWorkMinutes) || 0,
        'Active Work (Min)': parseInt(item.ActiveWorkMinutes) || 0,
        'Working Hours': parseFloat(item.WorkingHours) || 0,
        
        // === ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏¥‡∏ï ===
        'Total Pieces': parseInt(item.TotalPieces) || 0,
        'Good Quantity': parseInt(item.GoodQuantity) || 0,
        'Reject Pieces': parseInt(item.RejectPieces) || 0,
        'Rework Pieces': parseInt(item.ReworkPieces) || 0, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
        'Remark': item.Remark || '-', // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
        
        // === ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï ===
        'Standard Rate': parseFloat(item.StandardRunRate) || 0,
        'Actual Rate': parseFloat(item.ActualRunRate) || 0,
        
        // === OEE (%) ===
        'Availability (%)': parseFloat(item.OEE_Availability) || 0,
        'Performance (%)': parseFloat(item.OEE_Performance) || 0,
        'Quality (%)': parseFloat(item.OEE_Quality) || 0,
        'Overall OEE (%)': parseFloat(item.OEE_Overall) || 0,
        
        // === ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ===
        'Status': item.Status || '-',
        'Confirmed At': formatDateTimeForExcel(item.ConfirmedAt),
        'Confirmed By': item.ConfirmedByUserName || '-',
        'Result ID': item.ResultID || '-'
    }));

    // ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á CSV ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ XLSX library
    if (typeof XLSX === 'undefined') {
        exportToCSV(jsonData);
        return;
    }

    try {
        const worksheet = XLSX.utils.json_to_sheet(jsonData);
        
        // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ - ‡∏à‡∏±‡∏î‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÉ‡∏´‡∏°‡πà
        const colWidths = [
            // === ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô ===
            { wch: 10 },  // Plan ID
            { wch: 15 },  // Order Number
            { wch: 15 },  // Production Date
            
            // === ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå ===
            { wch: 25 },  // Product Name
            { wch: 12 },  // Product Size
            
            // === ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£ ===
            { wch: 15 },  // Department
            { wch: 15 },  // Subdepartment ‚úÖ ‡πÉ‡∏´‡∏°‡πà
            { wch: 20 },  // Machine Name
            
            // === ‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï ===
            { wch: 18 },  // Planned Start
            { wch: 18 },  // Planned End
            { wch: 18 },  // Start Time
            { wch: 18 },  // End Time
            { wch: 12 },  // Shift Hours
            { wch: 15 },  // Overtime (Min)
            
            // === ‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å ===
            { wch: 18 },  // Morning Break (Min)
            { wch: 16 },  // Lunch Break (Min)
            { wch: 18 },  // Evening Break (Min)
            { wch: 17 },  // Total Break (Min)
            
            // === ‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ===
            { wch: 15 },  // Downtime (Min)
            { wch: 30 },  // Downtime Reason
            
            // === ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ===
            { wch: 18 },  // Planned Work (Min)
            { wch: 17 },  // Active Work (Min)
            { wch: 15 },  // Working Hours
            
            // === ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏¥‡∏ï ===
            { wch: 12 },  // Total Pieces
            { wch: 15 },  // Good Quantity
            { wch: 13 },  // Reject Pieces
            { wch: 14 },  // Rework Pieces ‚úÖ ‡πÉ‡∏´‡∏°‡πà
            { wch: 30 },  // Remark ‚úÖ ‡πÉ‡∏´‡∏°‡πà
            
            // === ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï ===
            { wch: 14 },  // Standard Rate
            { wch: 12 },  // Actual Rate
            
            // === OEE (%) ===
            { wch: 15 },  // Availability (%)
            { wch: 15 },  // Performance (%)
            { wch: 12 },  // Quality (%)
            { wch: 16 },  // Overall OEE (%)
            
            // === ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ===
            { wch: 10 },  // Status
            { wch: 18 },  // Confirmed At
            { wch: 18 },  // Confirmed By
            { wch: 10 }   // Result ID
        ];
        worksheet['!cols'] = colWidths;
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö header - ‡∏™‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        const range = XLSX.utils.decode_range(worksheet['!ref']);
        
        // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö header row ‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
        for (let col = range.s.c; col <= range.e.c; col++) {
            const cellAddress = XLSX.utils.encode_cell({ r: 0, c: col });
            if (!worksheet[cellAddress]) continue;
            
            worksheet[cellAddress].s = {
                font: { bold: true, color: { rgb: "FFFFFF" }, sz: 11 },
                fill: { fgColor: { rgb: "4472C4" } }, // ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                alignment: { horizontal: "center", vertical: "center" },
                border: {
                    top: { style: "thin", color: { rgb: "000000" } },
                    bottom: { style: "thin", color: { rgb: "000000" } },
                    left: { style: "thin", color: { rgb: "000000" } },
                    right: { style: "thin", color: { rgb: "000000" } }
                }
            };
        }
        
        const workbook = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(workbook, worksheet, "Production Report");
        
        const filename = `Production_Report_${formatDateForFilename(new Date())}.xlsx`;
        XLSX.writeFile(workbook, filename);
        
        showToast(`‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${allData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô Excel ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`, 'success');
        
    } catch (error) {
        console.error('Excel export error:', error);
        showToast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å Excel: ' + error.message, 'error');
        
        // Fallback to CSV export
        exportToCSV(jsonData);
    }
}

/**
 * Export ‡πÄ‡∏õ‡πá‡∏ô CSV ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ XLSX library
 */
function exportToCSV(data) {
    if (!data || data.length === 0) {
        showToast('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å', 'warning');
        return;
    }
    
    const headers = Object.keys(data[0]);
    const csvContent = [
        headers.join(','),
        ...data.map(row => headers.map(field => `"${row[field]}"`).join(','))
    ].join('\n');
    
    const blob = new Blob(['\ufeff' + csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    
    link.setAttribute('href', url);
    link.setAttribute('download', `ProductionResults_${formatDateForFilename(new Date())}.csv`);
    link.style.visibility = 'hidden';
    
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    showToast(`‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${data.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô CSV ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`, 'success');
}

/**
 * Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô PDF
 */
function exportToPDF() {
    const allData = filteredData.length > 0 ? filteredData : historyData;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö jsPDF library
    if (typeof window.jspdf === 'undefined') {
        // Fallback: ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ window.print
        printData();
        return;
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á jsPDF
    const { jsPDF } = window.jspdf;
    const doc = new jsPDF();
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ (‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÅ‡∏ó‡∏ô)
    doc.setFont("helvetica");
    
    // ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
    doc.setFontSize(16);
    doc.text('OEE Factory History Report', 20, 20);
    
    doc.setFontSize(12);
    doc.text(`Generated: ${formatDateTime(new Date())}`, 20, 30);
    doc.text(`Total Records: ${allData.length}`, 20, 40);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    const headers = [
        'Date', 'Department', 'Machine', 'Product', 'Lot Size', 
        'Produced', 'Good', 'Reject', 'OEE (%)'
    ];
    
    const data = allData.slice(0, 50).map(item => [ // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà 50 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        item.ProductionDate ? formatDateShort(item.ProductionDate) : '-',
        item.Department || item.DepartmentName || '-',
        (item.MachineName || '').substring(0, 15), // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß
        (item.ProductName || '').substring(0, 20),
        item.LotSize || 0,
        item.TotalPieces || 0,
        item.GoodQuantity || 0,
        item.RejectPieces || 0,
        (parseFloat(item.OEE_Overall) || 0).toFixed(1)
    ]);
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ autoTable (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if (typeof doc.autoTable !== 'undefined') {
        doc.autoTable({
            head: [headers],
            body: data,
            startY: 50,
            theme: 'striped',
            styles: {
                fontSize: 8,
                cellPadding: 2
            }
        });
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        const stats = calculateStatsSimple(allData);
        const finalY = doc.lastAutoTable.finalY + 20;
        
        doc.setFontSize(10);
        doc.text('Summary Statistics:', 20, finalY);
        doc.text(`Average OEE: ${stats.avgOEE.toFixed(1)}%`, 20, finalY + 10);
        doc.text(`Total Production: ${formatNumber(stats.totalProduction)} pieces`, 20, finalY + 20);
        doc.text(`Total Good Quality: ${formatNumber(stats.totalGoodQuantity)} pieces`, 20, finalY + 30);
    } else {
        // Fallback: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
        doc.setFontSize(10);
        let yPos = 60;
        data.slice(0, 20).forEach((row, index) => {
            doc.text(`${index + 1}. ${row.join(' | ')}`, 20, yPos);
            yPos += 10;
        });
    }
    
    const filename = `OEE_Report_${formatDateForFilename(new Date())}.pdf`;
    doc.save(filename);
    
    showToast(`‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô PDF ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (${Math.min(allData.length, 50)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)`, 'success');
}

/**
 * ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 */
function printData() {
    const currentData = filteredData.length > 0 ? filteredData : historyData;
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏¥‡∏°‡∏û‡πå
    const printWindow = window.open('', '_blank');
    const printContent = generatePrintContent(currentData);
    
    printWindow.document.write(printContent);
    printWindow.document.close();
    
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå
    printWindow.onload = function() {
        printWindow.print();
        setTimeout(() => printWindow.close(), 1000);
    };
    
    showToast('‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå', 'info');
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏¥‡∏°‡∏û‡πå
 */
function generatePrintContent(data) {
    const stats = calculateStatsSimple(data);
    
    return `
<!DOCTYPE html>
<html>
<head>
    <title>OEE Factory History Report</title>
    <meta charset="utf-8">
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { text-align: center; margin-bottom: 30px; }
        .header h1 { color: #2c3e50; margin-bottom: 10px; }
        .header p { color: #7f8c8d; margin: 5px 0; }
        .stats { display: flex; justify-content: space-around; margin: 20px 0; text-align: center; }
        .stat-item { padding: 10px; border: 1px solid #ddd; border-radius: 5px; }
        table { width: 100%; border-collapse: collapse; margin-top: 20px; font-size: 12px; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f8f9fa; font-weight: bold; }
        .text-center { text-align: center; }
        .text-right { text-align: right; }
        .oee-excellent { color: #28a745; font-weight: bold; }
        .oee-good { color: #17a2b8; font-weight: bold; }
        .oee-fair { color: #ffc107; font-weight: bold; }
        .oee-poor { color: #dc3545; font-weight: bold; }
        @media print {
            body { margin: 0; }
            .header { margin-bottom: 20px; }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>OEE Factory History Report</h1>
        <p>Generated on: ${formatDateTime(new Date())}</p>
        <p>Total Records: ${data.length}</p>
    </div>
    
    <div class="stats">
        <div class="stat-item">
            <h3>Average OEE</h3>
            <p class="${getOEEColorClassSimple(stats.avgOEE)}">${stats.avgOEE.toFixed(1)}%</p>
        </div>
        <div class="stat-item">
            <h3>Total Production</h3>
            <p>${formatNumber(stats.totalProduction)} pieces</p>
        </div>
        <div class="stat-item">
            <h3>Quality Rate</h3>
            <p>${stats.qualityRate.toFixed(1)}%</p>
        </div>
        <div class="stat-item">
            <h3>Availability</h3>
            <p>${stats.avgAvailability.toFixed(1)}%</p>
        </div>
    </div>
    
    <table>
        <thead>
            <tr>
                <th>Date</th>
                <th>Department</th>
                <th>Machine</th>
                <th>Product</th>
                <th class="text-right">Lot Size</th>
                <th class="text-right">Produced</th>
                <th class="text-right">Good</th>
                <th class="text-right">Reject</th>
                <th class="text-center">OEE %</th>
            </tr>
        </thead>
        <tbody>
            ${data.slice(0, 100).map(item => `
                <tr>
                    <td>${item.ProductionDate ? formatDateShort(item.ProductionDate) : '-'}</td>
                    <td>${item.Department || item.DepartmentName || '-'}</td>
                    <td>${item.MachineName || '-'}</td>
                    <td>${item.ProductName || '-'}</td>
                    <td class="text-right">${formatNumber(item.LotSize || 0)}</td>
                    <td class="text-right">${formatNumber(item.TotalPieces || 0)}</td>
                    <td class="text-right">${formatNumber(item.GoodQuantity || 0)}</td>
                    <td class="text-right">${formatNumber(item.RejectPieces || 0)}</td>
                    <td class="text-center ${getOEEColorClassSimple(parseFloat(item.OEE_Overall) || 0)}">
                        ${(parseFloat(item.OEE_Overall) || 0).toFixed(1)}%
                    </td>
                </tr>
            `).join('')}
        </tbody>
    </table>
    
    ${data.length > 100 ? `<p style="text-align: center; margin-top: 20px; color: #666;">‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏û‡∏µ‡∏¢‡∏á 100 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å ‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${data.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</p>` : ''}
</body>
</html>
    `;
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Export
 */
function formatDateForFilename(date) {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    return `${year}${month}${day}_${hours}${minutes}`;
}

function formatDateShort(dateString) {
    const date = new Date(dateString);
    return `${String(date.getDate()).padStart(2, '0')}/${String(date.getMonth() + 1).padStart(2, '0')}/${date.getFullYear()}`;
}

function getOEEColorClassSimple(oee) {
    if (oee >= 85) return 'oee-excellent';
    if (oee >= 65) return 'oee-good';
    if (oee >= 40) return 'oee-fair';
    return 'oee-poor';
}

function calculateStatsSimple(data) {
    const totalRecords = data.length;
    const totalProduction = data.reduce((sum, item) => sum + (parseInt(item.TotalPieces) || 0), 0);
    const totalGoodQuantity = data.reduce((sum, item) => sum + (parseInt(item.GoodQuantity) || 0), 0);
    const totalOEE = data.reduce((sum, item) => sum + (parseFloat(item.OEE_Overall) || 0), 0);
    const totalAvailability = data.reduce((sum, item) => sum + (parseFloat(item.OEE_Availability) || 0), 0);
    
    const avgOEE = totalRecords > 0 ? totalOEE / totalRecords : 0;
    const qualityRate = totalProduction > 0 ? (totalGoodQuantity / totalProduction) * 100 : 0;
    const avgAvailability = totalRecords > 0 ? totalAvailability / totalRecords : 0;
    
    return {
        totalRecords,
        totalProduction,
        totalGoodQuantity,
        avgOEE,
        qualityRate,
        avgAvailability
    };
}

// ================================================================
// END OF ENHANCED HISTORY PAGE
// ================================================================

console.log('Enhanced History page script loaded successfully - Version 3.0.0');

