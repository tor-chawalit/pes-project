// confirm-complete.js - Enhanced with Backend Integration
// =====================================================
// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á ProductionResults
//
// ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏´‡∏•‡∏±‡∏Å:
// ---------
// PlanID                    -> ID ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô
// ActualStartTime           -> ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏£‡∏¥‡∏á
// ActualEndTime             -> ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏à‡∏£‡∏¥‡∏á
// BreakMorningMinutes       -> ‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡πÄ‡∏ä‡πâ‡∏≤ (‡∏ô‡∏≤‡∏ó‡∏µ)
// BreakLunchMinutes         -> ‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á (‡∏ô‡∏≤‡∏ó‡∏µ)
// BreakEveningMinutes       -> ‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡πÄ‡∏¢‡πá‡∏ô (‡∏ô‡∏≤‡∏ó‡∏µ)
// StandardRunRate           -> ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
// GoodQuantity              -> ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏¥‡∏ï‡∏î‡∏µ
// DowntimeMinutes           -> ‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á (‡∏ô‡∏≤‡∏ó‡∏µ)
// DowntimeReason            -> ‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
// PlannedWorkMinutes        -> ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô (‡∏ô‡∏≤‡∏ó‡∏µ)
// ActiveWorkMinutes         -> ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á (‡∏ô‡∏≤‡∏ó‡∏µ)
// OEE_Overall               -> OEE ‡∏£‡∏ß‡∏°
// ActualRunRate             -> ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏à‡∏£‡∏¥‡∏á
// WorkingHours              -> ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
// TotalBreakMinutes         -> ‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏£‡∏ß‡∏° (‡∏ô‡∏≤‡∏ó‡∏µ)
//
// ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà backend ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£:
// ----------------------
// ResultID, ProductCode, ProductName, ProductSize
// Department, MachineName, ShiftName, ProductionDate
// ConfirmedByUserName, ConfirmedAt

// ================================================================
// HYBRID DATE PICKER FUNCTIONS
// ================================================================

/**
 * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á Native Date Picker ‡∏ó‡∏µ‡πà‡∏ã‡πà‡∏≠‡∏ô‡πÑ‡∏ß‡πâ‡∏Å‡∏±‡∏ö Text Field ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
 */
function setupConfirmHiddenDatePickers() {
  console.log('Setting up confirm page hidden date pickers...');
  
  // Setup Actual Start Date
  setupConfirmDatePickerWithButton('actualStartDate', 'actualStartDateHidden', 'actualStartDateBtn');
  
  // Setup Actual End Date  
  setupConfirmDatePickerWithButton('actualEndDate', 'actualEndDateHidden', 'actualEndDateBtn');
  
  console.log('Confirm page hidden date pickers setup completed');
}

/**
 * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ date picker ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ confirm
 */
function setupConfirmDatePickerWithButton(displayId, hiddenId, buttonId) {
  const displayField = document.getElementById(displayId);
  const hiddenField = document.getElementById(hiddenId);
  const button = document.getElementById(buttonId);
  
  if (!displayField || !hiddenField || !button) {
    console.warn(`Confirm date picker elements not found: ${displayId}, ${hiddenId}, ${buttonId}`);
    return;
  }
  
  console.log(`Setting up confirm date picker: ${displayId} -> ${hiddenId} (button: ${buttonId})`);
  
  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°
  button.addEventListener('click', () => {
    console.log(`Button ${buttonId} clicked, triggering ${hiddenId}`);
    triggerConfirmDatePicker(hiddenField);
  });
  
  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà display field
  displayField.addEventListener('click', () => {
    console.log(`Display field ${displayId} clicked, triggering ${hiddenId}`);
    triggerConfirmDatePicker(hiddenField);
  });
  
  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠ focus ‡∏ó‡∏µ‡πà display field
  displayField.addEventListener('focus', () => {
    console.log(`Display field ${displayId} focused, triggering ${hiddenId}`);
    triggerConfirmDatePicker(hiddenField);
  });
  
  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå
  displayField.addEventListener('keydown', (e) => {
    e.preventDefault();
    triggerConfirmDatePicker(hiddenField);
  });
  
  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô hidden field
  hiddenField.addEventListener('change', () => {
    console.log(`${hiddenId} changed to:`, hiddenField.value);
    updateConfirmDisplayField(hiddenField, displayField);
  });
  
  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠ input ‡πÉ‡∏ô hidden field
  hiddenField.addEventListener('input', () => {
    console.log(`${hiddenId} input:`, hiddenField.value);
    updateConfirmDisplayField(hiddenField, displayField);
  });
}

/**
 * ‡πÄ‡∏õ‡∏¥‡∏î native date picker ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ confirm
 */
function triggerConfirmDatePicker(hiddenField) {
  try {
    // ‡πÅ‡∏™‡∏î‡∏á field ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    hiddenField.style.pointerEvents = 'auto';
    hiddenField.style.opacity = '1';
    hiddenField.style.position = 'relative';
    hiddenField.style.zIndex = '9999';
    
    hiddenField.focus();
    
    // ‡πÉ‡∏ä‡πâ showPicker() ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
    if (hiddenField.showPicker && typeof hiddenField.showPicker === 'function') {
      hiddenField.showPicker();
      console.log('Used showPicker()');
    } else {
      // Fallback: ‡∏™‡∏£‡πâ‡∏≤‡∏á click event
      const clickEvent = new MouseEvent('click', {
        bubbles: true,
        cancelable: true,
        view: window
      });
      hiddenField.dispatchEvent(clickEvent);
      console.log('Used click event fallback');
    }
    
    // ‡∏ã‡πà‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 200ms
    setTimeout(() => {
      hiddenField.style.pointerEvents = 'none';
      hiddenField.style.opacity = '0';
      hiddenField.style.position = 'absolute';
    }, 200);
    
  } catch (error) {
    console.error('Error triggering confirm date picker:', error);
    // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏ô field
    hiddenField.style.pointerEvents = 'none';
    hiddenField.style.opacity = '0';
    hiddenField.style.position = 'absolute';
  }
}

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï display field ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ confirm
 */
function updateConfirmDisplayField(hiddenField, displayField) {
  if (hiddenField.value) {
    const date = new Date(hiddenField.value);
    displayField.value = formatConfirmDateToDDMMYYYY(date);
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° visual feedback
    displayField.classList.add('is-valid');
    displayField.classList.remove('is-invalid');
    setTimeout(() => displayField.classList.remove('is-valid'), 2000);
    
    console.log(`Updated ${displayField.id} to: ${displayField.value}`);
  } else {
    displayField.value = '';
    displayField.classList.remove('is-valid', 'is-invalid');
  }
}

/**
 * ‡πÅ‡∏õ‡∏•‡∏á Date object ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö DD/MM/YYYY ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ confirm
 */
function formatConfirmDateToDDMMYYYY(date) {
  const day = String(date.getDate()).padStart(2, '0');
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const year = date.getFullYear();
  return `${day}/${month}/${year}`;
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å hidden date picker (ISO format) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ confirm
 */
function getConfirmDateValue(fieldId) {
  const hiddenField = document.getElementById(fieldId + 'Hidden');
  return hiddenField ? hiddenField.value : '';
}

/**
 * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ hidden date picker ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ confirm
 */
function setConfirmDateValue(fieldId, isoDate) {
  const hiddenField = document.getElementById(fieldId + 'Hidden');
  const displayField = document.getElementById(fieldId);
  
  if (hiddenField && displayField) {
    hiddenField.value = isoDate;
    
    if (isoDate) {
      const date = new Date(isoDate);
      displayField.value = formatConfirmDateToDDMMYYYY(date);
    } else {
      displayField.value = '';
    }
  }
}

// ================================================================
// RESPONSE PARSER UTILITY
// ================================================================

/**
 * Parse response safely - handles both JSON and HTML responses
 * @param {Response} response - Fetch response object
 * @returns {Promise<Object>} - Parsed result object
 */
async function parseResponse(response) {
    if (!response.ok) {
        throw new Error('Request failed with status: ' + response.status);
    }
    
    const responseText = await response.text();
    
    try {
        // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° parse ‡πÄ‡∏õ‡πá‡∏ô JSON ‡∏Å‡πà‡∏≠‡∏ô
        return JSON.parse(responseText);
    } catch (parseError) {
        console.log("Response is not JSON:", responseText);
        
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ error HTML (response ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)
        if (!responseText.includes('<html') && !responseText.includes('error') && !responseText.includes('Error')) {
            // ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            return { success: true, message: 'Operation completed successfully' };
        } else {
            // ‡∏°‡∏µ error HTML ‡∏´‡∏£‡∏∑‡∏≠ error message
            throw new Error('Server returned HTML error response: ' + responseText.substring(0, 200));
        }
    }
}

// ================================================================
// TIME DROPDOWN MANAGEMENT FOR CONFIRM-COMPLETE
// ================================================================

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á options ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö dropdown ‡πÄ‡∏ß‡∏•‡∏≤ (‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á 00-23 ‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏ó‡∏µ 00-59)
 * ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ confirm-complete
 */
function populateConfirmTimeDropdowns() {
    console.log('üîÑ populateConfirmTimeDropdowns() called');
    const timeSelects = ['actualStartHour', 'actualEndHour', 'actualStartMinute', 'actualEndMinute'];
    
    timeSelects.forEach(selectId => {
        const select = document.getElementById(selectId);
        if (!select) {
            console.warn(`‚ùå Element with ID '${selectId}' not found`);
            return;
        }
        
        console.log(`üîç Processing dropdown: ${selectId}`);
        
        // ‡∏•‡πâ‡∏≤‡∏á options ‡πÄ‡∏î‡∏¥‡∏° ‡πÅ‡∏ï‡πà‡πÄ‡∏Å‡πá‡∏ö default option
        const defaultOption = select.querySelector('option[value=""]');
        const defaultText = defaultOption ? defaultOption.textContent : '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å';
        select.innerHTML = '';
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° default option ‡∏Å‡∏•‡∏±‡∏ö
        const newDefaultOption = document.createElement('option');
        newDefaultOption.value = '';
        newDefaultOption.textContent = defaultText;
        newDefaultOption.disabled = true;
        newDefaultOption.selected = true;
        select.appendChild(newDefaultOption);
        
        if (selectId.includes('Hour')) {
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á options 00-23 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (24-hour format)
            for (let i = 0; i <= 23; i++) {
                const option = document.createElement('option');
                const hourValue = String(i).padStart(2, '0');
                option.value = hourValue;
                option.textContent = hourValue;
                select.appendChild(option);
            }
            console.log(`‚úÖ Created ${selectId} with 24 hours (00-23)`);
        } else if (selectId.includes('Minute')) {
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á options 00-59 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏≤‡∏ó‡∏µ
            for (let i = 0; i <= 59; i++) {
                const option = document.createElement('option');
                const minuteValue = String(i).padStart(2, '0');
                option.value = minuteValue;
                option.textContent = minuteValue;
                select.appendChild(option);
            }
            console.log(`‚úÖ Created ${selectId} with 60 minutes (00-59)`);
        }
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô options ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πâ
        const totalOptions = select.querySelectorAll('option').length;
        console.log(`üîç ${selectId} now has ${totalOptions} options total`);
    });
    
    console.log('‚úÖ Confirm Complete time dropdowns populated successfully (24-hour format)');
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å dropdown hour ‡πÅ‡∏•‡∏∞ minute
 * @param {string} hourSelectId - ID ‡∏Ç‡∏≠‡∏á select element ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
 * @param {string} minuteSelectId - ID ‡∏Ç‡∏≠‡∏á select element ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏≤‡∏ó‡∏µ
 * @returns {string|null} ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö HH:MM ‡∏´‡∏£‡∏∑‡∏≠ null ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
 */
function getConfirmTimeValue(hourSelectId, minuteSelectId) {
    const hourElement = document.getElementById(hourSelectId);
    const minuteElement = document.getElementById(minuteSelectId);
    
    if (!hourElement || !minuteElement) {
        console.error(`‚ùå Time elements not found: ${hourSelectId}, ${minuteSelectId}`);
        return null;
    }
    
    const hour = hourElement.value;
    const minute = minuteElement.value;
    
    console.log(`üîç getConfirmTimeValue(${hourSelectId}, ${minuteSelectId}): hour="${hour}", minute="${minute}"`);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
    if (!hour || !minute || hour === '' || minute === '' || hour === null || minute === null) {
        console.log(`‚ö†Ô∏è Time value not complete: hour="${hour}", minute="${minute}"`);
        return null;
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const hourNum = parseInt(hour);
    const minuteNum = parseInt(minute);
    
    if (isNaN(hourNum) || isNaN(minuteNum)) {
        console.error(`‚ùå Non-numeric time values: hour="${hour}", minute="${minute}"`);
        return null;
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (00-23 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á, 00-59 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏≤‡∏ó‡∏µ)
    if (hourNum < 0 || hourNum > 23 || minuteNum < 0 || minuteNum > 59) {
        console.error(`‚ùå Invalid 24-hour time values: hour=${hourNum} (0-23), minute=${minuteNum} (0-59)`);
        return null;
    }
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô string ‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 2 ‡∏´‡∏•‡∏±‡∏Å
    const formattedHour = String(hourNum).padStart(2, '0');
    const formattedMinute = String(minuteNum).padStart(2, '0');
    const timeString = `${formattedHour}:${formattedMinute}`;
    
    console.log(`‚úÖ Valid 24-hour time returned: ${timeString}`);
    return timeString;
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô)
 * @param {string} startDate - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö DD/MM/YYYY
 * @param {string} startTime - ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö HH:MM (24-hour format)
 * @param {string} endDate - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö DD/MM/YYYY
 * @param {string} endTime - ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö HH:MM (24-hour format)
 * @returns {boolean} true ‡∏ñ‡πâ‡∏≤‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
 */
function isValidTimeRange(startDate, startTime, endDate, endTime) {
    try {
        console.log(`üîç isValidTimeRange() called with:`, {
            startDate, startTime, endDate, endTime
        });
        
        if (!startDate || !startTime || !endDate || !endTime) {
            console.log(`‚ùå Missing date/time values`);
            return false;
        }
        
        // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        const [startDay, startMonth, startYear] = startDate.split('/');
        const [startHour, startMinute] = startTime.split(':');
        
        console.log(`üîç Parsing start date/time:`, {
            startDay, startMonth, startYear, startHour, startMinute
        });
        
        const startDateTime = new Date(
            parseInt(startYear), 
            parseInt(startMonth) - 1, 
            parseInt(startDay), 
            parseInt(startHour), 
            parseInt(startMinute)
        );
        
        // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
        const [endDay, endMonth, endYear] = endDate.split('/');
        const [endHour, endMinute] = endTime.split(':');
        
        console.log(`üîç Parsing end date/time:`, {
            endDay, endMonth, endYear, endHour, endMinute
        });
        
        const endDateTime = new Date(
            parseInt(endYear), 
            parseInt(endMonth) - 1, 
            parseInt(endDay), 
            parseInt(endHour), 
            parseInt(endMinute)
        );
        
        console.log(`üîç Parsed DateTime objects:`, {
            startDateTime: startDateTime.toLocaleString('th-TH'),
            endDateTime: endDateTime.toLocaleString('th-TH')
        });
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á Date objects
        if (isNaN(startDateTime.getTime()) || isNaN(endDateTime.getTime())) {
            console.log(`‚ùå Invalid Date objects created`);
            return false;
        }
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        const startHourNum = parseInt(startHour);
        const startMinuteNum = parseInt(startMinute);
        const endHourNum = parseInt(endHour);
        const endMinuteNum = parseInt(endMinute);
        
        if (startHourNum < 0 || startHourNum > 23 || startMinuteNum < 0 || startMinuteNum > 59 ||
            endHourNum < 0 || endHourNum > 23 || endMinuteNum < 0 || endMinuteNum > 59) {
            console.log(`‚ùå Invalid 24-hour time format`);
            return false;
        }
        
        // ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        const isValid = endDateTime > startDateTime;
        
        console.log(`üîç Time range validation result: ${isValid}`);
        if (!isValid) {
            console.log(`‚ùå End time (${endDateTime.toLocaleString('th-TH')}) must be after start time (${startDateTime.toLocaleString('th-TH')})`);
        } else {
            const diffMinutes = Math.floor((endDateTime - startDateTime) / (1000 * 60));
            console.log(`‚úÖ Valid time range - Duration: ${diffMinutes} minutes`);
        }
        
        return isValid;
        
    } catch (error) {
        console.error('‚ùå Error in isValidTimeRange:', error);
        return false;
    }
}

/**
 * ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö SQL DateTime
 * @param {string} dateStr - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö DD/MM/YYYY
 * @param {string} timeStr - ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö HH:MM
 * @returns {string} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY-MM-DD HH:MM:SS
 */
function formatDateTimeSQL(dateStr, timeStr) {
    try {
        if (!dateStr || !timeStr) {
            throw new Error('Date or time string is missing');
        }
        
        const [day, month, year] = dateStr.split('/');
        const [hour, minute] = timeStr.split(':');
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á Date object
        const dateTime = new Date(
            parseInt(year), 
            parseInt(month) - 1, 
            parseInt(day), 
            parseInt(hour), 
            parseInt(minute), 
            0 // seconds
        );
        
        if (isNaN(dateTime.getTime())) {
            throw new Error('Invalid date/time values');
        }
        
        // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö SQL: YYYY-MM-DD HH:MM:SS
        const sqlYear = dateTime.getFullYear();
        const sqlMonth = String(dateTime.getMonth() + 1).padStart(2, '0');
        const sqlDay = String(dateTime.getDate()).padStart(2, '0');
        const sqlHour = String(dateTime.getHours()).padStart(2, '0');
        const sqlMinute = String(dateTime.getMinutes()).padStart(2, '0');
        const sqlSecond = String(dateTime.getSeconds()).padStart(2, '0');
        
        return `${sqlYear}-${sqlMonth}-${sqlDay} ${sqlHour}:${sqlMinute}:${sqlSecond}`;
        
    } catch (error) {
        console.error('Error in formatDateTimeSQL:', error);
        throw new Error('Invalid date/time format');
    }
}

/**
 * ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å YYYY-MM-DD ‡πÄ‡∏õ‡πá‡∏ô DD/MM/YYYY
 * @param {string} dateStr - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY-MM-DD (‡∏à‡∏≤‡∏Å input type="date")
 * @returns {string} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö DD/MM/YYYY
 */
function convertDateFormat(dateStr) {
    if (!dateStr) return '';
    
    // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY-MM-DD ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô DD/MM/YYYY
    if (dateStr.includes('-')) {
        const [year, month, day] = dateStr.split('-');
        return `${day}/${month}/${year}`;
    }
    
    // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö DD/MM/YYYY ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
    return dateStr;
}

/**
 * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô dropdown
 * @param {string} hourSelectId - ID ‡∏Ç‡∏≠‡∏á select element ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
 * @param {string} minuteSelectId - ID ‡∏Ç‡∏≠‡∏á select element ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏≤‡∏ó‡∏µ
 * @param {string} timeString - ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö HH:MM
 */
function setConfirmTimeValue(hourSelectId, minuteSelectId, timeString) {
    if (!timeString) return;
    
    const [hours, minutes] = timeString.split(':');
    
    const hourElement = document.getElementById(hourSelectId);
    const minuteElement = document.getElementById(minuteSelectId);
    
    if (hourElement && hours) {
        hourElement.value = hours.padStart(2, '0');
    }
    if (minuteElement && minutes) {
        minuteElement.value = minutes.padStart(2, '0');
    }
}

/**
 * ‡∏Ñ‡∏•‡∏≤‡∏™‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡πâ‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏à‡∏ö‡∏á‡∏≤‡∏ô
 * ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OEE ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á backend
 */
class ConfirmCompleteManager {
    constructor() {
        this.taskData = null;      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        this.taskId = null;        // ID ‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
        this.isLoading = false;    // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        this.partialSessions = []; // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• partial sessions
        this.partialSummary = null; // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≤‡∏Å partial sessions
    }

    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
     * - ‡∏î‡∏∂‡∏á task ID ‡∏à‡∏≤‡∏Å URL parameter
     * - ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô
     * - ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ event listeners
     * - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
     */
    async init() {
        try {
                        // ‡∏î‡∏∂‡∏á task ID ‡∏à‡∏≤‡∏Å URL parameter (?id=123)
            const urlParams = new URLSearchParams(window.location.search);
            this.taskId = urlParams.get('id');
            
            console.log('URL parameters:', window.location.search);
            console.log('Extracted taskId:', this.taskId, 'Type:', typeof this.taskId);
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ ID ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (!this.taskId) {
                this.showError('‡πÑ‡∏°‡πà‡∏û‡∏ö ID ‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö URL ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å');
                return;
            }

            console.log('Loading task data for ID:', this.taskId);
            
            // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ listeners ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
            await this.loadTaskData();
            this.setupEventListeners();
            this.initializeCalculations();
            
        } catch (error) {
            console.error('Init error:', error);
            this.showError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ' + error.message);
        }
    }

    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å backend
     * - ‡∏™‡πà‡∏á request ‡πÑ‡∏õ‡∏¢‡∏±‡∏á tasks.php?action=get_plan_detail
     * - ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• partial sessions
     * - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö response ‡πÅ‡∏•‡∏∞ error handling
     * - ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ß‡πâ‡πÉ‡∏ô this.taskData
     * - ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
     */
    async loadTaskData() {
        try {
            // ‡πÅ‡∏™‡∏î‡∏á loading spinner
            this.showLoading(true);
            
            // ‡∏™‡πà‡∏á request ‡πÑ‡∏õ‡∏¢‡∏±‡∏á backend ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô
            const response = await fetch(`tasks.php?action=get_plan_detail&id=${this.taskId}`);
            
            // ‡πÅ‡∏õ‡∏•‡∏á response ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            const result = await parseResponse(response);
            if (!result.success) {
                throw new Error(result.error || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
            }

            // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô console ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug
            this.taskData = result.data;
            console.log('Plan data loaded:', this.taskData);
            
            // üîß Debug ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞
            console.log('üîß Machine Debug Info:', {
                MachineName: this.taskData.MachineName,
                MachineNames: this.taskData.MachineNames,  
                MachineIDs: this.taskData.MachineIDs,
                MachineID: this.taskData.MachineID
            });
            
            // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• partial sessions
            await this.loadPartialSessions();
            
            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ debug ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
            console.log('üîç Debug - Plan Data Fields:', {
                PlanID: this.taskData.PlanID,
                TargetOutput: this.taskData.TargetOutput,
                PlannedMinutes: this.taskData.PlannedMinutes,
                SetupMinutes: this.taskData.SetupMinutes,
                SetupNote: this.taskData.SetupNote,
                BreakMorningMinutes: this.taskData.BreakMorningMinutes,
                BreakLunchMinutes: this.taskData.BreakLunchMinutes,
                BreakEveningMinutes: this.taskData.BreakEveningMinutes,
                PlannedStartTime: this.taskData.PlannedStartTime,
                PlannedEndTime: this.taskData.PlannedEndTime,
                StandardRunRate: this.taskData.StandardRunRate
            });
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô (‡∏õ‡∏¥‡∏î‡πÑ‡∏ß‡πâ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
            // if (this.taskData.Status !== 'completed') {
            //     throw new Error('‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡πÄ‡∏™‡∏£‡πá‡∏à ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÑ‡∏î‡πâ');
            // }

            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
            this.populateTaskData();
            
            // ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å partial sessions
            if (typeof integratePartialSessionsData === 'function') {
                const partialResult = await integratePartialSessionsData(this.taskId);
                if (partialResult.hasPartialData) {
                    console.log('‚úÖ Partial sessions data integrated successfully');
                    this.partialData = partialResult.data;
                } else {
                    console.log('‚ÑπÔ∏è No partial sessions data available');
                }
            } else {
                console.log('‚ÑπÔ∏è Partial sessions helper not loaded, trying direct API call...');
                // ‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
                try {
                    await this.loadPartialSessionsDirect();
                } catch (error) {
                    console.log('‚ÑπÔ∏è Direct API call failed:', error.message);
                }
            }
            
            this.showForm();
            
        } catch (error) {
            console.error('Load task data error:', error);
            this.showError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: ' + error.message);
        } finally {
            // ‡∏ã‡πà‡∏≠‡∏ô loading spinner ‡πÄ‡∏™‡∏°‡∏≠
            this.showLoading(false);
        }
    }

    /**
     * ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• partial sessions ‡∏à‡∏≤‡∏Å API
     */
    async loadPartialSessions() {
        try {
            console.log('üì° Loading partial sessions for plan:', this.taskId);
            
            const response = await fetch(`api/production-sessions.php?action=get_sessions&plan_id=${this.taskId}`);
            const result = await response.json();
            
            if (result.success && result.data && result.data.sessions) {
                this.partialSessions = result.data.sessions;
                console.log('‚úÖ Partial sessions loaded:', this.partialSessions);
                
                // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ partial sessions
                this.displayPartialSummary();
                
                // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Runtime ‡∏à‡∏≤‡∏Å partial sessions ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                this.updateRuntimeFromPartialSessions();
            } else {
                this.partialSessions = [];
                console.log('‚ÑπÔ∏è No partial sessions found');
                this.hidePartialHistory();
            }
            
        } catch (error) {
            console.error('‚ùå Error loading partial sessions:', error);
            this.partialSessions = [];
            this.hidePartialHistory();
        }
    }
    

    
    /**
     * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏à‡∏≤‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ
     */
    setBreakTimeFromMinutes(breakType, totalMinutes) {
        const checkboxes = document.querySelectorAll(`input[name="${breakType}"]`);
        let remainingMinutes = totalMinutes;
        
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö checkbox ‡∏à‡∏≤‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏õ‡∏°‡∏≤‡∏Å
        const sortedCheckboxes = Array.from(checkboxes).sort((a, b) => 
            parseInt(a.value) - parseInt(b.value)
        );
        
        sortedCheckboxes.forEach(checkbox => {
            const minutes = parseInt(checkbox.value);
            if (remainingMinutes >= minutes) {
                checkbox.checked = true;
                remainingMinutes -= minutes;
            }
        });
        
        console.log(`‚úÖ Set ${breakType} checkboxes for ${totalMinutes} minutes`);
    }
    
    /**
     * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å partial sessions
     */
    setDateTimeFromPartialSessions(startDateTime, endDateTime) {
        try {
            const startDate = new Date(startDateTime);
            const endDate = new Date(endDateTime);
            
            // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            const startDateEl = document.getElementById('actualStartDate');
            const startHourEl = document.getElementById('actualStartHour');
            const startMinuteEl = document.getElementById('actualStartMinute');
            
            if (startDateEl) {
                startDateEl.value = startDate.toISOString().split('T')[0]; // YYYY-MM-DD
            }
            if (startHourEl) {
                startHourEl.value = String(startDate.getHours()).padStart(2, '0');
            }
            if (startMinuteEl) {
                startMinuteEl.value = String(startDate.getMinutes()).padStart(2, '0');
            }
            
            // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
            const endDateEl = document.getElementById('actualEndDate');
            const endHourEl = document.getElementById('actualEndHour');
            const endMinuteEl = document.getElementById('actualEndMinute');
            
            if (endDateEl) {
                endDateEl.value = endDate.toISOString().split('T')[0]; // YYYY-MM-DD
            }
            if (endHourEl) {
                endHourEl.value = String(endDate.getHours()).padStart(2, '0');
            }
            if (endMinuteEl) {
                endMinuteEl.value = String(endDate.getMinutes()).padStart(2, '0');
            }
            
            console.log('‚úÖ Set date/time from partial sessions:', {
                start: startDateTime,
                end: endDateTime
            });
            
        } catch (error) {
            console.error('‚ùå Error setting date/time from partial sessions:', error);
        }
    }
    
    /**
     * ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö partial sessions
     */
    showPartialSessionsNotice(data) {
        const noticeHtml = `
            <div class="alert alert-info mt-3" id="partialSessionsNotice">
                <div class="d-flex align-items-center">
                    <i class="bi bi-info-circle me-2"></i>
                    <div>
                        <strong>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Partial Sessions:</strong>
                        <div class="small mt-1">
                            ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏¥‡∏ï: ${data.TotalPieces || 0} ‡∏ä‡∏¥‡πâ‡∏ô | 
                            ‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢: ${data.RejectPieces || 0} ‡∏ä‡∏¥‡πâ‡∏ô | 
                            ‡∏á‡∏≤‡∏ô Rework: ${data.ReworkPieces || 0} ‡∏ä‡∏¥‡πâ‡∏ô |
                            ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á: ${Math.round((data.ActiveWorkMinutes || 0) / 60 * 100) / 100} ‡∏ä‡∏°.
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        const formContainer = document.getElementById('confirmForm');
        if (formContainer) {
            // ‡∏•‡∏ö notice ‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            const oldNotice = document.getElementById('partialSessionsNotice');
            if (oldNotice) oldNotice.remove();
            
            // ‡πÄ‡∏û‡∏¥‡πà‡∏° notice ‡πÉ‡∏´‡∏°‡πà
            formContainer.insertAdjacentHTML('afterbegin', noticeHtml);
        }
    }
    
    /**
     * ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• partial sessions ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏à‡∏≤‡∏Å API (‡∏™‡∏≥‡∏£‡∏≠‡∏á)
     */
    async loadPartialSessionsDirect() {
        try {
            console.log('üì° Loading partial sessions directly for plan:', this.taskId);
            
            const response = await fetch(`/api/production-sessions.php?action=get_session_summary&plan_id=${this.taskId}`);
            const result = await response.json();
            
            if (result.success && result.data && result.data.hasSessions) {
                console.log('‚úÖ Direct API call successful:', result.data);
                this.partialData = result.data;
                
                // ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
                this.populateBasicPartialData(result.data.forConfirmForm);
                
                return true;
            } else {
                console.log('‚ÑπÔ∏è No partial sessions found via direct API');
                return false;
            }
            
        } catch (error) {
            console.error('‚ùå Direct API call error:', error);
            throw error;
        }
    }
    
    /**
     * ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏à‡∏≤‡∏Å partial sessions ‡∏•‡∏á‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
     */
    populateBasicPartialData(data) {
        if (!data) return;
        
        console.log('üîÑ Populating basic partial data:', data);
        
        // ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï
        const basicFields = {
            'totalPieces': data.TotalPieces,
            'rejectPieces': data.RejectPieces,
            'reworkPieces': data.ReworkPieces,
            'downtimeMinutes': data.DowntimeMinutes
            // ‡∏•‡∏ö Remark ‡∏≠‡∏≠‡∏Å - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ï‡∏¥‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        };
        
        Object.entries(basicFields).forEach(([fieldId, value]) => {
            const element = document.getElementById(fieldId);
            if (element && value !== undefined && value !== null) {
                element.value = value;
                console.log(`‚úÖ Set ${fieldId}:`, value);
            }
        });
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        this.showBasicPartialNotice(data);
    }
    
    /**
     * ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
     */
    showBasicPartialNotice(data) {
        const notice = document.createElement('div');
        notice.className = 'alert alert-info mt-3';
        notice.id = 'basicPartialNotice';
        notice.innerHTML = `
            <div class="d-flex align-items-center">
                <i class="bi bi-info-circle me-2"></i>
                <div>
                    <strong>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Partial Sessions (‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á):</strong>
                    <div class="small mt-1">
                        ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏¥‡∏ï: ${data.TotalPieces || 0} | 
                        ‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢: ${data.RejectPieces || 0} | 
                        Rework: ${data.ReworkPieces || 0} |
                        ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: ${Math.round((data.ActiveWorkMinutes || 0) / 60 * 100) / 100} ‡∏ä‡∏°.
                    </div>
                </div>
            </div>
        `;
        
        const form = document.getElementById('confirmForm');
        if (form) {
            // ‡∏•‡∏ö notice ‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            const oldNotice = document.getElementById('basicPartialNotice');
            if (oldNotice) oldNotice.remove();
            
            form.insertBefore(notice, form.firstChild);
        }
    }

    /**
     * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≤‡∏Å partial sessions
     */
    calculatePartialSummary() {
        if (!this.partialSessions || this.partialSessions.length === 0) {
            this.partialSummary = {
                totalSessions: 0,
                totalRuntime: 0,
                totalProduced: 0,
                totalRejects: 0,
                totalRework: 0,
                totalBreakTime: 0,
                totalDowntime: 0,
                averageRunRate: 0
            };
            return;
        }

        const summary = this.partialSessions.reduce((acc, session) => {
            acc.totalRuntime += session.WorkingMinutes || 0;
            acc.totalProduced += session.SessionGoodQuantity || 0;
            acc.totalRejects += session.SessionRejectQuantity || 0;
            acc.totalRework += session.SessionReworkQuantity || 0;
            acc.totalBreakTime += session.TotalBreakMinutes || 0;
            acc.totalDowntime += session.DowntimeMinutes || 0;
            return acc;
        }, {
            totalSessions: this.partialSessions.length,
            totalRuntime: 0,
            totalProduced: 0,
            totalRejects: 0,
            totalRework: 0,
            totalBreakTime: 0,
            totalDowntime: 0
        });

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì average run rate
        summary.averageRunRate = summary.totalRuntime > 0 ? 
            (summary.totalProduced / summary.totalRuntime) : 0;

        this.partialSummary = summary;
        console.log('üìä Partial summary calculated:', this.partialSummary);
    }

    /**
     * ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≤‡∏á‡πÜ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô index.js)
     * @returns {string} - ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
     */
    getResolvedMachineName() {
        if (!this.taskData) return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£';
        
        // ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ï‡∏≤‡∏° index.js ‡πÅ‡∏•‡∏∞ API ‡πÉ‡∏´‡∏°‡πà
        // 1. MachineNames ‡∏à‡∏≤‡∏Å ProductionPlanMachines (‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á)
        if (this.taskData.MachineNames) {
            console.log('‚úÖ Using MachineNames from JOIN:', this.taskData.MachineNames);
            return this.taskData.MachineNames;
        }
        
        // 2. PrimaryMachineName (‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å)
        if (this.taskData.PrimaryMachineName) {
            console.log('‚úÖ Using PrimaryMachineName:', this.taskData.PrimaryMachineName);
            return this.taskData.PrimaryMachineName;
        }
        
        // 3. MachineName ‡∏à‡∏≤‡∏Å field ‡πÄ‡∏î‡∏¥‡∏°
        if (this.taskData.MachineName) {
            console.log('‚úÖ Using MachineName field:', this.taskData.MachineName);
            return this.taskData.MachineName;
        }
        
        // 4. Fallback options
        if (this.taskData.MachineIDs) {
            console.log('‚ö†Ô∏è Using MachineIDs fallback:', this.taskData.MachineIDs);
            return `Machine IDs: ${this.taskData.MachineIDs}`;
        }
        
        if (this.taskData.MachineID) {
            console.log('‚ö†Ô∏è Using MachineID fallback:', this.taskData.MachineID);
            return `Machine ID: ${this.taskData.MachineID}`;
        }
        
        console.log('‚ùå No machine data found at all');
        return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£';
    }

    /**
     * ‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à
     */
    showForm() {
        console.log('üé¨ Showing form and setting up event listeners...');
        
        const form = document.getElementById('emergencyStopForm');
        if (form) {
            form.style.display = 'block';
            console.log('‚úÖ Form displayed');
        } else {
            console.error('‚ùå Form element not found');
        }
        
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ event listeners
        this.setupEventListeners();
    }

    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
     * - ‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å this.taskData ‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ
     * - ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô
     * - ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏≤‡∏Å TargetOutput
     * - ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ StandardRunRate (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
     */
    populateTaskData() {
        if (!this.taskData) return;

        console.log('üîß populateTaskData called with:', this.taskData);

        // üéØ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£ - ‡πÉ‡∏ä‡πâ helper function
        const machineName = this.getResolvedMachineName();
        console.log('‚úÖ Resolved machine name:', machineName);

        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡πÉ‡∏ô header
        const taskInfoDisplay = document.getElementById('taskInfoDisplay');
        if (taskInfoDisplay) {
            // üéØ ‡πÉ‡∏ä‡πâ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô index.js
            let machineDisplay = '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
            
            if (this.taskData.MachineNames) {
                // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ MachineNames ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô index.js)
                machineDisplay = this.taskData.MachineNames;
                console.log('‚úÖ Using MachineNames from taskData:', machineDisplay);
            } else if (this.taskData.MachineName) {
                // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ MachineName ‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß
                machineDisplay = this.taskData.MachineName;
                console.log('‚úÖ Using MachineName from taskData:', machineDisplay);
            } else {
                console.log('‚ö†Ô∏è No machine data found, using fallback');
            }
            
            const taskInfo = `‡∏á‡∏≤‡∏ô: ${this.taskData.ProductDisplayName || this.taskData.ProductName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} | ` +
                           `‡πÅ‡∏ú‡∏ô‡∏Å: ${this.taskData.DepartmentName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} | ` +
                           `‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£: ${machineDisplay}`;
            taskInfoDisplay.textContent = taskInfo;
            console.log('‚úÖ Task info updated:', taskInfo);
            console.log('‚úÖ taskInfoDisplay element found and updated');
        } else {
            console.error('‚ùå taskInfoDisplay element not found in DOM');
        }

        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏≤‡∏Å TargetOutput ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì remaining
        if (this.taskData.TargetOutput) {
            const targetOutputEl = document.getElementById('targetOutput');
            if (targetOutputEl) {
                targetOutputEl.value = this.taskData.TargetOutput;
            }
            
            // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ partial confirmation
            this.initializePartialConfirmation();
        }

        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏¥‡∏ï‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å partial sessions (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏≠‡∏á
        const totalPiecesEl = document.getElementById('totalPieces');
        if (totalPiecesEl) {
            if (this.partialSummary && this.partialSummary.totalProduced > 0) {
                // ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å partial sessions - ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏•‡∏¥‡∏ï‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß
                totalPiecesEl.value = this.partialSummary.totalProduced;
                totalPiecesEl.setAttribute('data-from-partial', 'true');
                console.log('üìä Set total pieces from partial sessions:', this.partialSummary.totalProduced);
            } else if (this.taskData.TargetOutput) {
                // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• partial - ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏≠‡∏á
                totalPiecesEl.placeholder = `‡πÄ‡∏ä‡πà‡∏ô ${Math.min(100, this.taskData.TargetOutput)}`;
            }
        }

        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≤‡∏Å partial sessions
        this.displayPartialSummary();

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Summary ‡∏à‡∏≤‡∏Å Partial Sessions ‡∏Å‡πà‡∏≠‡∏ô
        this.calculateAndDisplaySummaryCards();
        
        // ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡πà‡∏≠‡∏¢‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• remaining
        console.log('üîÑ Calling updatePartialDisplay from populateTaskData...');
        this.updatePartialDisplay();
        if (this.taskData.StandardRunRate) {
            const idealRunRateEl = document.getElementById('idealRunRate');
            if (idealRunRateEl) {
                idealRunRateEl.value = this.taskData.StandardRunRate;
            }
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô null
        this.taskData.SetupMinutes = this.taskData.SetupMinutes ?? 30;
        this.taskData.SetupNote = this.taskData.SetupNote ?? '';
        this.taskData.BreakMorningMinutes = this.taskData.BreakMorningMinutes ?? 0;
        this.taskData.BreakLunchMinutes = this.taskData.BreakLunchMinutes ?? 60;
        this.taskData.BreakEveningMinutes = this.taskData.BreakEveningMinutes ?? 0;
        
        console.log('‚úÖ Default values applied:', {
            SetupMinutes: this.taskData.SetupMinutes,
            BreakMorningMinutes: this.taskData.BreakMorningMinutes,
            BreakLunchMinutes: this.taskData.BreakLunchMinutes,
            BreakEveningMinutes: this.taskData.BreakEveningMinutes
        });

        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ downtime ‡πÅ‡∏•‡∏∞ downtime reason ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        if (this.taskData.DowntimeMinutes) {
            const downtimeEl = document.getElementById('downtime');
            if (downtimeEl) {
                downtimeEl.value = this.taskData.DowntimeMinutes;
            }
        }
        if (this.taskData.DowntimeReason) {
            const downtimeDetailEl = document.getElementById('downtimeDetail');
            if (downtimeDetailEl) {
                downtimeDetailEl.value = this.taskData.DowntimeReason;
            }
        }

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡∏•‡∏¥‡∏ï‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô‡πÉ‡∏´‡∏°‡πà
        // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏ô setupEventListeners()
        this.updatePlannedProductionTime();
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• remaining quantity
        console.log('üîÑ Calling updatePartialDisplay from populateTaskData...');
        this.updatePartialDisplay();
    }

    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ï‡∏¥‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
     * - ‡πÄ‡∏ï‡∏¥‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô hybrid date picker (‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô DD/MM/YYYY)
     * - ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô dropdown ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
     * - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
     */
    fillCurrentStartDateTime() {
        console.log('üïê fillCurrentStartDateTime() called - ‡πÄ‡∏ï‡∏¥‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô');
        const now = new Date();
        
        // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        const day = String(now.getDate()).padStart(2, '0');
        const month = String(now.getMonth() + 1).padStart(2, '0');
        const year = now.getFullYear();
        const currentDateForInput = `${year}-${month}-${day}`;  // YYYY-MM-DD ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ISO format
        
        // ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô dropdown (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
        const currentHour = String(now.getHours()).padStart(2, '0');  // 00-23
        const currentMinute = String(now.getMinutes()).padStart(2, '0'); // 00-59
        
        console.log(`üïê Current date/time: ${currentDateForInput} ${currentHour}:${currentMinute}`);
        
        // ‡πÄ‡∏ï‡∏¥‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ hybrid date picker system
        setConfirmDateValue('actualStartDate', currentDateForInput);
        console.log(`‚úÖ ‡πÄ‡∏ï‡∏¥‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ${currentDateForInput} (‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô DD/MM/YYYY)`);
        
        // ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö elements ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        const startHourEl = document.getElementById('actualStartHour');
        const startMinuteEl = document.getElementById('actualStartMinute');
        
        console.log('üîç Start time elements found:', {
            startHourEl: !!startHourEl,
            startMinuteEl: !!startMinuteEl
        });
        
        // ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        if (startHourEl && startMinuteEl) {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ dropdown ‡∏°‡∏µ options ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
            const startHourOptions = startHourEl.querySelectorAll('option');
            const startMinuteOptions = startMinuteEl.querySelectorAll('option');
            
            console.log(`üîç Start time dropdowns - Hour: ${startHourOptions.length} options, Minute: ${startMinuteOptions.length} options`);
            
            if (startHourOptions.length > 1 && startMinuteOptions.length > 1) {
                startHourEl.value = currentHour;
                startMinuteEl.value = currentMinute;
                
                console.log(`‚úÖ ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ${currentHour}:${currentMinute}`);
                
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
                if (startHourEl.value !== currentHour || startMinuteEl.value !== currentMinute) {
                    console.warn(`‚ö†Ô∏è Start time not set correctly. Expected: ${currentHour}:${currentMinute}, Actual: ${startHourEl.value}:${startMinuteEl.value}`);
                }
            } else {
                console.warn(`‚ö†Ô∏è Start time dropdowns not ready yet`);
            }
        } else {
            console.error('‚ùå Start time elements not found!');
        }
        
        console.log(`üéØ Auto-fill completed (DATE & TIME):
        - Date: ${currentDateForInput} (‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô DD/MM/YYYY ‡πÉ‡∏ô hybrid date picker)
        - Time: ${currentHour}:${currentMinute} (‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô)`);
        
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß)
        setTimeout(() => {
            console.log('üîÑ Triggering calculateTimes() after filling start date/time');
            this.calculateTimes();
        }, 100);
    }

    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° "‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô")
     * - ‡πÄ‡∏ï‡∏¥‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
     * - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
     */
    updateCurrentDateTime() {
        console.log('üïê updateCurrentDateTime() called - ‡πÄ‡∏ï‡∏¥‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô');
        const now = new Date();
        
        // ‡πÄ‡∏ï‡∏¥‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY-MM-DD ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö input type="date")
        const day = String(now.getDate()).padStart(2, '0');
        const month = String(now.getMonth() + 1).padStart(2, '0');
        const year = now.getFullYear();
        const currentDateForInput = `${year}-${month}-${day}`;  // YYYY-MM-DD ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö input
        
        // ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô dropdown (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
        const currentHour = String(now.getHours()).padStart(2, '0');  // 00-23
        const currentMinute = String(now.getMinutes()).padStart(2, '0'); // 00-59
        
        // ‡πÄ‡∏ï‡∏¥‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡πÉ‡∏ä‡πâ hybrid date picker system)
        setConfirmDateValue('actualStartDate', currentDateForInput);
        console.log(`‚úÖ ‡πÄ‡∏ï‡∏¥‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ${currentDateForInput} (DD/MM/YYYY format)`);
        
        // ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        const startHourEl = document.getElementById('actualStartHour');
        const startMinuteEl = document.getElementById('actualStartMinute');
        if (startHourEl && startMinuteEl) {
            startHourEl.value = currentHour;
            startMinuteEl.value = currentMinute;
            console.log(`‚úÖ ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ${currentHour}:${currentMinute}`);
        }
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏ß‡∏•‡∏≤
        this.calculateTimes();
    }

    /**
     * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Partial Confirmation
     */
    initializePartialConfirmation() {
        console.log('üîÑ Initializing partial confirmation system...');
        
        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô partial data ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        if (!this.partialData) {
            this.partialData = {
                targetOutput: this.taskData.TargetOutput || 0,
                totalProduced: 0, // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏•‡∏¥‡∏ï‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏∞‡∏™‡∏°
                currentSession: 0, // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ
                remaining: this.taskData.TargetOutput || 0,
                sessions: [] // ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            };
        }
        
        // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• partial ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏≤‡∏Å API
        this.loadExistingPartialData();
        
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ event listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö total pieces
        const totalPiecesEl = document.getElementById('totalPieces');
        if (totalPiecesEl) {
            totalPiecesEl.addEventListener('input', () => {
                this.updatePartialCalculation();
            });
        }
        
        console.log('‚úÖ Partial confirmation system initialized');
    }

    /**
     * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì partial confirmation - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Sessions
     */
    updatePartialCalculation() {
        const totalPiecesEl = document.getElementById('totalPieces');
        const currentSession = parseInt(totalPiecesEl?.value || 0);
        
        console.log('üî¢ updatePartialCalculation called:', {
            currentSession,
            taskDataTargetOutput: this.taskData?.TargetOutput,
            partialSummaryTotalProduced: this.partialSummaryData?.totalProduced || 0
        });
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô
        if (!this.taskData?.TargetOutput) {
            console.log('‚ö†Ô∏è No target output from task data');
            return;
        }
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì remaining ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Sessions
        const targetOutput = this.taskData.TargetOutput;
        const totalProducedFromSessions = this.partialSummaryData?.totalProduced || 0;
        const totalProducedIncludingCurrent = totalProducedFromSessions + currentSession;
        const futureRemaining = Math.max(0, targetOutput - totalProducedIncludingCurrent);
        
        console.log('üî¢ Remaining calculation (CORRECTED WITH SESSIONS):', {
            target: targetOutput,
            producedFromSessions: totalProducedFromSessions,
            currentSession: currentSession,
            totalProducedIncludingCurrent: totalProducedIncludingCurrent,
            futureRemaining: futureRemaining,
            formula: `${targetOutput} - (${totalProducedFromSessions} + ${currentSession}) = ${futureRemaining}`
        });
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        this.updatePartialDisplay(futureRemaining);
        
        // ‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô OEE section
        this.toggleOEESection(futureRemaining === 0 && currentSession > 0);
    }





    /**
     * ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Partial Confirmations ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
     */
    async loadExistingPartialData() {
        if (!this.planId) return;
        
        try {
            const response = await fetch(`/api/partial-confirmations.php?action=get_plan_status&plan_id=${this.planId}`);
            const result = await response.json();
            
            if (result.success && result.data) {
                const data = result.data;
                
                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• partial
                this.partialData = {
                    planId: data.planId,
                    targetOutput: data.targetOutput,
                    totalProduced: data.totalProduced,
                    remainingQuantity: data.remainingQuantity,
                    sessionNumber: data.lastSession + 1,
                    hasPartialConfirmations: data.hasPartialConfirmations
                };
                
                console.log('üìä Loaded existing partial data:', this.partialData);
                
                // ‡πÅ‡∏™‡∏î‡∏á session info ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ partial confirmations
                if (data.hasPartialConfirmations) {
                    this.showExistingSessionInfo(data);
                }
                
                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
                this.updateRemainingQuantityDisplay(data.remainingQuantity);
                this.toggleOEESection(data.isCompleted);
                
                // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OEE
                if (data.isCompleted) {
                    this.calculateOEE();
                }
                
            }
        } catch (error) {
            console.error('Error loading partial data:', error);
        }
    }
    
    /**
     * ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• session ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
     */
    showExistingSessionInfo(data) {
        const sessionInfoContainer = document.getElementById('sessionInfoContainer');
        const sessionInfo = document.getElementById('sessionInfo');
        
        if (sessionInfoContainer && sessionInfo) {
            sessionInfoContainer.style.display = 'block';
            
            sessionInfo.innerHTML = `
                <div class="alert alert-info">
                    <strong><i class="bi bi-info-circle me-1"></i>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</strong><br>
                    ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ${data.targetOutput} ‡∏ä‡∏¥‡πâ‡∏ô<br>
                    ‡∏ú‡∏•‡∏¥‡∏ï‡πÅ‡∏•‡πâ‡∏ß: ${data.totalProduced} ‡∏ä‡∏¥‡πâ‡∏ô<br>
                    ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: <span class="text-${data.remainingQuantity > 0 ? 'warning' : 'success'}">${data.remainingQuantity} ‡∏ä‡∏¥‡πâ‡∏ô</span><br>
                    Session ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ: #${data.lastSession + 1}
                </div>
                ${data.remainingQuantity > 0 ?
                    '<div class="alert alert-warning small"><i class="bi bi-arrow-clockwise me-1"></i>‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏ï‡πà‡∏≠</div>' :
                    '<div class="alert alert-success small"><i class="bi bi-check-circle me-1"></i>‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß</div>'
                }
            `;
        }
    }

    /**
     * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á
     */
    calculateWorkingMinutes() {
        try {
            // ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å dropdown ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ form.querySelector
            const startDate = getConfirmDateValue('actualStartDate');
            const endDate = getConfirmDateValue('actualEndDate');
            const startTime = getConfirmTimeValue('actualStartHour', 'actualStartMinute');
            const endTime = getConfirmTimeValue('actualEndHour', 'actualEndMinute');
            
            if (!startDate || !endDate || !startTime || !endTime) {
                return 0;
            }
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á datetime string
            const startDateFormatted = convertDateFormat(startDate);
            const endDateFormatted = convertDateFormat(endDate);
            const actualStartTimeStr = formatDateTimeSQL(startDateFormatted, startTime);
            const actualEndTimeStr = formatDateTimeSQL(endDateFormatted, endTime);
            
            const actualStartTime = new Date(actualStartTimeStr);
            const actualEndTime = new Date(actualEndTimeStr);
            const totalMinutes = (actualEndTime - actualStartTime) / (1000 * 60);
            
            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì break time ‡∏à‡∏≤‡∏Å checkbox
            let breakMorning = 0, breakLunch = 0, breakEvening = 0;
            document.querySelectorAll('input[name="breakTime[]"]:checked').forEach(checkbox => {
                if (checkbox.value === 'morning') breakMorning = 15;
                if (checkbox.value === 'lunch') breakLunch = 60;
                if (checkbox.value === 'evening') breakEvening = 15;
            });
            
            const downtimeMinutes = parseInt(document.getElementById('downtime')?.value || '0');
            
            const workingMinutes = totalMinutes - breakMorning - breakLunch - breakEvening - downtimeMinutes;
            
            return Math.max(0, Math.round(workingMinutes));
        } catch (error) {
            console.error('Error in calculateWorkingMinutes:', error);
            return 0;
        }
    }

    /**
     * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• remaining quantity - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Sessions
     */
    updatePartialDisplay(futureRemaining = null) {
        const remainingDisplay = document.getElementById('remainingDisplay');
        const remainingQuantity = document.getElementById('remainingQuantity');
        const remainingTargetDisplay = document.getElementById('remainingTargetDisplay');
        const remainingProducedDisplay = document.getElementById('remainingProducedDisplay');
        
        console.log('üìä updatePartialDisplay called with:', {
            futureRemaining,
            hasTaskData: !!this.taskData,
            hasPartialSummaryData: !!this.partialSummaryData,
            partialSessionsCount: this.partialSessions?.length || 0
        });
        
        // 1. ‡∏î‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏≤‡∏Å taskData (‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô)
        const targetOutput = this.taskData?.TargetOutput || 0;
        
        // 2. ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏•‡∏¥‡∏ï‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≤‡∏Å partialSummaryData (‡∏à‡∏≤‡∏Å Sessions)
        const totalProducedFromSessions = this.partialSummaryData?.totalProduced || 0;
        
        // 3. ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ (Current Session)
        const totalPiecesEl = document.getElementById('totalPieces');
        const currentSession = parseInt(totalPiecesEl?.value || '0');
        
        console.log('üìä Data sources for remaining calculation:', {
            targetOutput: `${targetOutput} (‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô)`,
            totalProducedFromSessions: `${totalProducedFromSessions} (‡∏à‡∏≤‡∏Å ${this.partialSessions?.length || 0} sessions)`,
            currentSession: `${currentSession} (‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏° Current Session)`,
            calculation: `${targetOutput} - ${totalProducedFromSessions} - ${currentSession}`
        });
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
        const currentRemaining = futureRemaining !== null ? 
            futureRemaining : Math.max(0, targetOutput - totalProducedFromSessions - currentSession);
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
        if (remainingDisplay && targetOutput > 0) {
            remainingDisplay.style.display = 'block';
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
            if (remainingQuantity) {
                remainingQuantity.textContent = currentRemaining.toLocaleString();
                
                // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                if (currentRemaining === 0) {
                    remainingQuantity.className = 'badge bg-success fs-5 fw-bold'; // ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
                } else if (currentRemaining <= 10) {
                    remainingQuantity.className = 'badge bg-warning text-dark fs-5 fw-bold'; // ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à
                } else {
                    remainingQuantity.className = 'badge bg-primary fs-5 fw-bold'; // ‡∏¢‡∏±‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏¢‡∏≠‡∏∞
                }
            }
            
            // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏£‡∏ß‡∏° (‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô)
            if (remainingTargetDisplay) {
                remainingTargetDisplay.textContent = targetOutput.toLocaleString();
            }
            
            // ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏•‡∏¥‡∏ï‡πÅ‡∏•‡πâ‡∏ß (‡∏à‡∏≤‡∏Å Sessions + Current)
            if (remainingProducedDisplay) {
                const totalIncludingCurrent = totalProducedFromSessions + currentSession;
                remainingProducedDisplay.textContent = totalIncludingCurrent.toLocaleString();
                
                // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
                const progressPercentage = targetOutput > 0 ? (totalIncludingCurrent / targetOutput) * 100 : 0;
                if (progressPercentage >= 100) {
                    remainingProducedDisplay.className = remainingProducedDisplay.className.replace(/text-\w+/g, '') + ' text-success fw-bold';
                } else if (progressPercentage >= 80) {
                    remainingProducedDisplay.className = remainingProducedDisplay.className.replace(/text-\w+/g, '') + ' text-warning fw-bold';
                } else {
                    remainingProducedDisplay.className = remainingProducedDisplay.className.replace(/text-\w+/g, '') + ' text-primary fw-bold';
                }
            }
            
            console.log('‚úÖ Remaining display updated successfully:', {
                targetOutput: targetOutput.toLocaleString(),
                producedFromSessions: totalProducedFromSessions.toLocaleString(),
                currentSession: currentSession.toLocaleString(),
                totalProduced: (totalProducedFromSessions + currentSession).toLocaleString(),
                remaining: currentRemaining.toLocaleString(),
                progressPercent: targetOutput > 0 ? Math.round((totalProducedFromSessions + currentSession) / targetOutput * 100) : 0
            });
            
        } else {
            // ‡∏ã‡πà‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
            if (remainingDisplay) {
                remainingDisplay.style.display = 'none';
            }
            console.log('‚ÑπÔ∏è Remaining display hidden - no target output');
        }
    }

    /**
     * ‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô OEE Section ‡∏ï‡∏≤‡∏° remaining quantity
     */
    toggleOEESection(shouldShow) {
        const oeeSection = document.getElementById('oeeSection');
        
        if (oeeSection) {
            if (shouldShow) {
                oeeSection.style.display = 'block';
                console.log('‚úÖ OEE Section shown - production complete');
                
                // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OEE
                this.calculateOEE();
            } else {
                oeeSection.style.display = 'none';
                console.log('‚ÑπÔ∏è OEE Section hidden - production not complete');
                
                // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï OEE display
                this.resetOEEDisplay();
            }
        }
    }

    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡∏•‡∏¥‡∏ï‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô (Planned Production Time)
     * - ‡πÉ‡∏ä‡πâ PlannedMinutes ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô (‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏±‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡πÅ‡∏•‡∏∞ setup ‡πÅ‡∏•‡πâ‡∏ß)
     * - ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå plannedProductionTime
     */
    updatePlannedProductionTime() {
        if (!this.taskData) {
            const plannedProductionTimeEl = document.getElementById('plannedProductionTime');
            if (plannedProductionTimeEl) {
                plannedProductionTimeEl.value = '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô';
            }
            return;
        }

        // ‡πÉ‡∏ä‡πâ PlannedMinutes ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô (‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏±‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡πÅ‡∏•‡∏∞ setup ‡πÅ‡∏•‡πâ‡∏ß)
        let plannedProductionTime = 0;
        
        if (this.taskData.PlannedMinutes && this.taskData.PlannedMinutes > 0) {
            // ‡πÉ‡∏ä‡πâ PlannedMinutes ‡∏ó‡∏µ‡πà‡∏´‡∏±‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡πÅ‡∏•‡∏∞ setup ‡πÅ‡∏•‡πâ‡∏ß
            plannedProductionTime = this.taskData.PlannedMinutes;
        } else if (this.taskData.PlannedStartTime && this.taskData.PlannedEndTime) {
            // fallback: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ PlannedMinutes
            const plannedStartTime = new Date(this.taskData.PlannedStartTime);
            const plannedEndTime = new Date(this.taskData.PlannedEndTime);
            
            if (!isNaN(plannedStartTime) && !isNaN(plannedEndTime) && plannedEndTime > plannedStartTime) {
                const diffMs = plannedEndTime - plannedStartTime;
                plannedProductionTime = Math.floor(diffMs / (1000 * 60));
            }
        }
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        const plannedProductionTimeEl = document.getElementById('plannedProductionTime');
        if (plannedProductionTimeEl) {
            if (plannedProductionTime > 0) {
                plannedProductionTimeEl.value = `${plannedProductionTime} ‡∏ô‡∏≤‡∏ó‡∏µ (‡∏´‡∏±‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å/setup ‡πÅ‡∏•‡πâ‡∏ß)`;
            } else {
                plannedProductionTimeEl.value = '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô';
            }
        }
        
        console.log('Planned Production Time from PlannedMinutes:', {
            plannedMinutes: this.taskData.PlannedMinutes,
            plannedStartTime: this.taskData.PlannedStartTime,
            plannedEndTime: this.taskData.PlannedEndTime,
            finalPlannedProductionTime: plannedProductionTime,
            note: '‡πÉ‡∏ä‡πâ PlannedMinutes ‡∏ó‡∏µ‡πà‡∏´‡∏±‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡πÅ‡∏•‡∏∞ setup ‡πÅ‡∏•‡πâ‡∏ß'
        });
    }

    /**
     * ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≤‡∏Å partial sessions - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡∏°‡πà
     */
    displayPartialSummary() {
        if (!this.partialSessions || this.partialSessions.length === 0) {
            console.log('‚ÑπÔ∏è No partial sessions to display');
            this.hidePartialHistory();
            // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï summary data
            this.partialSummaryData = {
                totalProduced: 0,
                totalRuntime: 0,
                totalRejects: 0,
                totalRework: 0
            };
            return;
        }

        console.log('üìä Displaying partial sessions:', this.partialSessions);

        // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô Partial History
        const partialHistorySection = document.getElementById('partialHistorySection');
        if (partialHistorySection) {
            partialHistorySection.style.display = 'block';
            console.log('‚úÖ Partial history section is now visible');
        }

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Summary Badge
        const partialSummaryBadge = document.getElementById('partialSummaryBadge');
        if (partialSummaryBadge) {
            partialSummaryBadge.textContent = `${this.partialSessions.length} sessions`;
        }

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á Summary Cards (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç!)
        this.calculateAndDisplaySummaryCards();

        // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Sessions
        this.displayPartialSessionsCards();
        this.displayPartialSessionsTable();
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Runtime
        this.updateRuntimeFromPartialSessions();
        this.displayActualTimeFromPartialSessions();
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï remaining display ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì summary ‡πÄ‡∏™‡∏£‡πá‡∏à
        setTimeout(() => {
            console.log('üîÑ Delayed updatePartialDisplay after summary calculation');
            this.updatePartialDisplay();
        }, 100);
    }

    /**
     * ‡∏ã‡πà‡∏≠‡∏ô Partial History Section
     */
    hidePartialHistory() {
        const partialHistorySection = document.getElementById('partialHistorySection');
        if (partialHistorySection) {
            partialHistorySection.style.display = 'none';
        }
    }

    /**
     * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á Summary Cards ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• partial sessions - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡∏°‡πà
     */
    calculateAndDisplaySummaryCards() {
        if (!this.partialSessions || this.partialSessions.length === 0) {
            console.log('‚ÑπÔ∏è No partial sessions to calculate summary');
            // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï partialSummaryData
            this.partialSummaryData = {
                totalProduced: 0,
                totalRuntime: 0,
                totalRejects: 0,
                totalRework: 0
            };
            return;
        }

        let totalProduced = 0;
        let totalRuntime = 0;
        let totalRejects = 0;
        let totalRework = 0;

        console.log('üìä Calculating summary from', this.partialSessions.length, 'sessions:');
        
        this.partialSessions.forEach((session, index) => {
            // ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏° API
            const sessionQuantity = parseInt(session.SessionQuantity) || 0;
            const sessionRejects = parseInt(session.SessionRejectQuantity) || 0;
            const sessionRework = parseInt(session.SessionReworkQuantity) || 0;
            
            totalProduced += sessionQuantity;
            totalRejects += sessionRejects;
            totalRework += sessionRework;
            
            console.log(`  Session ${index + 1}: ${sessionQuantity} ‡∏ú‡∏•‡∏¥‡∏ï, ${sessionRejects} ‡πÄ‡∏™‡∏µ‡∏¢, ${sessionRework} Rework`);
            
            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì runtime ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• WorkingMinutes ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
            if (session.WorkingMinutes) {
                totalRuntime += parseInt(session.WorkingMinutes);
            } else if (session.ActualStartDateTime && session.ActualEndDateTime) {
                const start = new Date(session.ActualStartDateTime);
                const end = new Date(session.ActualEndDateTime);
                const runtimeMinutes = Math.floor((end - start) / (1000 * 60));
                totalRuntime += runtimeMinutes;
            }
        });

        console.log('üìä Summary calculated:', { totalProduced, totalRuntime, totalRejects, totalRework });

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Summary Cards ‡πÉ‡∏ô UI
        const summaryProduced = document.getElementById('summaryProduced');
        const summaryRuntime = document.getElementById('summaryRuntime');
        const summaryRejects = document.getElementById('summaryRejects');
        const summaryRework = document.getElementById('summaryRework');

        if (summaryProduced) summaryProduced.textContent = totalProduced.toLocaleString();
        if (summaryRuntime) summaryRuntime.textContent = totalRuntime.toLocaleString();
        if (summaryRejects) summaryRejects.textContent = totalRejects.toLocaleString();
        if (summaryRework) summaryRework.textContent = totalRework.toLocaleString();

        // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô
        this.partialSummaryData = {
            totalProduced,
            totalRuntime,
            totalRejects,
            totalRework
        };
        
        console.log('‚úÖ PartialSummaryData stored for remaining calculation:', this.partialSummaryData);
    }

    /**
     * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Runtime ‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á (actualStartDate/Time ‡∏ñ‡∏∂‡∏á actualEndDate/Time)
     * ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å partial sessions ‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å
     */
    updateRuntimeFromPartialSessions() {
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å actualStartDate/Time ‡∏ñ‡∏∂‡∏á actualEndDate/Time
        const actualRuntime = this.calculateActualWorkingTime();
        
        if (actualRuntime > 0) {
            // Auto-fill ‡∏•‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á operatingTime
            const operatingTimeEl = document.getElementById('operatingTime');
            if (operatingTimeEl) {
                operatingTimeEl.value = `${actualRuntime} ‡∏ô‡∏≤‡∏ó‡∏µ`;
                console.log('‚úÖ Auto-filled operatingTime with actual working time:', actualRuntime, 'minutes');
            }
        }

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å partial sessions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å
        if (!this.partialSessions || this.partialSessions.length === 0) {
            console.log('‚ö†Ô∏è No partial sessions found');
            return;
        }

        let totalNetRuntime = 0; // ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏£‡∏ß‡∏° (‡∏´‡∏±‡∏Å break, downtime ‡πÅ‡∏•‡πâ‡∏ß)
        let sessionCount = 0;

        console.log('üîÑ Calculating NET runtime from', this.partialSessions.length, 'partial sessions...');

        this.partialSessions.forEach((session, index) => {
            let sessionNetRuntime = 0;
            
            // ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: WorkingMinutes (‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏∏‡∏ó‡∏ò‡∏¥) -> NetOperatingTime -> ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å DateTime
            if (session.WorkingMinutes && parseInt(session.WorkingMinutes) > 0) {
                sessionNetRuntime = parseInt(session.WorkingMinutes);
                console.log(`üìä Session ${index + 1}: Using WorkingMinutes (NET) = ${sessionNetRuntime} minutes`);
            } else if (session.NetOperatingTime && parseInt(session.NetOperatingTime) > 0) {
                sessionNetRuntime = parseInt(session.NetOperatingTime);
                console.log(`üìä Session ${index + 1}: Using NetOperatingTime (NET) = ${sessionNetRuntime} minutes`);
            } else if (session.ActualStartDateTime && session.ActualEndDateTime) {
                // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤ ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏±‡∏Å‡πÄ‡∏ö‡∏£‡∏Å‡πÅ‡∏•‡∏∞ downtime (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
                const start = new Date(session.ActualStartDateTime);
                const end = new Date(session.ActualEndDateTime);
                if (!isNaN(start.getTime()) && !isNaN(end.getTime())) {
                    let grossTime = Math.floor((end - start) / (1000 * 60));
                    
                    // ‡∏´‡∏±‡∏Å‡πÄ‡∏ö‡∏£‡∏Å‡πÅ‡∏•‡∏∞ downtime ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    const breakTime = (session.BreakMorningMinutes || 0) + 
                                     (session.BreakLunchMinutes || 0) + 
                                     (session.BreakEveningMinutes || 0);
                    const downtime = session.DowntimeMinutes || 0;
                    
                    sessionNetRuntime = Math.max(0, grossTime - breakTime - downtime);
                    console.log(`üìä Session ${index + 1}: Calculated NET from DateTime = ${sessionNetRuntime} minutes (${grossTime} - ${breakTime + downtime})`);
                }
            }
            
            if (sessionNetRuntime > 0) {
                totalNetRuntime += sessionNetRuntime;
                sessionCount++;
            } else {
                console.warn(`‚ö†Ô∏è Session ${index + 1}: No valid NET runtime data found`);
            }
        });

        console.log(`üìä Total NET runtime from sessions: ${totalNetRuntime} minutes from ${sessionCount}/${this.partialSessions.length} sessions`);

        // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å confirm
        this.partialRuntimeMinutes = totalNetRuntime;
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ô‡∏≤‡∏ó‡∏µ‡∏à‡∏≤‡∏Å partial sessions
        this.displayPartialRuntimeSummary(totalNetRuntime, sessionCount);
        
        return actualRuntime; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á
    }

    /**
     * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å actualStartDate/Time ‡∏ñ‡∏∂‡∏á actualEndDate/Time - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡∏°‡πà
     */
    calculateActualWorkingTime() {
        try {
            // ‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å hybrid date picker
            const startDate = getConfirmDateValue('actualStartDate'); // ISO format
            const endDate = getConfirmDateValue('actualEndDate');
            
            // ‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å dropdown
            const startTime = getConfirmTimeValue('actualStartHour', 'actualStartMinute');
            const endTime = getConfirmTimeValue('actualEndHour', 'actualEndMinute');
            
            if (!startDate || !endDate || !startTime || !endTime) {
                console.log('‚ö†Ô∏è Actual start/end date/time not complete');
                return 0;
            }

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á DateTime objects
            const startDateTime = new Date(`${startDate}T${startTime}:00`);
            const endDateTime = new Date(`${endDate}T${endTime}:00`);

            if (isNaN(startDateTime.getTime()) || isNaN(endDateTime.getTime())) {
                console.error('‚ùå Invalid date/time values');
                return 0;
            }

            if (endDateTime <= startDateTime) {
                console.error('‚ùå End time must be after start time');
                return 0;
            }

            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡∏ß‡∏° (‡∏ô‡∏≤‡∏ó‡∏µ)
            const grossMinutes = Math.floor((endDateTime - startDateTime) / (1000 * 60));
            
            // ‡∏´‡∏±‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å
            let breakMinutes = 0;
            document.querySelectorAll('input[name="breakTime[]"]:checked').forEach(checkbox => {
                const breakTimes = { 'morning': 15, 'lunch': 60, 'evening': 15 };
                breakMinutes += breakTimes[checkbox.value] || 0;
            });
            
            // ‡∏´‡∏±‡∏Å downtime
            const downtimeMinutes = parseInt(document.getElementById('downtime')?.value || '0');
            
            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏∏‡∏ó‡∏ò‡∏¥
            const netWorkingTime = Math.max(0, grossMinutes - breakMinutes - downtimeMinutes);
            
            console.log(`üìä calculateActualWorkingTime result:`, {
                startDateTime: startDateTime.toLocaleString('th-TH'),
                endDateTime: endDateTime.toLocaleString('th-TH'),
                grossMinutes: grossMinutes,
                breakMinutes: breakMinutes,
                downtimeMinutes: downtimeMinutes,
                netWorkingTime: netWorkingTime,
                formula: `${grossMinutes} - ${breakMinutes} - ${downtimeMinutes} = ${netWorkingTime}`
            });

            return netWorkingTime;
            
        } catch (error) {
            console.error('Error calculating actual working time:', error);
            return 0;
        }
    }

    /**
     * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Runtime ‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á
     */
    updateRuntimeFromActualTime() {
        const actualRuntime = this.calculateActualWorkingTime();
        
        if (actualRuntime > 0) {
            const operatingTimeEl = document.getElementById('operatingTime');
            if (operatingTimeEl) {
                operatingTimeEl.value = `${actualRuntime} ‡∏ô‡∏≤‡∏ó‡∏µ`;
                console.log('‚úÖ Updated operatingTime with actual working time:', actualRuntime, 'minutes');
                
                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡πà‡∏≠‡∏á Total Runtime ‡∏î‡πâ‡∏ß‡∏¢
                this.updateTotalRuntimeForOEEDisplay();
            }
        }
    }

    /**
     * ‡∏£‡∏ß‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å partial sessions ‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏ô confirm - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡∏°‡πà
     */
    calculateTotalRuntimeForOEE() {
        let partialRuntime = this.partialRuntimeMinutes || 0;
        let confirmRuntime = 0;
        
        // ‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å operatingTime field
        const operatingTimeEl = document.getElementById('operatingTime');
        if (operatingTimeEl && operatingTimeEl.value) {
            // ‡πÅ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å string (‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ "‡∏ô‡∏≤‡∏ó‡∏µ" ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢)
            const matches = operatingTimeEl.value.match(/(\d+)/);
            if (matches) {
                confirmRuntime = parseInt(matches[1]);
            }
        } else {
            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô operatingTime ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏£‡∏¥‡∏á
            confirmRuntime = this.calculateActualWorkingTime();
            console.log('üìä Calculated runtime from actual time:', confirmRuntime);
        }
        
        const totalRuntime = partialRuntime + confirmRuntime;
        
        console.log('üìä calculateTotalRuntimeForOEE result:', {
            partialRuntime: partialRuntime,
            confirmRuntime: confirmRuntime,
            totalRuntime: totalRuntime,
            note: '‡∏£‡∏ß‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å partial sessions + confirm input (updated for downtime)'
        });
        
        return {
            partialRuntime,
            confirmRuntime,
            totalRuntime
        };
    }

    /**
     * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô Total Runtime for OEE Card - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡∏°‡πà
     */
    updateTotalRuntimeForOEEDisplay() {
        const totalRuntimeCard = document.getElementById('totalRuntimeForOEECard');
        if (!totalRuntimeCard) {
            console.log('‚ö†Ô∏è totalRuntimeForOEECard not found - skipping update');
            return;
        }

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ calculateTotalRuntimeForOEE()
        const runtimeData = this.calculateTotalRuntimeForOEE();
        const partialRuntime = runtimeData.partialRuntime;
        const operatingTimeMinutes = runtimeData.confirmRuntime;
        const totalRuntime = runtimeData.totalRuntime;

        console.log('üîÑ updateTotalRuntimeForOEEDisplay called with data:', {
            partialRuntime,
            operatingTimeMinutes,
            totalRuntime,
            source: 'calculateTotalRuntimeForOEE()'
        });

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î
        const operatingTimeValue = document.getElementById('operatingTimeValue');
        const totalRuntimeValue = document.getElementById('totalRuntimeValue');

        if (operatingTimeValue) {
            operatingTimeValue.textContent = `${operatingTimeMinutes.toLocaleString()} ‡∏ô‡∏≤‡∏ó‡∏µ`;
            console.log('‚úÖ operatingTimeValue updated:', operatingTimeMinutes);
        }

        if (totalRuntimeValue) {
            totalRuntimeValue.textContent = `${totalRuntime.toLocaleString()} ‡∏ô‡∏≤‡∏ó‡∏µ`;
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏î‡πâ‡∏ß‡∏¢
            const hoursSpan = totalRuntimeValue.parentElement.parentElement.querySelector('.text-muted');
            if (hoursSpan) {
                hoursSpan.textContent = `(${Math.round(totalRuntime / 60 * 100) / 100} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)`;
            }
            console.log('‚úÖ totalRuntimeValue updated:', totalRuntime);
        }

        console.log('‚úÖ Total Runtime for OEE display updated successfully:', {
            operatingTime: operatingTimeMinutes,
            partialRuntime: partialRuntime,
            totalRuntime: totalRuntime,
            hours: Math.round(totalRuntime / 60 * 100) / 100
        });
    }

    /**
     * ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å partial sessions ‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å
     */
    displayPartialRuntimeSummary(totalNetRuntime, sessionCount) {
        // ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏ó‡∏£‡∏Å‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å operatingTime card)
        const operatingTimeCard = document.getElementById('operatingTime')?.closest('.card');
        
        if (!operatingTimeCard) {
            console.error('‚ùå Cannot find operatingTime card to insert partial runtime summary');
            return;
        }

        // ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        const existingSummary = document.getElementById('partialRuntimeSummaryCard');
        if (existingSummary) {
            existingSummary.remove();
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏´‡∏°‡πà
        const runtimeSummaryHtml = `
            <div class="col-md-6" id="partialRuntimeSummaryCard">
                <div class="card border-info border-2">
                    <div class="card-body text-center">
                        <label class="form-label fw-bold text-info">
                            <i class="bi bi-clock me-1"></i>‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å‡∏≤‡∏£ Partial Sessions
                            <span class="tooltip-help" 
                                data-tooltip="<span class='tooltip-formula'>‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å ${sessionCount} Sessions</span>">
                                <i class="bi bi-info-circle text-info"></i>
                            </span>
                        </label>
                        <p class="small text-muted mb-2">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ‡∏à‡∏≤‡∏Å Sessions</p>
                        <div class=" bg-opacity-15 p-3 rounded">
                            <h4 class="mb-1 fw-bold" id="partialNetRuntimeDisplay">
                                ${totalNetRuntime.toLocaleString()} ‡∏ô‡∏≤‡∏ó‡∏µ
                            </h4>
                            <small class="text-muted d-block">
                                (${Math.round(totalNetRuntime / 60 * 100) / 100} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
                            </small>
                            <div class="mt-2">
                                <span class="badge bg-info">
                                    <i class="bi bi-check-circle me-1"></i>
                                    ${sessionCount} Sessions
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;

        // ‡πÅ‡∏ó‡∏£‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å operatingTime card
        const parentRow = operatingTimeCard.closest('.row');
        if (parentRow) {
            const operatingTimeCol = operatingTimeCard.closest('.col-md-6');
            if (operatingTimeCol) {
                operatingTimeCol.insertAdjacentHTML('afterend', runtimeSummaryHtml);
                console.log('‚úÖ Partial runtime summary card inserted');
                
                // ‡πÄ‡∏û‡∏¥‡πà‡∏° event listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏ô operatingTime
                this.setupRuntimeSummaryListeners();
            }
        }

        // ‡πÄ‡∏û‡∏¥‡πà‡∏° tooltip functionality ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        setTimeout(() => {
            const tooltipEl = document.querySelector('#partialRuntimeSummaryCard [data-tooltip]');
            if (tooltipEl && !tooltipEl.querySelector('.tooltip-content')) {
                const tooltipText = tooltipEl.getAttribute('data-tooltip');
                const tooltipContent = document.createElement('div');
                tooltipContent.className = 'tooltip-content';
                tooltipContent.innerHTML = tooltipText;
                tooltipEl.appendChild(tooltipContent);
            }
        }, 100);

        console.log('‚úÖ Partial runtime summary displayed:', {
            totalNetRuntime: totalNetRuntime,
            sessionCount: sessionCount,
            hours: Math.round(totalNetRuntime / 60 * 100) / 100,
            note: '‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ sessions'
        });

        // ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡πà‡∏≠‡∏á Total Runtime (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OEE)
        this.displayTotalRuntimeForOEE(totalNetRuntime);
    }

    /**
     * ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡πà‡∏≠‡∏á Total Runtime (operatingTime + sessions) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OEE
     */
    displayTotalRuntimeForOEE(partialRuntime) {
        // ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏ó‡∏£‡∏Å (‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å partialRuntimeSummaryCard)
        const partialCard = document.getElementById('partialRuntimeSummaryCard');
        
        if (!partialCard) {
            console.error('‚ùå Cannot find partialRuntimeSummaryCard to insert total runtime');
            return;
        }

        // ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        const existingCard = document.getElementById('totalRuntimeForOEECard');
        if (existingCard) {
            existingCard.remove();
        }

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì operatingTime
        const operatingTimeEl = document.getElementById('operatingTime');
        let operatingTimeMinutes = 0;
        if (operatingTimeEl && operatingTimeEl.value) {
            const matches = operatingTimeEl.value.match(/(\d+)/);
            if (matches) {
                operatingTimeMinutes = parseInt(matches[1]);
            }
        }

        const totalRuntime = operatingTimeMinutes + partialRuntime;

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á Total Runtime
        const totalRuntimeHtml = `
            <div class="col-md-6" id="totalRuntimeForOEECard">
                <div class="card border-warning border-2">
                    <div class="card-body text-center">
                        <label class="form-label fw-bold text-warning">
                            <i class="bi bi-calculator me-1"></i>Total Runtime
                            <span class="tooltip-help" 
                                data-tooltip="<span class='tooltip-formula'>Total = Runtime + Sessions</span><br>‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OEE ‡∏´‡∏•‡∏±‡∏Å">
                                <i class="bi bi-info-circle text-warning"></i>
                            </span>
                        </label>
                        <p class="small text-muted mb-2">‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏à‡∏£‡∏¥‡∏á</p>
                        <div class="p-3 rounded">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <small class="text-muted">Runtime:</small>
                                <span class="fw-bold" id="operatingTimeValue">${operatingTimeMinutes.toLocaleString()} ‡∏ô‡∏≤‡∏ó‡∏µ</span>
                            </div>
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <small class="text-muted">Sessions:</small>
                                <span class="fw-bold">+ ${partialRuntime.toLocaleString()} ‡∏ô‡∏≤‡∏ó‡∏µ</span>
                            </div>
                            <hr class="my-2">
                            <div class="d-flex justify-content-between align-items-center">
                                <strong class="text-warning ">Total:</strong>
                                <h4 class="text-warning mb-0 fw-bold" id="totalRuntimeValue">${totalRuntime.toLocaleString()} ‡∏ô‡∏≤‡∏ó‡∏µ</h4>
                            </div>
                            <small class="text-muted d-block mt-1">
                                (${Math.round(totalRuntime / 60 * 100) / 100} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        `;

        // ‡πÅ‡∏ó‡∏£‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å partial runtime summary card
        partialCard.insertAdjacentHTML('afterend', totalRuntimeHtml);

        // ‡πÄ‡∏û‡∏¥‡πà‡∏° tooltip functionality
        setTimeout(() => {
            const tooltipEl = document.querySelector('#totalRuntimeForOEECard [data-tooltip]');
            if (tooltipEl && !tooltipEl.querySelector('.tooltip-content')) {
                const tooltipText = tooltipEl.getAttribute('data-tooltip');
                const tooltipContent = document.createElement('div');
                tooltipContent.className = 'tooltip-content';
                tooltipContent.innerHTML = tooltipText;
                tooltipEl.appendChild(tooltipContent);
            }
        }, 100);

        console.log('‚úÖ Total Runtime for OEE displayed:', {
            operatingTime: operatingTimeMinutes,
            partialRuntime: partialRuntime,
            totalRuntime: totalRuntime
        });
    }

    /**
     * ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å actualStartDate, actualEndDate ‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ö session
     */
    displayTotalActualTimeCard(partialSessionRuntime) {
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å actualStartDate ‡πÅ‡∏•‡∏∞ actualEndDate
        const actualStartDateEl = document.getElementById('actualStartDate');
        const actualEndDateEl = document.getElementById('actualEndDate');
        
        if (!actualStartDateEl || !actualEndDateEl) {
            console.log('‚ùå actualStartDate ‡∏´‡∏£‡∏∑‡∏≠ actualEndDate element ‡πÑ‡∏°‡πà‡∏û‡∏ö');
            return;
        }

        const startDate = actualStartDateEl.value;
        const endDate = actualEndDateEl.value;
        
        if (!startDate || !endDate) {
            console.log('‚ö†Ô∏è actualStartDate ‡∏´‡∏£‡∏∑‡∏≠ actualEndDate ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏£‡∏≠‡∏Å');
            return;
        }

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å actualStart ‡∏ñ‡∏∂‡∏á actualEnd
        const startDateTime = new Date(startDate);
        const endDateTime = new Date(endDate);
        const totalMinutesFromActual = Math.floor((endDateTime - startDateTime) / (1000 * 60));

        if (totalMinutesFromActual <= 0) {
            console.log('‚ö†Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô');
            return;
        }

        // ‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å partial sessions
        const grandTotalMinutes = totalMinutesFromActual + partialSessionRuntime;

        // ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏ó‡∏£‡∏Å (‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å partial runtime summary card)
        const partialCard = document.getElementById('partialRuntimeSummaryCard');
        
        if (!partialCard) {
            console.error('‚ùå Cannot find partialRuntimeSummaryCard to insert total actual time');
            return;
        }

        // ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        const existingCard = document.getElementById('totalActualTimeCard');
        if (existingCard) {
            existingCard.remove();
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏°
        const totalActualTimeHtml = `
            <div class="col-md-6" id="totalActualTimeCard">
                <div class="card border-primary border-2">
                    <div class="card-body text-center">
                        <label class="form-label fw-bold text-primary">
                            <i class="bi bi-clock-history me-1"></i>‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡∏ß‡∏°
                            <span class="tooltip-help" 
                                data-tooltip="<span class='tooltip-formula'>‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å Actual Start-End + Partial Sessions</span><br>‡∏£‡∏ß‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î<br><span class='tooltip-example'>‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö</span>">
                                <i class="bi bi-info-circle text-primary"></i>
                            </span>
                        </label>
                        <p class="small text-muted mb-2">‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å Actual Start-End + Sessions</p>
                        <div class="bg-primary bg-opacity-15 p-3 rounded">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <small class="text-muted">Actual Start-End:</small>
                                <span class="fw-bold text-primary">${totalMinutesFromActual.toLocaleString()} ‡∏ô‡∏≤‡∏ó‡∏µ</span>
                            </div>
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <small class="text-muted">Partial Sessions:</small>
                                <span class="fw-bold text-success">+ ${partialSessionRuntime.toLocaleString()} ‡∏ô‡∏≤‡∏ó‡∏µ</span>
                            </div>
                            <hr class="my-2">
                            <div class="d-flex justify-content-between align-items-center">
                                <strong class="text-primary">‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:</strong>
                                <h4 class="text-primary mb-0 fw-bold">${grandTotalMinutes.toLocaleString()} ‡∏ô‡∏≤‡∏ó‡∏µ</h4>
                            </div>
                            <small class="text-muted d-block mt-1">
                                (${Math.round(grandTotalMinutes / 60 * 100) / 100} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
                            </small>
                        </div>
                        <div class="mt-2">
                            <span class="badge bg-primary">
                                <i class="bi bi-calculator me-1"></i>
                                Total Actual Time
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        `;

        // ‡πÅ‡∏ó‡∏£‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å partial runtime summary card
        partialCard.insertAdjacentHTML('afterend', totalActualTimeHtml);

        // ‡πÄ‡∏û‡∏¥‡πà‡∏° tooltip functionality
        setTimeout(() => {
            const tooltipEl = document.querySelector('#totalActualTimeCard [data-tooltip]');
            if (tooltipEl && !tooltipEl.querySelector('.tooltip-content')) {
                const tooltipText = tooltipEl.getAttribute('data-tooltip');
                const tooltipContent = document.createElement('div');
                tooltipContent.className = 'tooltip-content';
                tooltipContent.innerHTML = tooltipText;
                tooltipEl.appendChild(tooltipContent);
            }
        }, 100);

        console.log('‚úÖ Total actual time card displayed:', {
            actualStartEnd: totalMinutesFromActual,
            partialSessions: partialSessionRuntime,
            grandTotal: grandTotalMinutes,
            hours: Math.round(grandTotalMinutes / 60 * 100) / 100
        });
    }

    /**
     * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á operatingTime
     */
    setupRuntimeSummaryListeners() {
        const operatingTimeEl = document.getElementById('operatingTime');
        if (!operatingTimeEl) return;

        // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ attach listener ‡∏ã‡πâ‡∏≥
        if (operatingTimeEl.hasAttribute('data-runtime-listener')) return;
        operatingTimeEl.setAttribute('data-runtime-listener', 'true');

        operatingTimeEl.addEventListener('input', () => {
            this.updateRuntimeTotalDisplay();
            this.updateTotalRuntimeForOEEDisplay(); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡πà‡∏≠‡∏á Total Runtime
        });

        operatingTimeEl.addEventListener('change', () => {
            this.updateRuntimeTotalDisplay();
            this.updateTotalRuntimeForOEEDisplay(); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡πà‡∏≠‡∏á Total Runtime
        });

        // ‡πÄ‡∏û‡∏¥‡πà‡∏° listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö actualStartDate ‡πÅ‡∏•‡∏∞ actualEndDate
        const actualStartDateEl = document.getElementById('actualStartDate');
        const actualEndDateEl = document.getElementById('actualEndDate');

        if (actualStartDateEl && !actualStartDateEl.hasAttribute('data-actual-listener')) {
            actualStartDateEl.setAttribute('data-actual-listener', 'true');
            actualStartDateEl.addEventListener('change', () => {
                this.updateTotalActualTimeDisplay();
            });
        }

        if (actualEndDateEl && !actualEndDateEl.hasAttribute('data-actual-listener')) {
            actualEndDateEl.setAttribute('data-actual-listener', 'true');
            actualEndDateEl.addEventListener('change', () => {
                this.updateTotalActualTimeDisplay();
            });
        }

        console.log('‚úÖ Runtime summary listeners setup completed');
    }

    /**
     * ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏°
     */
    updateRuntimeTotalDisplay() {
        const runtimeData = this.calculateTotalRuntimeForOEE();
        
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô partial runtime card
        const totalDisplay = document.getElementById('totalRuntimeDisplay');
        if (totalDisplay) {
            if (runtimeData.confirmRuntime > 0) {
                totalDisplay.innerHTML = `
                    <small class="text-success fw-bold">
                        <i class="bi bi-calculator me-1"></i>
                        ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏° = ${runtimeData.confirmRuntime} + ${runtimeData.partialRuntime} = <span class="badge bg-success">${runtimeData.totalRuntime} ‡∏ô‡∏≤‡∏ó‡∏µ</span>
                    </small>
                `;
            } else {
                totalDisplay.innerHTML = `
                    <small class="text-success fw-bold">
                        <i class="bi bi-calculator me-1"></i>
                        ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏° = Runtime + ${runtimeData.partialRuntime} ‡∏ô‡∏≤‡∏ó‡∏µ
                    </small>
                `;
            }
        }

        console.log('‚úÖ Runtime total display updated:', runtimeData);
    }

    /**
     * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å actualStartDate ‡πÅ‡∏•‡∏∞ actualEndDate
     */
    updateTotalActualTimeDisplay() {
        // ‡∏´‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å partial sessions
        let partialSessionRuntime = 0;
        if (this.partialSessions && this.partialSessions.length > 0) {
            this.partialSessions.forEach(session => {
                const netRuntime = session.WorkingMinutes || session.NetOperatingTime || 0;
                partialSessionRuntime += parseInt(netRuntime) || 0;
            });
        }

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å displayTotalActualTimeCard ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        this.displayTotalActualTimeCard(partialSessionRuntime);

        console.log('‚úÖ Total actual time display updated');
    }

    /**
     * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô Total Runtime for OEE Card
     */
    updateTotalRuntimeForOEEDisplay() {
        const totalRuntimeCard = document.getElementById('totalRuntimeForOEECard');
        if (!totalRuntimeCard) return;

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà
        const partialRuntime = this.partialRuntimeMinutes || 0;
        const operatingTimeEl = document.getElementById('operatingTime');
        let operatingTimeMinutes = 0;
        
        if (operatingTimeEl && operatingTimeEl.value) {
            const matches = operatingTimeEl.value.match(/(\d+)/);
            if (matches) {
                operatingTimeMinutes = parseInt(matches[1]);
            }
        }

        const totalRuntime = operatingTimeMinutes + partialRuntime;

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î
        const operatingTimeValue = document.getElementById('operatingTimeValue');
        const totalRuntimeValue = document.getElementById('totalRuntimeValue');

        if (operatingTimeValue) {
            operatingTimeValue.textContent = `${operatingTimeMinutes.toLocaleString()} ‡∏ô‡∏≤‡∏ó‡∏µ`;
        }

        if (totalRuntimeValue) {
            totalRuntimeValue.textContent = `${totalRuntime.toLocaleString()} ‡∏ô‡∏≤‡∏ó‡∏µ`;
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏î‡πâ‡∏ß‡∏¢
            const hoursSpan = totalRuntimeValue.parentElement.parentElement.querySelector('.text-muted');
            if (hoursSpan) {
                hoursSpan.textContent = `(${Math.round(totalRuntime / 60 * 100) / 100} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)`;
            }
        }

        console.log('‚úÖ Total Runtime for OEE display updated:', {
            operatingTime: operatingTimeMinutes,
            partialRuntime: partialRuntime,
            totalRuntime: totalRuntime
        });
    }

    /**
     * ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Sessions ‡πÅ‡∏ö‡∏ö Cards
     */
    displayPartialSessionsCards() {
        const sessionsList = document.getElementById('partialSessionsList');
        if (!sessionsList) return;

        sessionsList.innerHTML = '';

        // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 4 sessions ‡πÅ‡∏£‡∏Å
        const sessionsToShow = this.partialSessions.slice(0, 4);
        
        sessionsToShow.forEach((session, index) => {
            const startTime = session.ActualStartDateTime ? 
                new Date(session.ActualStartDateTime).toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' }) : 
                '-';
            const endTime = session.ActualEndDateTime ? 
                new Date(session.ActualEndDateTime).toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' }) : 
                '-';

            let runtime = 0;
            if (session.WorkingMinutes) {
                runtime = parseInt(session.WorkingMinutes);
            } else if (session.ActualStartDateTime && session.ActualEndDateTime) {
                const start = new Date(session.ActualStartDateTime);
                const end = new Date(session.ActualEndDateTime);
                runtime = Math.floor((end - start) / (1000 * 60));
            }

            const cardHtml = `
                <div class="col-md-6 mb-2">
                    <div class="card border-0 shadow-sm h-100 session-card">
                        <div class="card-body p-2">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h6 class="card-title mb-0 text-info">
                                    <i class="bi bi-clock me-1"></i>Session ${index + 1}
                                </h6>
                                <span class="badge bg-light text-dark">${startTime} - ${endTime}</span>
                            </div>
                            <div class="row g-1 text-center">
                                <div class="col-3">
                                    <div class="text-success fw-bold">${session.SessionQuantity || 0}</div>
                                    <small class="text-muted">‡∏ú‡∏•‡∏¥‡∏ï</small>
                                </div>
                                <div class="col-3">
                                    <div class="text-danger fw-bold">${session.SessionRejectQuantity || 0}</div>
                                    <small class="text-muted">‡πÄ‡∏™‡∏µ‡∏¢</small>
                                </div>
                                <div class="col-3">
                                    <div class="text-warning fw-bold">${session.SessionReworkQuantity || 0}</div>
                                    <small class="text-muted">Rework</small>
                                </div>
                                <div class="col-3">
                                    <div class="text-primary fw-bold">${runtime}</div>
                                    <small class="text-muted">‡∏ô‡∏≤‡∏ó‡∏µ</small>
                                </div>
                            </div>
                            ${session.Remark ? `<div class="mt-2"><small class="text-muted">${session.Remark}</small></div>` : ''}
                        </div>
                    </div>
                </div>
            `;
            sessionsList.innerHTML += cardHtml;
        });

        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡∏°‡∏µ sessions ‡πÄ‡∏¢‡∏≠‡∏∞
        if (this.partialSessions.length > 4) {
            const moreCard = `
                <div class="col-12">
                    <div class="text-center text-muted">
                        <small>‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å ${this.partialSessions.length - 4} sessions (‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á)</small>
                    </div>
                </div>
            `;
            sessionsList.innerHTML += moreCard;
        }
    }

    /**
     * ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Sessions ‡πÅ‡∏ö‡∏ö Table
     */
    displayPartialSessionsTable() {
        const tableBody = document.getElementById('partialSessionsTableBody');
        if (!tableBody) return;

        tableBody.innerHTML = '';

        this.partialSessions.forEach((session, index) => {
            const startDateTime = session.ActualStartDateTime ? new Date(session.ActualStartDateTime) : null;
            const endDateTime = session.ActualEndDateTime ? new Date(session.ActualEndDateTime) : null;
            
            let timeRange = '-';
            if (startDateTime && endDateTime) {
                timeRange = `${startDateTime.toLocaleDateString('th-TH')} ${startDateTime.toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' })} - ${endDateTime.toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' })}`;
            }

            let runtime = 0;
            if (session.WorkingMinutes) {
                runtime = parseInt(session.WorkingMinutes);
            } else if (startDateTime && endDateTime) {
                runtime = Math.floor((endDateTime - startDateTime) / (1000 * 60));
            }

            const row = document.createElement('tr');
            row.innerHTML = `
                <td><span class="badge bg-info">S${index + 1}</span></td>
                <td><small>${timeRange}</small></td>
                <td><span class="badge bg-success">${session.SessionQuantity || 0}</span></td>
                <td><span class="badge bg-danger">${session.SessionRejectQuantity || 0}</span></td>
                <td><span class="badge bg-warning">${session.SessionReworkQuantity || 0}</span></td>
                <td><span class="badge bg-primary">${runtime} ‡∏ô.</span></td>
                <td><small class="text-muted">${session.Remark ? session.Remark.substring(0, 30) + (session.Remark.length > 30 ? '...' : '') : '-'}</small></td>
            `;
            tableBody.appendChild(row);
        });
    }

    /**
     * ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å partial sessions ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ confirm
     */
    displayActualTimeFromPartialSessions() {
        if (!this.partialSessions || this.partialSessions.length === 0) {
            return;
        }

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö sessions ‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤
        const sortedSessions = [...this.partialSessions].sort((a, b) => 
            new Date(a.ActualStartDateTime) - new Date(b.ActualStartDateTime)
        );

        const firstSession = sortedSessions[0];
        const lastSession = sortedSessions[sortedSessions.length - 1];

        const actualStartTime = new Date(firstSession.ActualStartDateTime);
        const actualEndTime = new Date(lastSession.ActualEndDateTime);
        const totalMinutes = Math.floor((actualEndTime - actualStartTime) / (1000 * 60));

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å sessions
        let totalNetRuntime = 0;
        this.partialSessions.forEach(session => {
            if (session.WorkingMinutes && parseInt(session.WorkingMinutes) > 0) {
                totalNetRuntime += parseInt(session.WorkingMinutes);
            } else if (session.NetOperatingTime && parseInt(session.NetOperatingTime) > 0) {
                totalNetRuntime += parseInt(session.NetOperatingTime);
            }
        });

        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô partial history
        let timeInfoEl = document.getElementById('partialTimeInfo');
        if (!timeInfoEl) {
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á element ‡πÉ‡∏´‡∏°‡πà
            const timeInfoHtml = `
                <div id="partialTimeInfo" class="alert alert-info border-0 shadow-sm mb-3">
                    <div class="d-flex align-items-center mb-2">
                        <i class="bi bi-clock-history me-2 fs-5"></i>
                        <h6 class="mb-0 fw-bold">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å Partial Sessions</h6>
                        <span class="badge bg-info ms-auto">Reference Data</span>
                    </div>
                    
                    <!-- ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï -->
                    <div class="row g-2 mb-3">
                        <div class="col-md-4">
                            <div class="text-center p-2 bg-white rounded">
                                <small class="text-muted d-block">‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å (S1)</small>
                                <strong class="text-primary" id="actualStartFromPartial">
                                    ${actualStartTime.toLocaleString('th-TH')}
                                </strong>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="text-center p-2 bg-white rounded">
                                <small class="text-muted d-block">‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ (S${this.partialSessions.length})</small>
                                <strong class="text-primary" id="actualEndFromPartial">
                                    ${actualEndTime.toLocaleString('th-TH')}
                                </strong>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="text-center p-2 bg-white rounded">
                                <small class="text-muted d-block">‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏°</small>
                                <strong class="text-warning" id="totalMinutesFromPartial">
                                    ${totalMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ
                                </strong>
                            </div>
                        </div>
                    </div>

                    <!-- ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏∏‡∏ó‡∏ò‡∏¥ -->
                    <div class="bg-success bg-opacity-10 p-2 rounded mb-3">
                        <div class="text-center">
                            <small class="text-muted d-block">‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏£‡∏ß‡∏° (‡∏´‡∏±‡∏Å‡πÄ‡∏ö‡∏£‡∏Å + downtime ‡πÅ‡∏•‡πâ‡∏ß)</small>
                            <h5 class="text-success mb-0 fw-bold" id="totalNetRuntimeFromPartial">
                                ${totalNetRuntime} ‡∏ô‡∏≤‡∏ó‡∏µ (${Math.round(totalNetRuntime / 60 * 100) / 100} ‡∏ä‡∏°.)
                            </h5>
                        </div>
                    </div>
                    
                    <!-- ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞ session -->
                    <div class="bg-light p-2 rounded">
                        <small class="text-muted d-block mb-2">
                            <strong>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞ Session:</strong>
                        </small>
                        <div class="row g-1" id="sessionTimeDetails">
                            ${this.generateSessionTimeDetails()}
                        </div>
                    </div>
                    
                    <div class="mt-3 p-2 bg-warning bg-opacity-10 rounded">
                        <small class="text-dark">
                            <i class="bi bi-info-circle me-1"></i>
                            <strong>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</strong> ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å partial sessions 
                            ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
                        </small>
                    </div>
                    
                    <div class="mt-2 text-center">
                        <span class="badge bg-info">
                            <i class="bi bi-list-ol me-1"></i>
                            ‡∏£‡∏ß‡∏° ${this.partialSessions.length} sessions
                        </span>
                        <span class="badge bg-success ms-2">
                            <i class="bi bi-clock me-1"></i>
                            ${totalNetRuntime} ‡∏ô‡∏≤‡∏ó‡∏µ‡∏™‡∏∏‡∏ó‡∏ò‡∏¥
                        </span>
                    </div>
                </div>
            `;
            
            const partialHistorySection = document.getElementById('partialHistorySection');
            if (partialHistorySection) {
                partialHistorySection.insertAdjacentHTML('afterbegin', timeInfoHtml);
            }
        } else {
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï element ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            document.getElementById('actualStartFromPartial').textContent = actualStartTime.toLocaleString('th-TH');
            document.getElementById('actualEndFromPartial').textContent = actualEndTime.toLocaleString('th-TH');
            document.getElementById('totalMinutesFromPartial').textContent = `${totalMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ`;
            document.getElementById('totalNetRuntimeFromPartial').textContent = `${totalNetRuntime} ‡∏ô‡∏≤‡∏ó‡∏µ (${Math.round(totalNetRuntime / 60 * 100) / 100} ‡∏ä‡∏°.)`;
            
            const sessionTimeDetails = document.getElementById('sessionTimeDetails');
            if (sessionTimeDetails) {
                sessionTimeDetails.innerHTML = this.generateSessionTimeDetails();
            }
        }

        console.log('‚úÖ Partial sessions time reference displayed:', {
            firstSession: firstSession.SessionNumber,
            lastSession: lastSession.SessionNumber,
            grossTime: totalMinutes,
            netTime: totalNetRuntime,
            totalSessions: this.partialSessions.length
        });
    }

    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞ session
     */
    generateSessionTimeDetails() {
        return this.partialSessions.map((session, index) => {
            const startTime = session.ActualStartDateTime ? 
                new Date(session.ActualStartDateTime).toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' }) : 
                '-';
            const endTime = session.ActualEndDateTime ? 
                new Date(session.ActualEndDateTime).toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' }) : 
                '-';
            
            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏∏‡∏ó‡∏ò‡∏¥
            let netWorkingTime = 0;
            if (session.WorkingMinutes && parseInt(session.WorkingMinutes) > 0) {
                netWorkingTime = parseInt(session.WorkingMinutes);
            } else if (session.NetOperatingTime && parseInt(session.NetOperatingTime) > 0) {
                netWorkingTime = parseInt(session.NetOperatingTime);
            } else if (session.ActualStartDateTime && session.ActualEndDateTime) {
                const start = new Date(session.ActualStartDateTime);
                const end = new Date(session.ActualEndDateTime);
                if (!isNaN(start.getTime()) && !isNaN(end.getTime())) {
                    let grossTime = Math.floor((end - start) / (1000 * 60));
                    const breakTime = (session.BreakMorningMinutes || 0) + 
                                     (session.BreakLunchMinutes || 0) + 
                                     (session.BreakEveningMinutes || 0);
                    const downtime = session.DowntimeMinutes || 0;
                    netWorkingTime = Math.max(0, grossTime - breakTime - downtime);
                }
            }
            
            return `
                <div class="col-6 col-md-3">
                    <div class="text-center p-2 bg-white rounded border">
                        <div class="fw-bold text-primary">S${index + 1}</div>
                        <div class="small text-muted">${startTime}-${endTime}</div>
                        <div class="small">
                            <span class="badge bg-success">${netWorkingTime}‡∏ô.</span>
                        </div>
                        <div class="small">
                            <span class="text-success">${session.SessionQuantity || 0}</span> /
                            <span class="text-danger">${session.SessionRejectQuantity || 0}</span> /
                            <span class="text-warning">${session.SessionReworkQuantity || 0}</span>
                        </div>
                    </div>
                </div>
            `;
        }).join('');
    }



    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Event Listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏•‡∏∞ input ‡∏ï‡πà‡∏≤‡∏á‡πÜ
     * - Form submission
     * - ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤
     * - ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å
     * - ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡πÇ‡∏≠‡∏ó‡∏µ
     * - ‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ï‡πà‡∏≤‡∏á‡πÜ
     */
    setupEventListeners() {
        try {
            console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Event Listeners...');
            
            // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ hybrid date picker ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ confirm
            setupConfirmHiddenDatePickers();
            console.log('‚úÖ Hybrid date pickers setup completed');
            
            // ‡πÄ‡∏ï‡∏¥‡∏° dropdown ‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô
            populateConfirmTimeDropdowns();
            console.log('‚úÖ Time dropdowns populated');
            
            // ‡∏£‡∏≠‡πÉ‡∏´‡πâ dropdown ‡∏û‡∏£‡πâ‡∏≠‡∏° ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô)
            setTimeout(() => {
                console.log('üïê Attempting to fill current start date time...');
                this.fillCurrentStartDateTime();
            }, 300);  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡πÄ‡∏õ‡πá‡∏ô 300ms ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ dropdown ‡∏û‡∏£‡πâ‡∏≠‡∏°
            
            // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
            const form = document.getElementById('emergencyStopForm');
            if (form) {
                // ‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ã‡πà‡∏≠‡∏ô‡πÑ‡∏ß‡πâ
                form.style.display = 'block';
                
                // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ attach event listener ‡∏ã‡πâ‡∏≥
                if (!form._submitHandlerAttached) {
                    form.addEventListener('submit', (e) => this.handleFormSubmit(e));
                    form._submitHandlerAttached = true;
                    console.log('‚úÖ Form event listener attached (first time)');
                } else {
                    console.log('‚ö†Ô∏è Form event listener already attached, skipping');
                }
                
                console.log('‚úÖ Form displayed');
            } else {
                console.warn('‚ùå Form element not found');
            }

            // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (dropdown)
            const timeDropdowns = [
                'actualStartHour', 'actualStartMinute', 'actualEndHour', 'actualEndMinute'
            ];
            
            timeDropdowns.forEach(id => {
                const element = document.getElementById(id);
                if (element) {
                    element.addEventListener('change', () => {
                        console.log(`‚è∞ Time dropdown changed: ${id} = ${element.value}`);
                        this.calculateTimes();
                        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Runtime ‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏£‡∏¥‡∏á
                        this.updateRuntimeFromActualTime();
                        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Total Runtime for OEE Card
                        this.updateTotalRuntimeForOEEDisplay();
                    });
                    console.log(`‚úÖ Event listener added for: ${id}`);
                } else {
                    console.warn(`‚ùå Time dropdown element '${id}' not found`);
                }
            });
            
            // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
            const dateElements = ['actualStartDate', 'actualEndDate'];
            dateElements.forEach(id => {
                const element = document.getElementById(id);
                if (element) {
                    element.addEventListener('change', () => {
                        console.log(`üìÖ Date changed: ${id} = ${element.value}`);
                        this.calculateTimes();
                        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Runtime ‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏£‡∏¥‡∏á
                        this.updateRuntimeFromActualTime();
                        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Total Runtime for OEE Card
                        this.updateTotalRuntimeForOEEDisplay();
                    });
                    console.log(`‚úÖ Event listener added for: ${id}`);
                } else {
                    console.warn(`‚ùå Element ${id} not found`);
                }
            });

        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö checkbox ‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å
        document.querySelectorAll('input[name="breakTime[]"]').forEach(checkbox => {
            checkbox.addEventListener('change', () => {
                this.calculateBreakTime();
                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Total Runtime for OEE Card ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å
                this.updateTotalRuntimeForOEEDisplay();
            });
        });

        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö checkbox ‡πÇ‡∏≠‡∏ó‡∏µ (‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏ü‡∏¥‡∏•‡∏î‡πå overtime)
        document.getElementById('overtimeEnable')?.addEventListener('change', (e) => {
            const overtimeInput = document.getElementById('overtime');
            if (overtimeInput) {
                overtimeInput.disabled = !e.target.checked;  // ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                if (!e.target.checked) {
                    overtimeInput.value = '';  // ‡∏•‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î
                }
            }
            this.calculateTimes();  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Total Runtime for OEE Card
            this.updateTotalRuntimeForOEEDisplay();
        });

        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
        document.getElementById('overtime')?.addEventListener('input', () => {
            this.calculateTimes();
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Total Runtime for OEE Card ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô overtime
            this.updateTotalRuntimeForOEEDisplay();
        });
        
        // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö downtime - ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å!
        document.getElementById('downtime')?.addEventListener('input', () => {
            console.log('üìä Downtime changed - recalculating times and updating Total Runtime');
            this.calculateTimes();
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Total Runtime for OEE Card ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô downtime
            this.updateTotalRuntimeForOEEDisplay();
        });
        document.getElementById('idealRunRate')?.addEventListener('input', () => {
            this.calculatePerformance();
            this.calculateOEE(); // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OEE ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠ idealRunRate ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
        });
        document.getElementById('totalPieces')?.addEventListener('input', () => {
            this.updatePartialCalculation(); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï partial calculation ‡∏Å‡πà‡∏≠‡∏ô
            this.updatePartialDisplay(); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• remaining quantity
            this.calculatePerformance();
            this.calculateOEE(); // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OEE ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠ totalPieces ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
        });
        document.getElementById('rejectPieces')?.addEventListener('input', () => this.calculateQuality());
        document.getElementById('reworkPieces')?.addEventListener('input', () => this.calculateQuality());
        document.getElementById('Remark')?.addEventListener('input', () => this.updateRemarkDisplay());

        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö checkbox ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Å‡∏∞ (10 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
        document.getElementById('shiftLength8h')?.addEventListener('change', (e) => {
            const shiftMinutesEl = document.getElementById('shiftMinutes');
            if (shiftMinutesEl) {
                shiftMinutesEl.value = e.target.checked ? 600 : 0;
            }
            this.calculateTimes();
        });

        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Overtime checkbox ‡πÅ‡∏•‡∏∞ input
        const overtimeEnable = document.getElementById('overtimeEnable');
        const overtimeInput = document.getElementById('overtime');
        
        if (overtimeEnable && overtimeInput) {
            overtimeEnable.addEventListener('change', (e) => {
                overtimeInput.disabled = !e.target.checked;
                if (!e.target.checked) {
                    overtimeInput.value = '';
                }
                this.calculateTimes();
            });
        }

        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° "‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô" (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        const currentTimeBtn = document.getElementById('useCurrentTimeBtn');
        if (currentTimeBtn) {
            currentTimeBtn.addEventListener('click', (e) => {
                e.preventDefault();
                this.updateCurrentDateTime();
                console.log('üïê ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô');
            });
        }

        // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        const confirmFooter = document.getElementById('confirmFooter');
        if (confirmFooter) {
            confirmFooter.style.display = 'block';
        }
        
        console.log('‚úÖ Event listeners setup complete');
        
        } catch (error) {
            console.error('Error setting up event listeners:', error);
            this.showToast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà', 'danger');
        }
    }

    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
     * ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
     */
    initializeCalculations() {
        try {
            console.log('üîÑ initializeCalculations() called');
            this.updatePlannedProductionTime(); // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡∏•‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏à‡∏≤‡∏Å PlannedMinutes
            
            // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô partial confirmation system ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°
            if (this.taskData && this.taskData.TargetOutput && !this.partialData) {
                this.initializePartialConfirmation();
            }
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• remaining quantity
            this.updatePartialDisplay();
            
            this.calculateBreakTime();     // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å
            this.calculateTimes();         // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ
            this.calculatePerformance();   // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Performance
            this.calculateQuality();       // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Quality
            console.log('‚úÖ initializeCalculations() completed');
        } catch (error) {
            console.error('‚ùå Error in initializeCalculations:', error);
        }
    }

    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏£‡∏ß‡∏°
     * - ‡∏£‡∏ß‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏à‡∏≤‡∏Å checkbox ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ
     * - ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡∏ß‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å
     * - ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏´‡∏°‡πà
     */
    calculateBreakTime() {
        try {
            let totalBreakMinutes = 0;
            
            // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á (‡∏ô‡∏≤‡∏ó‡∏µ)
            const breakTimes = {
                'morning': 15,   // ‡∏û‡∏±‡∏Å‡πÄ‡∏ä‡πâ‡∏≤ 15 ‡∏ô‡∏≤‡∏ó‡∏µ
                'lunch': 60,     // ‡∏û‡∏±‡∏Å‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô 60 ‡∏ô‡∏≤‡∏ó‡∏µ  
                'evening': 15    // ‡∏û‡∏±‡∏Å‡πÄ‡∏¢‡πá‡∏ô 15 ‡∏ô‡∏≤‡∏ó‡∏µ
            };

            // ‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏à‡∏≤‡∏Å checkbox ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            document.querySelectorAll('input[name="breakTime[]"]:checked').forEach(checkbox => {
                totalBreakMinutes += breakTimes[checkbox.value] || 0;
            });

            // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡∏ß‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å
            const breakTotalMinutesEl = document.getElementById('breakTotalMinutes');
            if (breakTotalMinutesEl) {
                breakTotalMinutesEl.textContent = totalBreakMinutes;
            }
            
            // ‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô alert ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏£‡∏ß‡∏°
            const breakTotalDisplayEl = document.getElementById('breakTotalDisplay');
            if (breakTotalDisplayEl) {
                breakTotalDisplayEl.style.display = totalBreakMinutes > 0 ? 'block' : 'none';
            }

            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏´‡∏°‡πà
            this.calculateTimes();
        } catch (error) {
            console.error('Error in calculateBreakTime:', error);
        }
    }

    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OEE
     * - ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡∏ß‡∏° (Total Minutes)
     * - ‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å (Break Minutes) 
     * - ‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏≠‡∏ó‡∏µ (Overtime Minutes)
     * - ‡πÄ‡∏ß‡∏•‡∏≤ downtime
     * - ‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡∏•‡∏¥‡∏ï‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô (Planned Production Time)
     * - ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á (Operating Time/Run Time)
     */
    calculateTimes() {
        console.log('üîÑ calculateTimes() called');
        
        // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å dropdown ‡πÅ‡∏ó‡∏ô input type="time"
        const startDateValue = getConfirmDateValue('actualStartDate');
        const endDateValue = getConfirmDateValue('actualEndDate');
        
        console.log('üìÖ Date values:', {
            startDateValue,
            endDateValue
        });
        
        // ‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å dropdown
        const actualStartTime = getConfirmTimeValue('actualStartHour', 'actualStartMinute');
        const actualEndTime = getConfirmTimeValue('actualEndHour', 'actualEndMinute');
        
        console.log('‚è∞ Time values:', {
            actualStartTime,
            actualEndTime
        });
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ elements ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (!startDateValue || !endDateValue || !actualStartTime || !actualEndTime ||
            !startDateValue || !endDateValue) {
            console.log('‚ö†Ô∏è Missing date/time data, clearing fields');
            const operatingTimeEl = document.getElementById('operatingTime');
            // const netRunTimeEl = document.getElementById('netRunTime'); // ‡∏ã‡πà‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô HTML
            
            if (operatingTimeEl) operatingTimeEl.value = '';
            // if (netRunTimeEl) netRunTimeEl.value = ''; // ‡∏ã‡πà‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô HTML
            return;
        }

        console.log('‚úÖ All date/time data available, proceeding with calculation');

        // ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å YYYY-MM-DD ‡πÄ‡∏õ‡πá‡∏ô DD/MM/YYYY ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô isValidTimeRange()
        const startDateFormatted = convertDateFormat(startDateValue);
        const endDateFormatted = convertDateFormat(endDateValue);
        
        console.log('üìÖ Converted date formats:', {
            startDateOriginal: startDateValue,
            startDateFormatted,
            endDateOriginal: endDateValue,
            endDateFormatted
        });

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
        if (!isValidTimeRange(startDateFormatted, actualStartTime, endDateFormatted, actualEndTime)) {
            console.log('‚ùå Invalid time range detected');
            const operatingTimeEl = document.getElementById('operatingTime');
            if (operatingTimeEl) {
                operatingTimeEl.value = '‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
            }
            return;
        }

        console.log('‚úÖ Time range validation passed');

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á DateTime object ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì (‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å input type="date" ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á)
        const [startYear, startMonth, startDay] = startDateValue.split('-');  // YYYY-MM-DD
        const [startHour, startMinute] = actualStartTime.split(':');
        const startTime = new Date(parseInt(startYear), parseInt(startMonth) - 1, parseInt(startDay), parseInt(startHour), parseInt(startMinute));
        
        const [endYear, endMonth, endDay] = endDateValue.split('-');  // YYYY-MM-DD
        const [endHour, endMinute] = actualEndTime.split(':');
        const endTime = new Date(parseInt(endYear), parseInt(endMonth) - 1, parseInt(endDay), parseInt(endHour), parseInt(endMinute));

        console.log('üìÖ DateTime objects created:', {
            startTime: startTime.toLocaleString('th-TH'),
            endTime: endTime.toLocaleString('th-TH'),
            isValidStart: !isNaN(startTime.getTime()),
            isValidEnd: !isNaN(endTime.getTime())
        });

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á DateTime objects
        if (isNaN(startTime.getTime()) || isNaN(endTime.getTime())) {
            console.error('‚ùå Invalid DateTime objects created in calculateTimes()');
            const operatingTimeEl = document.getElementById('operatingTime');
            if (operatingTimeEl) {
                operatingTimeEl.value = '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
            }
            return;
        }

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡∏ß‡∏° (‡∏ô‡∏≤‡∏ó‡∏µ)
        const totalMinutes = Math.floor((endTime - startTime) / (1000 * 60));
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏£‡∏ß‡∏°
        let breakMinutes = 0;
        document.querySelectorAll('input[name="breakTime[]"]:checked').forEach(checkbox => {
            const breakTimes = { 'morning': 15, 'lunch': 60, 'evening': 15 };
            breakMinutes += breakTimes[checkbox.value] || 0;
        });

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏≠‡∏ó‡∏µ
        let overtimeMinutes = 0;
        if (document.getElementById('overtimeEnable')?.checked) {
            overtimeMinutes = parseInt(document.getElementById('overtime')?.value || '0');
        }

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤ downtime
        const downtimeMinutes = parseInt(document.getElementById('downtime')?.value || '0');

        // === ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≤‡∏°‡∏™‡∏π‡∏ï‡∏£‡πÉ‡∏´‡∏°‡πà ===
        // Actual Run Time = ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á - ‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏à‡∏£‡∏¥‡∏á - Downtime
        const actualRunTime = totalMinutes - breakMinutes - downtimeMinutes;
        
        console.log(`üìä calculateTimes() - ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤:
        - ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á: ${totalMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ
        - ‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏à‡∏£‡∏¥‡∏á: ${breakMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ  
        - ‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á: ${downtimeMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ
        - ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏∏‡∏ó‡∏ò‡∏¥: ${actualRunTime} ‡∏ô‡∏≤‡∏ó‡∏µ`);
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ (‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏∏‡∏ó‡∏ò‡∏¥)
        const operatingTimeEl = document.getElementById('operatingTime');
        // const netRunTimeEl = document.getElementById('netRunTime'); // ‡∏ã‡πà‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô HTML
        
        console.log('üîç Debug elements found:', {
            operatingTimeEl: !!operatingTimeEl,
            // netRunTimeEl: !!netRunTimeEl, // ‡∏ã‡πà‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô HTML
            actualRunTime: actualRunTime,
            operatingTimeElHTML: operatingTimeEl ? operatingTimeEl.outerHTML.substring(0, 100) : 'NOT FOUND',
            // netRunTimeElHTML: netRunTimeEl ? netRunTimeEl.outerHTML.substring(0, 100) : 'NOT FOUND' // ‡∏ã‡πà‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô HTML
        });
        
        if (operatingTimeEl) {
            const newValue = `${Math.max(0, actualRunTime)} ‡∏ô‡∏≤‡∏ó‡∏µ`;
            operatingTimeEl.value = newValue;
            console.log('‚úÖ operatingTime updated to:', newValue);
            console.log('üîç operatingTime after update:', operatingTimeEl.value);
        } else {
            console.error('‚ùå operatingTime element not found in DOM!');
            console.log('üîç All input elements with id containing "operating":', 
                Array.from(document.querySelectorAll('input[id*="operating"]')).map(el => el.id));
        }
        
        // Comment out netRunTime update since the field is hidden
        /*
        if (netRunTimeEl) {
            const newValue = `${Math.max(0, actualRunTime)} ‡∏ô‡∏≤‡∏ó‡∏µ`;
            netRunTimeEl.value = newValue;
            console.log('‚úÖ netRunTime updated to:', newValue);
            console.log('üîç netRunTime after update:', netRunTimeEl.value);
        } else {
            console.error('‚ùå netRunTime element not found in DOM!');
            console.log('üîç All input elements with id containing "run":', 
                Array.from(document.querySelectorAll('input[id*="run"]')).map(el => el.id));
        }
        */

        // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏∞‡∏ó‡∏µ‡πà‡∏°‡∏µ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•) - ‡∏Å‡∏∞ 10 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        const shiftMinutes = document.getElementById('shiftLength8h')?.checked ? 600 : 0;  // 10 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        const availableTime = shiftMinutes + overtimeMinutes;
        
        const shiftDisplay = document.getElementById('shiftAvailableTimeDisplay');
        const shiftText = document.getElementById('shiftAvailableTimeText');
        if (shiftDisplay && shiftText) {
            shiftText.textContent = `${availableTime} ‡∏ô‡∏≤‡∏ó‡∏µ`;
            shiftDisplay.style.display = 'block';
        }


        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OEE ‡πÉ‡∏´‡∏°‡πà
        this.calculateOEE();
        
        // === ‡∏î‡∏∂‡∏á Total Runtime Value (‡∏£‡∏ß‡∏° partial sessions) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö ===
        const totalRuntimeElement = document.getElementById('totalRuntimeValue');
        let totalRuntimeForComparison = actualRunTime; // fallback
        
        if (totalRuntimeElement && totalRuntimeElement.textContent) {
            // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å totalRuntimeValue (‡∏ï‡∏±‡∏î‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏ô‡∏≤‡∏ó‡∏µ" ‡πÅ‡∏•‡∏∞ comma ‡∏≠‡∏≠‡∏Å)
            const runtimeText = totalRuntimeElement.textContent.replace(/[^0-9]/g, '');
            if (runtimeText && !isNaN(parseInt(runtimeText))) {
                totalRuntimeForComparison = parseInt(runtimeText);
                console.log('üìä Using Total Runtime for comparison:', {
                    actualRunTimeOnly: actualRunTime,
                    totalRuntimeIncludingSessions: totalRuntimeForComparison,
                    source: 'totalRuntimeValue element'
                });
            }
        }
        
        // === ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ú‡∏ô vs ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏∏‡∏ó‡∏ò‡∏¥ (‡πÉ‡∏ä‡πâ Total Runtime) ===
        this.updateTimeDifferenceFromCalculateTimes(totalRuntimeForComparison);
        
        // === ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ vs ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á (‡πÉ‡∏ä‡πâ Total Runtime) ===
        this.updateShiftRuntimeComparison(totalRuntimeForComparison, shiftMinutes, overtimeMinutes);
    }

    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô vs ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏∏‡∏ó‡∏ò‡∏¥
     */
    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ú‡∏ô vs ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏∏‡∏ó‡∏ò‡∏¥ (‡∏£‡∏ß‡∏° partial sessions)
     * @param {number} totalActualRunTime - ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏£‡∏ß‡∏° (‡∏£‡∏ß‡∏° partial sessions + ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
     */
    updateTimeDifferenceFromCalculateTimes(totalActualRunTime) {
        try {
            // ‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ú‡∏ô‡∏à‡∏≤‡∏Å PlannedMinutes (‡∏´‡∏±‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡πÅ‡∏•‡∏∞ setup ‡πÅ‡∏•‡πâ‡∏ß)
            let plannedTotalMinutes = 0;
            
            if (this.taskData && this.taskData.PlannedMinutes && this.taskData.PlannedMinutes > 0) {
                // ‡πÉ‡∏ä‡πâ PlannedMinutes ‡∏ó‡∏µ‡πà‡∏´‡∏±‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡πÅ‡∏•‡∏∞ setup ‡πÅ‡∏•‡πâ‡∏ß
                plannedTotalMinutes = this.taskData.PlannedMinutes;
            } else if (this.taskData && this.taskData.PlannedStartTime && this.taskData.PlannedEndTime) {
                // fallback: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
                const plannedStartTime = new Date(this.taskData.PlannedStartTime);
                const plannedEndTime = new Date(this.taskData.PlannedEndTime);
                plannedTotalMinutes = Math.floor((plannedEndTime - plannedStartTime) / (1000 * 60));
            }
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏£‡∏ß‡∏° partial sessions)
            this.updateTimeDifferenceDisplay(totalActualRunTime, plannedTotalMinutes);
        } catch (error) {
            console.error('Error in updateTimeDifferenceFromCalculateTimes:', error);
        }
    }

    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ vs ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á (‡∏£‡∏ß‡∏° partial sessions)
     * @param {number} totalActualRunTime - ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏£‡∏ß‡∏° (‡∏£‡∏ß‡∏° partial sessions + ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
     * @param {number} shiftMinutes - ‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏∞ (‡∏ô‡∏≤‡∏ó‡∏µ)
     * @param {number} overtimeMinutes - ‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏≠‡∏ó‡∏µ (‡∏ô‡∏≤‡∏ó‡∏µ)
     */
    updateShiftRuntimeComparison(totalActualRunTime, shiftMinutes, overtimeMinutes) {
        try {
            console.log('üîÑ updateShiftRuntimeComparison() called with Total Runtime:', {
                totalActualRunTime,
                shiftMinutes,
                overtimeMinutes
            });

            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Shift + Overtime)
            const totalAvailable = shiftMinutes + overtimeMinutes;
            
            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ß‡πà‡∏≤‡∏á/‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á
            const timeDifference = totalAvailable - totalActualRunTime;
            
            console.log('üìä ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ vs ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á (‡∏£‡∏ß‡∏° partial sessions):', {
                shiftMinutes,
                overtimeMinutes,
                totalAvailable: `‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: ${totalAvailable} ‡∏ô‡∏≤‡∏ó‡∏µ`,
                totalActualRunTime: `‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏£‡∏ß‡∏°: ${totalActualRunTime} ‡∏ô‡∏≤‡∏ó‡∏µ`,
                timeDifference
            });

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
            const totalAvailableDisplay = document.getElementById('totalAvailableDisplay');
            const runtimeUsedDisplay = document.getElementById('runtimeUsedDisplay');
            const shiftTimeDifferenceStatus = document.getElementById('shiftTimeDifferenceStatus');

            // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ (Shift + Overtime ‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô)
            if (totalAvailableDisplay) {
                let displayText = `${totalAvailable} ‡∏ô‡∏≤‡∏ó‡∏µ`;
                if (overtimeMinutes > 0) {
                    displayText += ` (${shiftMinutes}+${overtimeMinutes})`;
                }
                totalAvailableDisplay.textContent = displayText;
            }
            
            // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á (‡∏£‡∏ß‡∏° partial sessions)
            if (runtimeUsedDisplay) {
                runtimeUsedDisplay.textContent = `${Math.max(0, totalActualRunTime)} ‡∏ô‡∏≤‡∏ó‡∏µ`;
            }

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
            if (shiftTimeDifferenceStatus) {
                let statusHTML = '';
                let badgeClass = '';
                let iconClass = '';
                
            if (totalActualRunTime <= 0) {
                // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á
                statusHTML = '<i class="bi bi-clock me-1"></i>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤';
                badgeClass = 'bg-secondary';
            } else if (timeDifference > 0) {
                // ‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡∏ß‡πà‡∏≤‡∏á (‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ)
                const hours = Math.floor(timeDifference / 60);
                const minutes = timeDifference % 60;
                const timeText = hours > 0 ? `${hours} ‡∏ä‡∏°. ${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ` : `${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ`;
                
                statusHTML = `<i class="bi bi-check-circle me-1"></i>‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ${timeText}`;
                badgeClass = 'bg-success';
            } else if (timeDifference === 0) {
                // ‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡πÄ‡∏ï‡πá‡∏°‡πÄ‡∏ß‡∏•‡∏≤
                statusHTML = '<i class="bi bi-clock-fill me-1"></i>‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡πÄ‡∏ï‡πá‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î';
                badgeClass = 'bg-warning';
            } else {
                // ‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
                const overTime = Math.abs(timeDifference);
                const hours = Math.floor(overTime / 60);
                const minutes = overTime % 60;
                const timeText = hours > 0 ? `${hours} ‡∏ä‡∏°. ${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ` : `${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ`;
                
                statusHTML = `<i class="bi bi-exclamation-triangle me-1"></i>‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ${timeText}`;
                badgeClass = 'bg-danger';
            }                shiftTimeDifferenceStatus.innerHTML = `
                    <span class="badge ${badgeClass} fs-6 px-3 py-2">
                        ${statusHTML}
                    </span>
                `;
            }

            console.log('‚úÖ ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ vs ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
            
        } catch (error) {
            console.error('‚ùå Error in updateShiftRuntimeComparison:', error);
        }
    }

    calculatePerformance() {
        try {
            console.log('üîÑ calculatePerformance() called');
            const idealRate = parseFloat(document.getElementById('idealRunRate')?.value || '0');

            // ‡∏£‡∏ß‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (sessions + current)
            const currentFormPieces = parseInt(document.getElementById('totalPieces')?.value || '0');
            const sessionsTotalProduced = this.partialSummaryData?.totalProduced || 0;
            const totalPieces = sessionsTotalProduced + currentFormPieces;

            // ‡πÉ‡∏ä‡πâ totalRuntimeValue (‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å session) ‡πÅ‡∏ó‡∏ô operatingTime
            const totalRuntimeElement = document.getElementById('totalRuntimeValue');
            let totalRuntimeMinutes = 0;
            if (totalRuntimeElement && totalRuntimeElement.textContent) {
                const runtimeText = totalRuntimeElement.textContent.replace(/[^0-9]/g, '');
                if (runtimeText && !isNaN(parseInt(runtimeText))) {
                    totalRuntimeMinutes = parseInt(runtimeText);
                }
            }

            console.log('üîç Performance calculation inputs:', {
                idealRate,
                totalPieces,
                totalRuntimeMinutes
            });

            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Performance
            let performance = 0;
            if (idealRate > 0 && totalRuntimeMinutes > 0) {
                const theoreticalMaxCount = totalRuntimeMinutes * idealRate;
                performance = theoreticalMaxCount > 0 ? (totalPieces / theoreticalMaxCount) * 100 : 0;
            }

            console.log('üîç Performance calculation values:', {
                performance,
                canCalculate: totalRuntimeMinutes > 0 && totalPieces > 0
            });

            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó idealCycleTime
            const actualRunRateEl = document.getElementById('actualRunRate');
            if (idealRate > 0) {
                const idealCycleTime = 1 / idealRate; // ‡∏ô‡∏≤‡∏ó‡∏µ/‡∏ä‡∏¥‡πâ‡∏ô
                if (actualRunRateEl) {
                    const newValue = `${idealCycleTime.toFixed(4)} ‡∏ô‡∏≤‡∏ó‡∏µ/‡∏ä‡∏¥‡πâ‡∏ô`;
                    actualRunRateEl.value = newValue;
                    console.log('‚úÖ idealCycleTime updated to:', newValue);
                }
            } else {
                if (actualRunRateEl) {
                    actualRunRateEl.value = '';
                }
            }

            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å calculateQuality ‡πÅ‡∏ó‡∏ô calculateOEE ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô infinite loop
            this.calculateQuality();
        } catch (error) {
            console.error('Error in calculatePerformance:', error);
        }
    }

    calculateQuality() {
        try {
            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Current Session (‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°)
            const currentTotalPieces = parseInt(document.getElementById('totalPieces')?.value || '0');
            const currentRejectPieces = parseInt(document.getElementById('rejectPieces')?.value || '0');
            const currentReworkPieces = parseInt(document.getElementById('reworkPieces')?.value || '0');
            
            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Partial Sessions (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            const sessionsTotalProduced = this.partialSummaryData?.totalProduced || 0;
            const sessionsRejects = this.partialSummaryData?.totalRejects || 0;
            const sessionsRework = this.partialSummaryData?.totalRework || 0;
            
            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Sessions + Current)
            const totalPieces = sessionsTotalProduced + currentTotalPieces;
            const totalRejectPieces = sessionsRejects + currentRejectPieces;
            const totalReworkPieces = sessionsRework + currentReworkPieces;
            const goodPieces = Math.max(0, totalPieces - totalRejectPieces);
            
            console.log('üìä Quality calculation with Sessions:', {
                sessions: {
                    totalProduced: sessionsTotalProduced,
                    rejects: sessionsRejects,
                    rework: sessionsRework
                },
                current: {
                    totalPieces: currentTotalPieces,
                    rejects: currentRejectPieces,
                    rework: currentReworkPieces
                },
                combined: {
                    totalPieces: totalPieces,
                    totalRejects: totalRejectPieces,
                    totalRework: totalReworkPieces,
                    goodPieces: goodPieces
                }
            });
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡πà‡∏≠‡∏á Good Pieces
            const goodPiecesEl = document.getElementById('goodPieces');
            if (goodPiecesEl) {
                goodPiecesEl.value = goodPieces;
            }

            console.log(`‚úÖ Quality Summary (Sessions + Current) - Total: ${totalPieces}, Good: ${goodPieces}, Reject: ${totalRejectPieces}, Rework: ${totalReworkPieces}`);

            this.calculateOEE();
        } catch (error) {
            console.error('Error in calculateQuality:', error);
        }
    }

    /**
     * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á Remark
     */
    updateRemarkDisplay() {
        const remarkText = document.getElementById('Remark')?.value || '';
        console.log('Quality Remark updated:', remarkText);
        // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° UI feedback ‡∏´‡∏£‡∏∑‡∏≠ validation ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
    }

    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤ OEE (Overall Equipment Effectiveness) - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡∏°‡πà
     * 
     * ‡∏™‡∏π‡∏ï‡∏£‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OEE ‡πÉ‡∏´‡∏°‡πà:
     * OEE = Availability √ó Performance √ó Quality (‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢ 10,000 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå)
     * 
     * ‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡πà:
     * - Availability = (Actual Run Time / Planned Production Time) √ó 100
     * - Performance = (Total Count / (Actual Run Time √ó Ideal Run Rate)) √ó 100  
     * - Quality = (Good Pieces / Total Pieces) √ó 100
     * 
     * ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:
     * - Planned Production Time = ‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô (‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å)
     * - Actual Run Time = ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á - ‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏à‡∏£‡∏¥‡∏á - Downtime
     * - Good Pieces = Total Pieces - Reject Pieces
     */
    calculateOEE() {
        try {
            // ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å partial sessions + confirm input
            const runtimeData = this.calculateTotalRuntimeForOEE();
            const actualRunTimeMinutes = runtimeData.totalRuntime;
            
            console.log('üìä OEE Calculation using total runtime:', runtimeData);
            
            // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OEE
            const idealRate = parseFloat(document.getElementById('idealRunRate')?.value || '0');
            const totalPieces = parseInt(document.getElementById('totalPieces')?.value || '0');
            const rejectPieces = parseInt(document.getElementById('rejectPieces')?.value || '0');

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
            if (idealRate <= 0 || totalPieces <= 0 || actualRunTimeMinutes <= 0) {
                console.log('‚ö†Ô∏è Missing data for OEE calculation:', {
                    idealRate, totalPieces, actualRunTimeMinutes
                });
                this.resetOEEDisplay();
                return;
            }

            // ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡∏•‡∏¥‡∏ï‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô
            let plannedProductionMinutesForOEE = 0;
            if (this.taskData && this.taskData.PlannedMinutes && this.taskData.PlannedMinutes > 0) {
                plannedProductionMinutesForOEE = this.taskData.PlannedMinutes;
            } else if (this.taskData && this.taskData.PlannedStartTime && this.taskData.PlannedEndTime) {
                const plannedStartTime = new Date(this.taskData.PlannedStartTime);
                const plannedEndTime = new Date(this.taskData.PlannedEndTime);
                plannedProductionMinutesForOEE = Math.floor((plannedEndTime - plannedStartTime) / (1000 * 60));
            } else {
                // fallback: ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ
                plannedProductionMinutesForOEE = actualRunTimeMinutes;
            }

            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á OEE
            const availability = plannedProductionMinutesForOEE > 0 ? (actualRunTimeMinutes / plannedProductionMinutesForOEE) * 100 : 0;
            
            const idealCycleTime = idealRate > 0 ? (1 / idealRate) : 0;
            const performance = actualRunTimeMinutes > 0 && idealCycleTime > 0 ? 
                ((idealCycleTime * totalPieces) / actualRunTimeMinutes) * 100 : 0;
            
            const goodPieces = totalPieces - rejectPieces;
            const quality = totalPieces > 0 ? (goodPieces / totalPieces) * 100 : 0;
            
            const oeeTotal = (availability * performance * quality) / 10000;
            
            console.log(`üìä OEE Results with Combined Runtime (${runtimeData.partialRuntime} + ${runtimeData.confirmRuntime}):
            - Planned Time: ${plannedProductionMinutesForOEE} minutes
            - Actual Run Time (Combined): ${actualRunTimeMinutes} minutes
            - Availability: ${availability.toFixed(2)}%
            - Performance: ${performance.toFixed(2)}%
            - Quality: ${quality.toFixed(2)}%
            - OEE Total: ${oeeTotal.toFixed(2)}%`);
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
            this.updateOEEDisplay(availability, performance, quality, oeeTotal);
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï runtime total display
            this.updateRuntimeTotalDisplay();
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
            const actualRunRateEl = document.getElementById('actualRunRate');
            if (actualRunRateEl && idealRate > 0) {
                const idealCycleTimeValue = 1 / idealRate;
                actualRunRateEl.value = `${idealCycleTimeValue.toFixed(4)} ‡∏ô‡∏≤‡∏ó‡∏µ/‡∏ä‡∏¥‡πâ‡∏ô`;
            }
            
        } catch (error) {
            console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OEE:', error);
            this.resetOEEDisplay();
        }
    }

    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ñ‡πà‡∏≤ OEE
     */
    updateOEEDisplay(availability, performance, quality, oee) {
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö OEE
        const availabilityEl = document.getElementById('availability');
        const performanceEl = document.getElementById('performance');
        const qualityEl = document.getElementById('quality');
        const oeeEl = document.getElementById('oee');

        if (availabilityEl) {
            availabilityEl.textContent = availability.toFixed(1) + '%';
            this.updateBadgeColor('availabilityBadge', availability);
        }

        if (performanceEl) {
            performanceEl.textContent = performance.toFixed(1) + '%';
            this.updateBadgeColor('performanceBadge', performance);
        }

        if (qualityEl) {
            qualityEl.textContent = quality.toFixed(1) + '%';
            this.updateBadgeColor('qualityBadge', quality);
        }

        if (oeeEl) {
            oeeEl.textContent = oee.toFixed(1) + '%';
            this.updateBadgeColor('oeeBadge', oee);
        }
    }

    updateOEEDisplay(availability, performance, quality, oeeTotal) {
        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 0-100%)
        const formatPercent = (value) => `${Math.round(Math.max(0, Math.min(100, value)))}%`;
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        document.getElementById('oeeAvailability').textContent = formatPercent(availability);
        document.getElementById('oeePerformance').textContent = formatPercent(performance);
        document.getElementById('oeeQuality').textContent = formatPercent(quality);
        document.getElementById('oeeTotal').textContent = formatPercent(oeeTotal);

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏µ‡∏Ç‡∏≠‡∏á badge ‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
        this.updateBadgeColor('oeeAvailability', availability);
        this.updateBadgeColor('oeePerformance', performance);
        this.updateBadgeColor('oeeQuality', quality);
        this.updateBadgeColor('oeeTotal', oeeTotal);
    }

    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏µ‡∏Ç‡∏≠‡∏á badge ‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå
     * 
     * @param {string} elementId - ID ‡∏Ç‡∏≠‡∏á element ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ
     * @param {number} value - ‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ
     * 
     * ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô OEE:
     * - ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß (success): >= 85% = ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏° (World Class)
     * - ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô (info): 75-84% = ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏î‡∏µ (Good)  
     * - ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á (warning): 60-74% = ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (Average)
     * - ‡πÅ‡∏î‡∏á (danger): < 60% = ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏≤‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏ (Needs Improvement)
     */
    updateBadgeColor(elementId, value) {
        const element = document.getElementById(elementId);
        if (!element) return;

        // ‡∏•‡∏ö‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏µ‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å
        element.className = element.className.replace(/bg-\w+/g, '');
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏µ‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
        if (value >= 85) {
            element.classList.add('bg-success');      // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß - ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏° (World Class OEE)
        } else if (value >= 75) {
            element.classList.add('bg-info');         // ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô - ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏î‡∏µ (Good OEE)
        } else if (value >= 60) {
            element.classList.add('bg-warning');      // ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á - ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (Average OEE)
        } else {
            element.classList.add('bg-danger');       // ‡πÅ‡∏î‡∏á - ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏≤‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏
        }
    }

    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• OEE ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
     * - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ "-" ‡πÅ‡∏ó‡∏ô‡∏Ñ‡πà‡∏≤
     * - ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏ó‡∏≤ (secondary)
     */
    resetOEEDisplay() {
        ['oeeAvailability', 'oeePerformance', 'oeeQuality', 'oeeTotal'].forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                element.textContent = '-';
                element.className = element.className.replace(/bg-\w+/g, '') + ' bg-secondary';
            }
        });
    }

    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏±‡∏ö Runtime (‡∏•‡∏ö downtime break ‡πÅ‡∏•‡πâ‡∏ß)
     * @param {number} actualRunTime - Runtime ‡∏ó‡∏µ‡πà‡∏•‡∏ö downtime ‡πÅ‡∏•‡∏∞ break ‡πÅ‡∏•‡πâ‡∏ß (‡∏ô‡∏≤‡∏ó‡∏µ)
     * @param {number} plannedTotalMinutes - ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ú‡∏ô‡∏£‡∏ß‡∏° (‡∏ô‡∏≤‡∏ó‡∏µ)
     */
    updateTimeDifferenceDisplay(actualRunTime, plannedTotalMinutes) {
        try {
            console.log('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ß‡∏•‡∏≤:', {
                actualRunTime,
                plannedTotalMinutes
            });

            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á (‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö runtime ‡∏Å‡∏±‡∏ö‡πÅ‡∏ú‡∏ô)
            const timeDifferenceMinutes = actualRunTime - plannedTotalMinutes;
            const isAheadOfSchedule = timeDifferenceMinutes < 0; // ‡∏•‡∏ö = ‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤‡πÅ‡∏ú‡∏ô
            const isBehindSchedule = timeDifferenceMinutes > 0;  // ‡∏ö‡∏ß‡∏Å = ‡∏ä‡πâ‡∏≤‡∏Å‡∏ß‡πà‡∏≤‡πÅ‡∏ú‡∏ô
            const isOnSchedule = timeDifferenceMinutes === 0;    // ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô = ‡∏ï‡∏£‡∏á‡πÅ‡∏ú‡∏ô

            console.log(`‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ (‡πÅ‡∏ú‡∏ô vs Runtime):
            - ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ú‡∏ô: ${plannedTotalMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ
            - Runtime (‡∏•‡∏ö downtime break): ${actualRunTime} ‡∏ô‡∏≤‡∏ó‡∏µ
            - ‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á: ${timeDifferenceMinutes > 0 ? '+' : ''}${timeDifferenceMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ
            - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${isAheadOfSchedule ? '‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤‡πÅ‡∏ú‡∏ô' : isBehindSchedule ? '‡∏ä‡πâ‡∏≤‡∏Å‡∏ß‡πà‡∏≤‡πÅ‡∏ú‡∏ô' : '‡∏ï‡∏£‡∏á‡πÅ‡∏ú‡∏ô'}`);

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î
            document.getElementById('plannedTotalTime').textContent = plannedTotalMinutes > 0 ? plannedTotalMinutes : '-';
            document.getElementById('actualTotalTime').textContent = actualRunTime > 0 ? actualRunTime : '-';

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á
            const timeDifferenceValueEl = document.getElementById('timeDifferenceValue');
            const timeDifferenceCardEl = document.getElementById('timeDifferenceCard');
            const timeDifferenceStatusEl = document.getElementById('timeDifferenceStatus');

            if (actualRunTime > 0 && plannedTotalMinutes > 0) {
                // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á
                if (timeDifferenceValueEl) {
                    timeDifferenceValueEl.textContent = timeDifferenceMinutes > 0 ? `+${timeDifferenceMinutes}` : timeDifferenceMinutes;
                }

                // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                if (timeDifferenceCardEl) {
                    // ‡∏•‡∏ö‡∏Ñ‡∏•‡∏≤‡∏™‡πÄ‡∏Å‡πà‡∏≤
                    timeDifferenceCardEl.className = timeDifferenceCardEl.className.replace(/border-(success|warning|danger|secondary)/g, '');
                    
                    const titleEl = timeDifferenceCardEl.querySelector('.card-title');
                    const valueEl = timeDifferenceCardEl.querySelector('h4');
                    
                    if (isOnSchedule) {
                        timeDifferenceCardEl.classList.add('border-success');
                        titleEl.className = 'card-title text-success mb-2';
                        valueEl.className = 'text-success mb-0';
                    } else if (isAheadOfSchedule) {
                        timeDifferenceCardEl.classList.add('border-success');
                        titleEl.className = 'card-title text-success mb-2';
                        valueEl.className = 'text-success mb-0';
                    } else if (isBehindSchedule) {
                        timeDifferenceCardEl.classList.add('border-warning');
                        titleEl.className = 'card-title text-warning mb-2';
                        valueEl.className = 'text-warning mb-0';
                    }
                }

                // ‡πÅ‡∏™‡∏î‡∏á badge ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥)
                if (timeDifferenceStatusEl) {
                    let statusHTML = '';
                    
                    if (isOnSchedule) {
                        statusHTML = `
                            <span class="badge bg-success fs-6 px-3 py-2">
                                <i class="bi bi-check-circle me-1"></i>‡∏ï‡∏£‡∏á‡πÅ‡∏ú‡∏ô (${timeDifferenceMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ)
                            </span>
                        `;
                    } else if (isAheadOfSchedule) {
                        statusHTML = `
                            <span class="badge bg-success fs-6 px-3 py-2">
                                <i class="bi bi-lightning me-1"></i>‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤‡πÅ‡∏ú‡∏ô ${Math.abs(timeDifferenceMinutes)} ‡∏ô‡∏≤‡∏ó‡∏µ
                            </span>
                        `;
                    } else if (isBehindSchedule) {
                        statusHTML = `
                            <span class="badge bg-warning fs-6 px-3 py-2">
                                <i class="bi bi-clock me-1"></i>‡∏ä‡πâ‡∏≤‡∏Å‡∏ß‡πà‡∏≤‡πÅ‡∏ú‡∏ô ${timeDifferenceMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ
                            </span>
                        `;
                    }
                    
                    timeDifferenceStatusEl.innerHTML = statusHTML;
                }
            } else {
                // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠
                if (timeDifferenceValueEl) {
                    timeDifferenceValueEl.textContent = '-';
                }
                
                if (timeDifferenceCardEl) {
                    timeDifferenceCardEl.className = 'card border-secondary';
                    const titleEl = timeDifferenceCardEl.querySelector('.card-title');
                    const valueEl = timeDifferenceCardEl.querySelector('h4');
                    titleEl.className = 'card-title text-secondary mb-2';
                    valueEl.className = 'text-secondary mb-0';
                }
                
                if (timeDifferenceStatusEl) {
                    timeDifferenceStatusEl.innerHTML = `
                        <span class="badge bg-secondary fs-6 px-3 py-2">
                            <i class="bi bi-question-circle me-1"></i>‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                        </span>
                    `;
                }
            }

        } catch (error) {
            console.error('Error in updateTimeDifferenceDisplay:', error);
        }
    }

    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
     * - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
     * - ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
     * - ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
     * - ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
     * 
     * @param {Event} event - event object ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
     */
    async handleFormSubmit(event) {
        event.preventDefault();
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥
        if (this._isSubmitting) {
            console.warn('‚ö†Ô∏è Form is already being submitted, ignoring duplicate call');
            return;
        }
        
        this._isSubmitting = true;
        
        console.log('=== FORM SUBMIT DEBUG ===');
        console.log('üìÖ Timestamp:', new Date().toISOString());
        console.log('üîÑ Call Count:', (this._submitCount || 0) + 1);
        this._submitCount = (this._submitCount || 0) + 1;
        console.log('Form submit started...');
        console.log('Current taskId:', this.taskId);
        console.log('Task data:', this.taskData);
        console.log('IsLoading:', this.isLoading);
        
        // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ã‡πâ‡∏≥‡∏Ç‡∏ì‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
        if (this.isLoading) {
            console.log('Already loading, skipping...');
            return;
        }

        try {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
            console.log('Validating form...');
            if (!this.validateForm()) {
                console.log('Form validation failed');
                return;
            }

            console.log('Form validation passed');
            this.isLoading = true;
            this.showLoading(true);

            // ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
            console.log('Collecting form data...');
            const formData = this.collectFormData();
            
            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• partial confirmation
            const totalPieces = parseInt(document.getElementById('totalPieces')?.value || '0');
            const isCompleteProduction = this.partialData && 
                (this.partialData.totalProduced + totalPieces >= this.partialData.targetOutput);
            
            formData.IsPartialConfirmation = !isCompleteProduction;
            formData.CurrentSessionQuantity = totalPieces;
            
            console.log('Form data prepared:', formData);
            
            // ‡πÉ‡∏ä‡πâ save_production_result API ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á partial ‡πÅ‡∏•‡∏∞ complete
            console.log('Using save_production_result API for all confirmations...');
            formData.TotalProducedBefore = this.partialData?.totalProduced || 0;
            formData.RemainingQuantity = Math.max(0, 
                (this.partialData?.targetOutput || 0) - (this.partialData?.totalProduced || 0) - totalPieces
            );
            
            console.log('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• OEE (with Partial):', {
                ...formData,
                partialInfo: {
                    isCompleteProduction,
                    currentSession: totalPieces,
                    totalBefore: this.partialData?.totalProduced || 0,
                    remaining: formData.RemainingQuantity
                }
            });
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö PlanID ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
            if (!formData.PlanID || formData.PlanID <= 0) {
                throw new Error(`PlanID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${formData.PlanID}, taskId: ${this.taskId}`);
            }
            
            console.log('PlanID validated:', formData.PlanID);

            // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á backend API (‡πÉ‡∏ä‡πâ endpoint ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà)
            console.log('=== DEBUG: Form Data ===');
            console.log('PlanID:', formData.PlanID, 'Type:', typeof formData.PlanID);
            console.log('Full Form Data:', JSON.stringify(formData, null, 2));
            console.log('========================');
            
            const response = await fetch('api/results.php?action=save_production_result', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json; charset=utf-8',
                    'Accept': 'application/json',
                },
                body: JSON.stringify(formData)
            });

            console.log('Response status:', response.status);
            console.log('Response headers:', Object.fromEntries(response.headers.entries()));
            
            // ‡∏≠‡πà‡∏≤‡∏ô response ‡πÄ‡∏õ‡πá‡∏ô text ‡∏Å‡πà‡∏≠‡∏ô
            const responseText = await response.text();
            console.log('Raw response text:', responseText);
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
            if (!response.ok) {
                console.error('HTTP Error:', response.status, response.statusText);
                console.error('Response body:', responseText);
                throw new Error(`HTTP ${response.status}: ${response.statusText} - ${responseText.substring(0, 200)}`);
            }

            // Parse JSON response
            let result;
            try {
                result = JSON.parse(responseText);
            } catch (parseError) {
                console.error('JSON Parse Error:', parseError);
                throw new Error('Invalid JSON response: ' + responseText.substring(0, 100));
            }
            
            console.log('Parsed response:', result);
            
            if (!result.success) {
                throw new Error(result.error || '‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
            }

            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ï‡∏≤‡∏° partial status
            if (formData.IsPartialConfirmation) {
                this.showToast(
                    `‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ú‡∏•‡∏¥‡∏ï: ${formData.RemainingQuantity} ‡∏ä‡∏¥‡πâ‡∏ô`, 
                    'success'
                );
                
                // ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡πà‡∏≠
                setTimeout(() => {
                    window.location.reload();
                }, 2000);
            } else {
                this.showToast('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß', 'success');
                
                // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
                setTimeout(() => {
                    window.location.href = 'index.html';
                }, 2000);
            }

        } catch (error) {
            console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°:', error);
            console.error('Error details:', {
                message: error.message,
                stack: error.stack,
                taskId: this.taskId,
                formElements: {
                    startDate: getConfirmDateValue('actualStartDate'),
                    startTime: getConfirmTimeValue('actualStartHour', 'actualStartMinute'),
                    endDate: getConfirmDateValue('actualEndDate'),
                    endTime: getConfirmTimeValue('actualEndHour', 'actualEndMinute')
                }
            });
            
            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á
            let errorMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
            
            if (error.message.includes('taskId')) {
                errorMessage = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á';
            } else if (error.message.includes('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà') || error.message.includes('‡πÄ‡∏ß‡∏•‡∏≤')) {
                errorMessage = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
            } else if (error.message.includes('‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢')) {
                errorMessage = '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏¥‡∏ï‡∏£‡∏ß‡∏°';
            } else if (error.message.includes('HTTP')) {
                errorMessage = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á';
            } else if (error.message.includes('JSON')) {
                errorMessage = '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö';
            }
            
            this.showToast(errorMessage, 'danger');
        } finally {
            this.isLoading = false;
            this.showLoading(false);
            
            // ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
            this._isSubmitting = false;
            console.log('üîì Form submission unlocked');
        }
    }

    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
     * 
     * @returns {boolean} true ‡∏´‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á, false ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
     */
    validateForm() {
        const form = document.getElementById('emergencyStopForm');
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö HTML5 validation
        if (!form.checkValidity()) {
            form.classList.add('was-validated');
            this.showToast('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô', 'warning');
            return false;
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î ‡πÉ‡∏ä‡πâ dropdown ‡πÅ‡∏ó‡∏ô input type="time"
        const startDateValue = getConfirmDateValue('actualStartDate');
        const endDateValue = getConfirmDateValue('actualEndDate');
        
        // ‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å dropdown
        const actualStartTime = getConfirmTimeValue('actualStartHour', 'actualStartMinute');
        const actualEndTime = getConfirmTimeValue('actualEndHour', 'actualEndMinute');
        
        if (!startDateValue || !endDateValue) {
            this.showToast('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà', 'danger');
            return false;
        }
        
        if (!startDateValue || !endDateValue || !actualStartTime || !actualEndTime) {
            this.showToast('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô', 'warning');
            return false;
        }
        
        // ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô isValidTimeRange()
        const startDateFormatted = convertDateFormat(startDateValue);
        const endDateFormatted = convertDateFormat(endDateValue);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
        if (!isValidTimeRange(startDateFormatted, actualStartTime, endDateFormatted, actualEndTime)) {
            this.showToast('‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô', 'warning');
            return false;
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏¥‡∏ï‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢
        const totalPiecesEl = document.getElementById('totalPieces');
        const rejectPiecesEl = document.getElementById('rejectPieces');
        
        if (!totalPiecesEl || !rejectPiecesEl) {
            this.showToast('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏¥‡∏ï ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà', 'danger');
            return false;
        }
        
        const totalPieces = parseInt(totalPiecesEl.value || '0');
        const rejectPieces = parseInt(rejectPiecesEl.value || '0');
        
        if (rejectPieces > totalPieces) {
            this.showToast('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏¥‡∏ï‡∏£‡∏ß‡∏°‡πÑ‡∏î‡πâ', 'warning');
            return false;
        }

        return true;
    }

    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
     * 
     * ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á ProductionResults:
     * - PlanID: ID ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô
     * - BreakMorningMinutes/BreakLunchMinutes/BreakEveningMinutes: ‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á
     * - StandardRunRate: ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
     * - GoodQuantity: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏¥‡∏ï‡∏î‡∏µ
     * - DowntimeMinutes: ‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
     * - PlannedWorkMinutes: ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô
     * - ActiveWorkMinutes: ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á
     * - OEE_Overall: OEE ‡∏£‡∏ß‡∏°
     * - ActualRunRate, WorkingHours, TotalBreakMinutes, DowntimeReason: ‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
     * 
     * @returns {Object} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á ProductionResults
     */
    collectFormData() {
        console.log('=== collectFormData() STARTED ===');
        console.log('Current taskId:', this.taskId, 'Type:', typeof this.taskId);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö taskId ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏∑‡πà‡∏ô
        if (!this.taskId) {
            throw new Error('taskId ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö URL parameter');
        }
        
        try {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ partial sessions ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            let actualStartTimeStr, actualEndTimeStr;
            
            if (this.partialSessions && this.partialSessions.length > 0) {
                console.log('üìä Using time from partial sessions');
                
                // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö sessions ‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤
                const sortedSessions = [...this.partialSessions].sort((a, b) => 
                    new Date(a.ActualStartDateTime) - new Date(b.ActualStartDateTime)
                );
                
                // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏£‡∏¥‡∏á = ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏≠‡∏á session ‡πÅ‡∏£‡∏Å‡∏™‡∏∏‡∏î
                const firstSession = sortedSessions[0];
                const lastSession = sortedSessions[sortedSessions.length - 1];
                
                actualStartTimeStr = firstSession.ActualStartDateTime;
                actualEndTimeStr = lastSession.ActualEndDateTime;
                
                console.log('‚úÖ Time from partial sessions:', {
                    firstSession: firstSession.SessionNumber,
                    lastSession: lastSession.SessionNumber,
                    actualStartTime: actualStartTimeStr,
                    actualEndTime: actualEndTimeStr,
                    totalSessions: this.partialSessions.length
                });
                
            } else {
                console.log('üìä Using time from form input (no partial sessions)');
                
                // ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å input ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° (‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ partial)
                const startDateValue = getConfirmDateValue('actualStartDate');
                const endDateValue = getConfirmDateValue('actualEndDate');
                const actualStartTime = getConfirmTimeValue('actualStartHour', 'actualStartMinute');
                const actualEndTime = getConfirmTimeValue('actualEndHour', 'actualEndMinute');
                
                if (!startDateValue || !endDateValue || !actualStartTime || !actualEndTime) {
                    throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
                }
                
                const startDateFormatted = convertDateFormat(startDateValue);
                const endDateFormatted = convertDateFormat(endDateValue);
                
                actualStartTimeStr = formatDateTimeSQL(startDateFormatted, actualStartTime);
                actualEndTimeStr = formatDateTimeSQL(endDateFormatted, actualEndTime);
            }
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á DateTime objects ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
            const startTime = new Date(actualStartTimeStr);
            const endTime = new Date(actualEndTimeStr);
            
            if (isNaN(startTime.getTime()) || isNaN(endTime.getTime())) {
                throw new Error('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
            }
            
            const totalMinutes = Math.floor((endTime - startTime) / (1000 * 60));
            
            console.log('‚è∞ Final time calculation:', {
                actualStartTimeStr,
                actualEndTimeStr,
                totalMinutes,
                source: this.partialSessions?.length > 0 ? 'partial_sessions' : 'form_input'
            });
            
            // ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å partial sessions ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Break Time
            let breakMorning = 0, breakLunch = 0, breakEvening = 0;
            
            // ‡πÉ‡∏ä‡πâ Break Time ‡∏à‡∏≤‡∏Å checkbox ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Confirm ‡πÄ‡∏™‡∏°‡∏≠ (‡πÑ‡∏°‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡∏±‡∏ö partial sessions)
            document.querySelectorAll('input[name="breakTime[]"]:checked').forEach(checkbox => {
                const breakTimes = { 'morning': 15, 'lunch': 60, 'evening': 15 };
                if (checkbox.value === 'morning') breakMorning = breakTimes[checkbox.value];
                if (checkbox.value === 'lunch') breakLunch = breakTimes[checkbox.value];
                if (checkbox.value === 'evening') breakEvening = breakTimes[checkbox.value];
            });
            
            console.log('üìä Break time from form checkboxes:', {
                breakMorning, breakLunch, breakEvening
            });
            
            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Downtime ‡∏à‡∏≤‡∏Å partial sessions
            let downtimeMinutes = 0;
            let downtimeReason = '';
            
            if (this.partialSessions && this.partialSessions.length > 0) {
                this.partialSessions.forEach(session => {
                    downtimeMinutes += session.DowntimeMinutes || 0;
                    if (session.DowntimeReason) {
                        downtimeReason += (downtimeReason ? ' | ' : '') + 
                            `S${session.SessionNumber}: ${session.DowntimeReason}`;
                    }
                });
            } else {
                downtimeMinutes = parseInt(document.getElementById('downtime')?.value || '0');
                downtimeReason = document.getElementById('downtimeDetail')?.value || '';
            }
            
            // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏¥‡∏ï‡∏à‡∏≤‡∏Å partial sessions ‡πÅ‡∏•‡∏∞‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            let totalPieces = 0;
            let rejectPieces = 0;
            let reworkPieces = 0;
            let Remark = '';
            
            if (this.partialSessions && this.partialSessions.length > 0) {
                // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å partial sessions
                this.partialSessions.forEach(session => {
                    totalPieces += session.SessionQuantity || 0;
                    rejectPieces += session.SessionRejectQuantity || 0;
                    // reworkPieces += session.SessionReworkQuantity || 0;
                });
                
                // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏° (‡∏ö‡∏ß‡∏Å‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô)
                const formTotalPieces = parseInt(document.getElementById('totalPieces')?.value || '0');
                const formRejectPieces = parseInt(document.getElementById('rejectPieces')?.value || '0');
                const formReworkPieces = parseInt(document.getElementById('reworkPieces')?.value || '0');
                
                console.log('üîç Form elements check:', {
                    totalPiecesElement: document.getElementById('totalPieces'),
                    rejectPiecesElement: document.getElementById('rejectPieces'),
                    reworkPiecesElement: document.getElementById('reworkPieces'),
                    formTotalPieces,
                    formRejectPieces,
                    formReworkPieces
                });
                
                // ‡∏ö‡∏ß‡∏Å‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏±‡∏ö partial sessions
                totalPieces += formTotalPieces;
                rejectPieces += formRejectPieces;
                reworkPieces += formReworkPieces;
                
                console.log('üìä Production data combined (partial + form):', {
                    partialSessionsTotal: totalPieces - formTotalPieces,
                    formTotal: formTotalPieces,
                    finalTotal: totalPieces,
                    partialSessionsReject: rejectPieces - formRejectPieces,
                    formReject: formRejectPieces,
                    finalReject: rejectPieces,
                    partialSessionsRework: reworkPieces - formReworkPieces,
                    formRework: formReworkPieces,
                    finalRework: reworkPieces
                });
            } else {
                // ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
                totalPieces = parseInt(document.getElementById('totalPieces')?.value || '0');
                rejectPieces = parseInt(document.getElementById('rejectPieces')?.value || '0');
                reworkPieces = parseInt(document.getElementById('reworkPieces')?.value || '0');
            }
            
            // ‡πÉ‡∏ä‡πâ Remark ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° partial sessions)
            Remark = document.getElementById('Remark')?.value || '';
            
            const goodPieces = totalPieces - rejectPieces;
            
            // ‡πÉ‡∏ä‡πâ idealRunRate ‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏° (‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà)
            const idealRunRateUsed = parseFloat(document.getElementById('idealRunRate')?.value || '0');
            
            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤ Shift ‡πÅ‡∏•‡∏∞ Overtime
            const shiftHours = 10.0; // ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏∞ 10 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
            let overtimeMinutes = 0;
            if (document.getElementById('overtimeEnable')?.checked) {
                overtimeMinutes = parseInt(document.getElementById('overtime')?.value || '0');
            }
            
            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏£‡∏ß‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OEE
            const totalBreakMinutes = breakMorning + breakLunch + breakEvening;
        
        console.log('Step 10: Performance data validated:', { 
            idealRunRateUsed, totalPieces, rejectPieces, reworkPieces, goodPieces, Remark 
        });

        console.log('Step 11: Calculating OEE components...');
        // OEE calculation with new correct formulas
        
        // ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡∏•‡∏¥‡∏ï‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô (‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å)
        let plannedProductionMinutesForOEE = 0;
        if (this.taskData && this.taskData.PlannedStartTime && this.taskData.PlannedEndTime) {
            const plannedStartTime = new Date(this.taskData.PlannedStartTime);
            const plannedEndTime = new Date(this.taskData.PlannedEndTime);
            const plannedTotalMinutes = Math.floor((plannedEndTime - plannedStartTime) / (1000 * 60));
            // ‚úÖ ‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
            plannedProductionMinutesForOEE = plannedTotalMinutes;
        } else {
            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏¥‡∏°
            plannedProductionMinutesForOEE = totalMinutes;
        }
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Total Runtime ‡πÅ‡∏•‡∏∞ Actual Run Time ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        let totalRuntimeMinutes = totalMinutes; // ‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å break/downtime)
        let totalWorkingMinutesFromSessions = 0; // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏à‡∏≤‡∏Å sessions (‡∏´‡∏±‡∏Å‡πÅ‡∏•‡πâ‡∏ß)
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å partial sessions (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if (this.partialSessions && this.partialSessions.length > 0) {
            // WorkingMinutes ‡∏à‡∏≤‡∏Å sessions ‡∏´‡∏±‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏±‡∏Å‡∏≠‡∏µ‡∏Å
            totalWorkingMinutesFromSessions = this.partialSessions.reduce((sum, session) => {
                return sum + (session.WorkingMinutes || 0);
            }, 0);
            console.log('üìä Total working minutes from sessions:', totalWorkingMinutesFromSessions, 'minutes (already deducted break/downtime)');
        }
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Actual Run Time ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏´‡∏±‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡πÅ‡∏•‡∏∞ downtime)
        const currentFormActualRunTime = Math.max(0, totalMinutes - totalBreakMinutes - downtimeMinutes);
        
        // ‡∏£‡∏ß‡∏° Working Time = ‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å sessions (‡∏´‡∏±‡∏Å‡πÅ‡∏•‡πâ‡∏ß) + ‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏´‡∏±‡∏Å‡πÅ‡∏•‡πâ‡∏ß)
        const actualRunTimeMinutes = totalWorkingMinutesFromSessions + currentFormActualRunTime;
        
        console.log('üìä Working time calculation in collectFormData:', {
            currentFormMinutes: totalMinutes,
            totalWorkingMinutesFromSessions: totalWorkingMinutesFromSessions,
            totalBreakMinutes,
            downtimeMinutes,
            currentFormActualRunTime, // ‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏´‡∏±‡∏Å
            actualRunTimeMinutes // ‡∏£‡∏ß‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        });
        
        // Availability = (Actual Run Time / Planned Production Time) √ó 100
        const availability = plannedProductionMinutesForOEE > 0 ? (actualRunTimeMinutes / plannedProductionMinutesForOEE) * 100 : 0;
        
        // Performance = (Total Count / (Actual Run Time √ó Ideal Run Rate)) √ó 100
        const theoreticalMaxCount = actualRunTimeMinutes * idealRunRateUsed;
        const performance = theoreticalMaxCount > 0 ? (totalPieces / theoreticalMaxCount) * 100 : 0;
        
        const quality = totalPieces > 0 ? (goodPieces / totalPieces) * 100 : 0;
        const oeeTotal = (availability * performance * quality) / 10000;
        
        console.log('Step 12: OEE calculated with new formula:', { 
            plannedProductionMinutesForOEE, actualRunTimeMinutes, availability, performance, quality, oeeTotal 
        });

        console.log('Step 13: Calculating additional fields...');
        // Calculate additional fields for new schema
        const actualRunRate = actualRunTimeMinutes > 0 ? (totalPieces / actualRunTimeMinutes) : 0;
        const workingHours = totalMinutes / 60; // Convert minutes to hours
        
        console.log('Step 14: Additional fields calculated:', { actualRunRate, workingHours });
        
        console.log('Step 14.5: ActiveWorkMinutes calculation correct:', {
            actualRunTimeMinutes: actualRunTimeMinutes, // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏£‡∏ß‡∏° (‡∏´‡∏±‡∏Å break + downtime ‡πÅ‡∏•‡πâ‡∏ß)
            currentFormActualRunTime: currentFormActualRunTime, // ‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏´‡∏±‡∏Å
            totalWorkingMinutesFromSessions: totalWorkingMinutesFromSessions, // ‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å sessions (‡∏´‡∏±‡∏Å‡πÅ‡∏•‡πâ‡∏ß)
            note: 'ActiveWorkMinutes uses actualRunTimeMinutes (net working time)'
        });
        
        console.log('Step 15: Creating form data object...');
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
        const plannedTotalMinutes = this.getPlannedTotalMinutes();
        const actualTotalMinutes = totalMinutes;
        const timeDifferenceMinutes = actualTotalMinutes - plannedTotalMinutes;
        
        // === ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô (PlannedStartTime, PlannedEndTime, Status) ===
        let plannedStartTime = null;
        let plannedEndTime = null;
        let status = 'completed'; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        
        if (this.taskData) {
            plannedStartTime = this.taskData.PlannedStartTime ? this.taskData.PlannedStartTime : null;
            plannedEndTime = this.taskData.PlannedEndTime ? this.taskData.PlannedEndTime : null;
            
            console.log('Plan data from taskData:', {
                plannedStartTime,
                plannedEndTime,
                status
            });
        }

        const formData = {
            PlanID: parseInt(this.taskId),  // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô integer
            ActualStartTime: actualStartTimeStr,
            ActualEndTime: actualEndTimeStr,
            PlannedStartTime: plannedStartTime,  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô
            PlannedEndTime: plannedEndTime,      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô
            Status: status,                      // ‡πÄ‡∏û‡∏¥‡πà‡∏° Status
            
            // === ‡πÄ‡∏û‡∏¥‡πà‡∏° MachineName ‡πÅ‡∏•‡∏∞ Department ‡∏à‡∏≤‡∏Å taskData ===
            MachineName: this.getResolvedMachineName(),
            Department: this.taskData ? (this.taskData.DepartmentName || '') : '',
            SubdepartmentName: this.taskData ? (this.taskData.SubdepartmentName || '') : '',
            
            ShiftHours: shiftHours,
            OvertimeMinutes: overtimeMinutes,
            BreakMorningMinutes: breakMorning,
            BreakLunchMinutes: breakLunch,
            BreakEveningMinutes: breakEvening,
            StandardRunRate: idealRunRateUsed,
            TotalPieces: totalPieces,
            RejectPieces: rejectPieces,
            ReworkPieces: reworkPieces,
            Remark: Remark,  // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Quality Remark
            GoodQuantity: goodPieces,  // ‡πÄ‡∏û‡∏¥‡πà‡∏° GoodQuantity
            DowntimeMinutes: downtimeMinutes,
            DowntimeReason: downtimeReason,
            PlannedWorkMinutes: plannedProductionMinutesForOEE, // ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô (‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å)
            ActiveWorkMinutes: actualRunTimeMinutes, // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á (‡∏´‡∏±‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡πÅ‡∏•‡∏∞ downtime ‡πÅ‡∏•‡πâ‡∏ß)
            WorkingMinutes: actualRunTimeMinutes, // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API)
            OEE_Availability: Math.round(availability * 100) / 100,
            OEE_Performance: Math.round(performance * 100) / 100,
            OEE_Quality: Math.round(quality * 100) / 100,
            OEE_Overall: Math.round(oeeTotal * 100) / 100,
            ActualRunRate: Math.round(actualRunRate * 100) / 100,
            WorkingHours: Math.round(workingHours * 100) / 100,  // ‡πÄ‡∏û‡∏¥‡πà‡∏° WorkingHours
            TotalBreakMinutes: totalBreakMinutes,  // ‡πÄ‡∏û‡∏¥‡πà‡∏° TotalBreakMinutes
            
            // === ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Partial Sessions Support ===
            IsFromPartialSessions: this.partialSessions && this.partialSessions.length > 0,
            TotalPartialSessions: this.partialSessions ? this.partialSessions.length : 0,
            
            // === ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ ===
            PlannedTotalMinutes: plannedTotalMinutes,
            ActualTotalMinutes: actualTotalMinutes,
            TimeDifferenceMinutes: timeDifferenceMinutes,
            IsAheadOfSchedule: timeDifferenceMinutes < 0,
            IsBehindSchedule: timeDifferenceMinutes > 0,
            IsOnSchedule: timeDifferenceMinutes === 0,
            ConfirmedByUserID: 1
        };
        
        // === ‡πÄ‡∏û‡∏¥‡πà‡∏° DEBUG LOG ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤ ===
        console.log('=== WORKING TIME CALCULATION DEBUG ===');
        console.log('currentFormMinutes (‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏±‡∏Å):', totalMinutes);
        console.log('totalWorkingMinutesFromSessions (‡∏´‡∏±‡∏Å‡πÅ‡∏•‡πâ‡∏ß):', totalWorkingMinutesFromSessions);
        console.log('totalBreakMinutes:', totalBreakMinutes);
        console.log('downtimeMinutes:', downtimeMinutes);
        console.log('currentFormActualRunTime (‡∏´‡∏•‡∏±‡∏á‡∏´‡∏±‡∏Å):', currentFormActualRunTime);
        console.log('actualRunTimeMinutes (‡∏£‡∏ß‡∏°‡∏™‡∏∏‡∏ó‡∏ò‡∏¥):', actualRunTimeMinutes);
        console.log('ActiveWorkMinutes ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ API:', actualRunTimeMinutes);
        console.log('=== OEE CALCULATION DEBUG ===');
        console.log('Planned Production Minutes:', plannedProductionMinutesForOEE);
        console.log('Availability = (', actualRunTimeMinutes, '/', plannedProductionMinutesForOEE, ') √ó 100 =', availability.toFixed(2), '%');
        console.log('Performance = (', totalPieces, '/ (', actualRunTimeMinutes, '√ó', idealRunRateUsed, ')) √ó 100 =', performance.toFixed(2), '%');
        console.log('Quality = (', goodPieces, '/', totalPieces, ') √ó 100 =', quality.toFixed(2), '%');
        console.log('OEE = (', availability.toFixed(2), '√ó', performance.toFixed(2), '√ó', quality.toFixed(2), ') / 10000 =', oeeTotal.toFixed(2), '%');
        console.log('=========================================');
        
        console.log('Step 16: Form data object created successfully');
        console.log('Form data collected for ProductionResults:', formData);
        console.log('PlanID check:', formData.PlanID, 'Type:', typeof formData.PlanID, 'Valid:', !isNaN(formData.PlanID) && formData.PlanID > 0);
        
        // === DEBUG: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö MachineName ‡πÅ‡∏•‡∏∞ Department ===
        console.log('=== MachineName & Department DEBUG ===');
        console.log('taskData available:', !!this.taskData);
        if (this.taskData) {
            console.log('taskData.MachineName:', this.taskData.MachineName);
            console.log('taskData.DepartmentName:', this.taskData.DepartmentName);
        }
        console.log('formData.MachineName:', formData.MachineName);
        console.log('formData.Department:', formData.Department);
        console.log('========================================');
        
        
        console.log('‚úÖ Form data with partial sessions integration:', {
            source: formData.IsFromPartialSessions ? 'partial_sessions' : 'form_input',
            totalSessions: formData.TotalPartialSessions,
            timeRange: `${actualStartTimeStr} -> ${actualEndTimeStr}`,
            duration: `${totalMinutes} minutes`,
            production: `${totalPieces} total, ${goodPieces} good, ${rejectPieces} reject`
        });
        
        console.log('=== collectFormData() COMPLETED SUCCESSFULLY ===');
        
        return formData;
        
        } catch (error) {
            console.error('=== ERROR in collectFormData ===');
            console.error('Error occurred at step during form data collection');
            console.error('Error details:', {
                name: error.name,
                message: error.message,
                stack: error.stack
            });
            console.error('=== END ERROR LOG ===');
            throw error;
        }
    }

    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ú‡∏ô‡∏£‡∏ß‡∏° (helper function)
     */
    getPlannedTotalMinutes() {
        if (this.taskData && this.taskData.PlannedStartTime && this.taskData.PlannedEndTime) {
            const plannedStartTime = new Date(this.taskData.PlannedStartTime);
            const plannedEndTime = new Date(this.taskData.PlannedEndTime);
            return Math.floor((plannedEndTime - plannedStartTime) / (1000 * 60));
        }
        return 0;
    }

    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏£‡∏ß‡∏° (helper function)
     */
    getActualTotalMinutes() {
        const startDateValue = getConfirmDateValue('actualStartDate');
        const endDateValue = getConfirmDateValue('actualEndDate');
        const actualStartTime = getConfirmTimeValue('actualStartHour', 'actualStartMinute');
        const actualEndTime = getConfirmTimeValue('actualEndHour', 'actualEndMinute');
        
        if (!startDateValue || !endDateValue || !actualStartTime || !actualEndTime) {
            return 0;
        }
        
        const [startYear, startMonth, startDay] = startDateValue.split('-');
        const [startHour, startMinute] = actualStartTime.split(':');
        const startTime = new Date(parseInt(startYear), parseInt(startMonth) - 1, parseInt(startDay), parseInt(startHour), parseInt(startMinute));
        
        const [endYear, endMonth, endDay] = endDateValue.split('-');
        const [endHour, endMinute] = actualEndTime.split(':');
        const endTime = new Date(parseInt(endYear), parseInt(endMonth) - 1, parseInt(endDay), parseInt(endHour), parseInt(endMinute));
        
        return Math.floor((endTime - startTime) / (1000 * 60));
    }

    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Runtime ‡∏ó‡∏µ‡πà‡∏•‡∏ö downtime ‡πÅ‡∏•‡∏∞ break ‡πÅ‡∏•‡πâ‡∏ß (helper function)
     */
    getActualRunTime() {
        const totalMinutes = this.getActualTotalMinutes();
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å
        let breakMinutes = 0;
        document.querySelectorAll('input[name="breakTime[]"]:checked').forEach(checkbox => {
            const breakTimes = { 'morning': 15, 'lunch': 60, 'evening': 15 };
            breakMinutes += breakTimes[checkbox.value] || 0;
        });
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤ downtime
        const downtimeMinutes = parseInt(document.getElementById('downtime')?.value || '0');
        
        // Runtime = ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á - ‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å - Downtime
        return Math.max(0, totalMinutes - breakMinutes - downtimeMinutes);
    }

    // Utility functions
    formatDate(date) {
        const d = new Date(date);
        const day = String(d.getDate()).padStart(2, '0');
        const month = String(d.getMonth() + 1).padStart(2, '0');
        const year = d.getFullYear();
        return `${day}/${month}/${year}`;
    }

    formatDateTime(date) {
        const d = new Date(date);
        const dateStr = this.formatDate(d);
        const hours = String(d.getHours()).padStart(2, '0');
        const minutes = String(d.getMinutes()).padStart(2, '0');
        return `${dateStr} ${hours}:${minutes}`;
    }

    formatTime(date, includeSeconds = false) {
        const d = new Date(date);
        const hours = String(d.getHours()).padStart(2, '0');
        const minutes = String(d.getMinutes()).padStart(2, '0');
        
        if (includeSeconds) {
            const seconds = String(d.getSeconds()).padStart(2, '0');
            return `${hours}:${minutes}:${seconds}`;
        }
        
        return `${hours}:${minutes}`;
    }

    formatDateTimeLocal(date) {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');
        return `${year}-${month}-${day}T${hours}:${minutes}`;
    }

    formatDateTimeSQL(date) {
        if (!date || isNaN(date.getTime())) {
            throw new Error('Invalid date object provided to formatDateTimeSQL');
        }
        return date.toISOString().slice(0, 19).replace('T', ' ');
    }

    showLoading(show) {
        const loadingSection = document.getElementById('loadingSection');
        const form = document.getElementById('emergencyStopForm');
        
        if (loadingSection) {
            loadingSection.style.display = show ? 'block' : 'none';
        }
        
        if (form) {
            form.style.display = show ? 'none' : 'block';
        }

        // Disable form controls when loading
        const submitBtn = document.getElementById('confirmCompleteBtn');
        if (submitBtn) {
            submitBtn.disabled = show;
            if (show) {
                submitBtn.innerHTML = '<div class="spinner-border spinner-border-sm me-2"></div>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...';
            } else {
                submitBtn.innerHTML = '<i class="bi bi-check-circle me-2"></i>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å';
            }
        }
    }

    showError(message) {
        const loadingSection = document.getElementById('loadingSection');
        if (loadingSection) {
            loadingSection.innerHTML = `
                <div class="text-center py-5">
                    <i class="bi bi-exclamation-triangle text-danger fs-1 mb-3"></i>
                    <h5 class="text-danger mb-3">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</h5>
                    <p class="text-muted mb-4">${message}</p>
                    <a href="index.html" class="btn btn-primary">
                        <i class="bi bi-arrow-left me-2"></i>‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
                    </a>
                </div>
            `;
        }
    }

    showToast(message, type = 'success') {
        const toast = document.getElementById('mainToast');
        const toastBody = document.getElementById('mainToastBody');
        
        if (toast && toastBody) {
            toast.className = `toast align-items-center text-bg-${type} border-0`;
            toastBody.textContent = message;
            
            const bsToast = new bootstrap.Toast(toast, { delay: 4000 });
            bsToast.show();
        }
    }
    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô - ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ã‡πâ‡∏≥
     * ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ handleFormSubmit ‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏ó‡∏ô
     */
    static async confirmTaskCompletion(planId) {
        console.log('confirmTaskCompletion() - ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ã‡πâ‡∏≥');
        throw new Error('‡πÉ‡∏ä‡πâ handleFormSubmit ‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏ó‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ');
    }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß (Global function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö TaskManager)
 * ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏à‡∏≤‡∏Å‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô
 * @param {number} planId - ID ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
 * @returns {Promise<boolean>} - true ‡∏´‡∏≤‡∏Å‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
 */
async function confirmTaskCompletion(planId) {
    return await ConfirmCompleteManager.confirmTaskCompletion(planId);
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô
 * ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ integrate ‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ
 * 
 * ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ã‡πâ‡∏≥
 * ‡πÉ‡∏ä‡πâ handleFormSubmit ‡∏à‡∏≤‡∏Å form listener ‡πÅ‡∏ó‡∏ô
 */
function setupConfirmButton() {
    console.log('setupConfirmButton() - ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ã‡πâ‡∏≥');
    return; // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ
    
    // ‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    /*
    // ‡∏î‡∏∂‡∏á plan ID ‡∏à‡∏≤‡∏Å URL parameter
    const urlParams = new URLSearchParams(window.location.search);
    const planId = urlParams.get('id');
    
    if (!planId) {
        console.error('No plan ID found in URL');
        return;
    }
    
    // ‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
    const confirmButton = document.getElementById('confirmCompleteBtn');
    
    if (confirmButton) {
        confirmButton.addEventListener('click', async function(e) {
            e.preventDefault();
            
            // ‡πÅ‡∏™‡∏î‡∏á loading ‡∏´‡∏£‡∏∑‡∏≠ disable ‡∏õ‡∏∏‡πà‡∏°
            confirmButton.disabled = true;
            confirmButton.innerHTML = '<i class="spinner-border spinner-border-sm me-2"></i>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô...';
            
            try {
                // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô
                const success = await confirmTaskCompletion(parseInt(planId));
                
                if (success) {
                    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                    alert('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏à‡∏≤‡∏Å‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô');
                    
                    // redirect ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
                    window.location.href = 'index.html';
                } else {
                    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
                    alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô');
                    
                    // ‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
                    confirmButton.disabled = false;
                    confirmButton.innerHTML = '<i class="bi bi-check-circle me-2"></i>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô';
                }
            } catch (error) {
                console.error('Confirm error:', error);
                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô: ' + error.message);
                
                // ‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
                confirmButton.disabled = false;
                confirmButton.innerHTML = '<i class="bi bi-check-circle me-2"></i>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô';
            }
        });
    }
    */
}

// Export functions for global use
window.confirmTaskCompletion = confirmTaskCompletion;
window.setupConfirmButton = setupConfirmButton;
window.ConfirmCompleteManager = ConfirmCompleteManager;

// Export ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
window.useCurrentDateTime = function() {
    const manager = window.currentConfirmManager;
    if (manager && manager.updateCurrentDateTime) {
        manager.updateCurrentDateTime();
        return true;
    }
    console.warn('ConfirmCompleteManager ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°');
    return false;
};

// ================================================================
// FORCE 24-HOUR TIME FORMAT
// ================================================================

/**
 * ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡πÅ‡∏•‡∏∞‡∏•‡∏ö AM/PM ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
 */

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    console.log('üîÑ DOM Content Loaded - Initializing ConfirmCompleteManager');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö elements ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    const criticalElements = [
        'operatingTime',
        'netRunTime', 
        'actualRunRate',
        'totalPieces',
        'idealRunRate',
        'rejectPieces',
        'actualStartHour',
        'actualStartMinute',
        'actualEndHour',
        'actualEndMinute'
    ];
    
    console.log('üîç Checking critical elements in DOM:');
    criticalElements.forEach(id => {
        const element = document.getElementById(id);
        console.log(`  - ${id}: ${element ? '‚úÖ FOUND' : '‚ùå NOT FOUND'}`);
        if (element) {
            console.log(`    Element type: ${element.tagName}, value: "${element.value}", readonly: ${element.readOnly}`);
        }
    });
    
    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á manager ‡∏ã‡πâ‡∏≥
    if (window.currentConfirmManager) {
        console.log('‚ö†Ô∏è ConfirmCompleteManager already exists, skipping initialization');
        return;
    }
    
    const manager = new ConfirmCompleteManager();
    // ‡πÄ‡∏Å‡πá‡∏ö reference ‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å
    window.currentConfirmManager = manager;
    manager.init();
});
