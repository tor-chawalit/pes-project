// confirm-complete.js - Enhanced with Backend Integration
// =====================================================
// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á ProductionResults
//
// ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏´‡∏•‡∏±‡∏Å:
// ---------
// PlanID                    -> ID ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô
// ActualStartTime           -> ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏£‡∏¥‡∏á
// ActualEndTime             -> ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏à‡∏£‡∏¥‡∏á
// BreakMorningMinutes       -> ‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡πÄ‡∏ä‡πâ‡∏≤ (‡∏ô‡∏≤‡∏ó‡∏µ)
// BreakLunchMinutes         -> ‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á (‡∏ô‡∏≤‡∏ó‡∏µ)
// BreakEveningMinutes       -> ‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡πÄ‡∏¢‡πá‡∏ô (‡∏ô‡∏≤‡∏ó‡∏µ)
// StandardRunRate           -> ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
// GoodQuantity              -> ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏¥‡∏ï‡∏î‡∏µ
// DowntimeMinutes           -> ‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á (‡∏ô‡∏≤‡∏ó‡∏µ)
// DowntimeReason            -> ‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
// PlannedWorkMinutes        -> ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô (‡∏ô‡∏≤‡∏ó‡∏µ)
// ActiveWorkMinutes         -> ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á (‡∏ô‡∏≤‡∏ó‡∏µ)
// OEE_Overall               -> OEE ‡∏£‡∏ß‡∏°
// ActualRunRate             -> ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏à‡∏£‡∏¥‡∏á
// WorkingHours              -> ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
// TotalBreakMinutes         -> ‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏£‡∏ß‡∏° (‡∏ô‡∏≤‡∏ó‡∏µ)
//
// ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà backend ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£:
// ----------------------
// ResultID, ProductCode, ProductName, ProductSize
// Department, MachineName, ShiftName, ProductionDate
// ConfirmedByUserName, ConfirmedAt

// ================================================================
// TIME DROPDOWN MANAGEMENT FOR CONFIRM-COMPLETE
// ================================================================

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á options ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö dropdown ‡πÄ‡∏ß‡∏•‡∏≤ (‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á 00-23 ‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏ó‡∏µ 00-59)
 * ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ confirm-complete
 */
function populateConfirmTimeDropdowns() {
    console.log('üîÑ populateConfirmTimeDropdowns() called');
    const timeSelects = ['actualStartHour', 'actualEndHour', 'actualStartMinute', 'actualEndMinute'];
    
    timeSelects.forEach(selectId => {
        const select = document.getElementById(selectId);
        if (!select) {
            console.warn(`‚ùå Element with ID '${selectId}' not found`);
            return;
        }
        
        console.log(`üîç Processing dropdown: ${selectId}`);
        
        // ‡∏•‡πâ‡∏≤‡∏á options ‡πÄ‡∏î‡∏¥‡∏° ‡πÅ‡∏ï‡πà‡πÄ‡∏Å‡πá‡∏ö default option
        const defaultOption = select.querySelector('option[value=""]');
        const defaultText = defaultOption ? defaultOption.textContent : '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å';
        select.innerHTML = '';
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° default option ‡∏Å‡∏•‡∏±‡∏ö
        const newDefaultOption = document.createElement('option');
        newDefaultOption.value = '';
        newDefaultOption.textContent = defaultText;
        newDefaultOption.disabled = true;
        newDefaultOption.selected = true;
        select.appendChild(newDefaultOption);
        
        if (selectId.includes('Hour')) {
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á options 00-23 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (24-hour format)
            for (let i = 0; i <= 23; i++) {
                const option = document.createElement('option');
                const hourValue = String(i).padStart(2, '0');
                option.value = hourValue;
                option.textContent = hourValue;
                select.appendChild(option);
            }
            console.log(`‚úÖ Created ${selectId} with 24 hours (00-23)`);
        } else if (selectId.includes('Minute')) {
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á options 00-59 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏≤‡∏ó‡∏µ
            for (let i = 0; i <= 59; i++) {
                const option = document.createElement('option');
                const minuteValue = String(i).padStart(2, '0');
                option.value = minuteValue;
                option.textContent = minuteValue;
                select.appendChild(option);
            }
            console.log(`‚úÖ Created ${selectId} with 60 minutes (00-59)`);
        }
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô options ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πâ
        const totalOptions = select.querySelectorAll('option').length;
        console.log(`üîç ${selectId} now has ${totalOptions} options total`);
    });
    
    console.log('‚úÖ Confirm Complete time dropdowns populated successfully (24-hour format)');
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å dropdown hour ‡πÅ‡∏•‡∏∞ minute
 * @param {string} hourSelectId - ID ‡∏Ç‡∏≠‡∏á select element ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
 * @param {string} minuteSelectId - ID ‡∏Ç‡∏≠‡∏á select element ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏≤‡∏ó‡∏µ
 * @returns {string|null} ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö HH:MM ‡∏´‡∏£‡∏∑‡∏≠ null ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
 */
function getConfirmTimeValue(hourSelectId, minuteSelectId) {
    const hourElement = document.getElementById(hourSelectId);
    const minuteElement = document.getElementById(minuteSelectId);
    
    if (!hourElement || !minuteElement) {
        console.error(`‚ùå Time elements not found: ${hourSelectId}, ${minuteSelectId}`);
        return null;
    }
    
    const hour = hourElement.value;
    const minute = minuteElement.value;
    
    console.log(`üîç getConfirmTimeValue(${hourSelectId}, ${minuteSelectId}): hour="${hour}", minute="${minute}"`);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
    if (!hour || !minute || hour === '' || minute === '' || hour === null || minute === null) {
        console.log(`‚ö†Ô∏è Time value not complete: hour="${hour}", minute="${minute}"`);
        return null;
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const hourNum = parseInt(hour);
    const minuteNum = parseInt(minute);
    
    if (isNaN(hourNum) || isNaN(minuteNum)) {
        console.error(`‚ùå Non-numeric time values: hour="${hour}", minute="${minute}"`);
        return null;
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (00-23 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á, 00-59 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏≤‡∏ó‡∏µ)
    if (hourNum < 0 || hourNum > 23 || minuteNum < 0 || minuteNum > 59) {
        console.error(`‚ùå Invalid 24-hour time values: hour=${hourNum} (0-23), minute=${minuteNum} (0-59)`);
        return null;
    }
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô string ‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 2 ‡∏´‡∏•‡∏±‡∏Å
    const formattedHour = String(hourNum).padStart(2, '0');
    const formattedMinute = String(minuteNum).padStart(2, '0');
    const timeString = `${formattedHour}:${formattedMinute}`;
    
    console.log(`‚úÖ Valid 24-hour time returned: ${timeString}`);
    return timeString;
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô)
 * @param {string} startDate - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö DD/MM/YYYY
 * @param {string} startTime - ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö HH:MM (24-hour format)
 * @param {string} endDate - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö DD/MM/YYYY
 * @param {string} endTime - ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö HH:MM (24-hour format)
 * @returns {boolean} true ‡∏ñ‡πâ‡∏≤‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
 */
function isValidTimeRange(startDate, startTime, endDate, endTime) {
    try {
        console.log(`üîç isValidTimeRange() called with:`, {
            startDate, startTime, endDate, endTime
        });
        
        if (!startDate || !startTime || !endDate || !endTime) {
            console.log(`‚ùå Missing date/time values`);
            return false;
        }
        
        // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        const [startDay, startMonth, startYear] = startDate.split('/');
        const [startHour, startMinute] = startTime.split(':');
        
        console.log(`üîç Parsing start date/time:`, {
            startDay, startMonth, startYear, startHour, startMinute
        });
        
        const startDateTime = new Date(
            parseInt(startYear), 
            parseInt(startMonth) - 1, 
            parseInt(startDay), 
            parseInt(startHour), 
            parseInt(startMinute)
        );
        
        // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
        const [endDay, endMonth, endYear] = endDate.split('/');
        const [endHour, endMinute] = endTime.split(':');
        
        console.log(`üîç Parsing end date/time:`, {
            endDay, endMonth, endYear, endHour, endMinute
        });
        
        const endDateTime = new Date(
            parseInt(endYear), 
            parseInt(endMonth) - 1, 
            parseInt(endDay), 
            parseInt(endHour), 
            parseInt(endMinute)
        );
        
        console.log(`üîç Parsed DateTime objects:`, {
            startDateTime: startDateTime.toLocaleString('th-TH'),
            endDateTime: endDateTime.toLocaleString('th-TH')
        });
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á Date objects
        if (isNaN(startDateTime.getTime()) || isNaN(endDateTime.getTime())) {
            console.log(`‚ùå Invalid Date objects created`);
            return false;
        }
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        const startHourNum = parseInt(startHour);
        const startMinuteNum = parseInt(startMinute);
        const endHourNum = parseInt(endHour);
        const endMinuteNum = parseInt(endMinute);
        
        if (startHourNum < 0 || startHourNum > 23 || startMinuteNum < 0 || startMinuteNum > 59 ||
            endHourNum < 0 || endHourNum > 23 || endMinuteNum < 0 || endMinuteNum > 59) {
            console.log(`‚ùå Invalid 24-hour time format`);
            return false;
        }
        
        // ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        const isValid = endDateTime > startDateTime;
        
        console.log(`üîç Time range validation result: ${isValid}`);
        if (!isValid) {
            console.log(`‚ùå End time (${endDateTime.toLocaleString('th-TH')}) must be after start time (${startDateTime.toLocaleString('th-TH')})`);
        } else {
            const diffMinutes = Math.floor((endDateTime - startDateTime) / (1000 * 60));
            console.log(`‚úÖ Valid time range - Duration: ${diffMinutes} minutes`);
        }
        
        return isValid;
        
    } catch (error) {
        console.error('‚ùå Error in isValidTimeRange:', error);
        return false;
    }
}

/**
 * ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö SQL DateTime
 * @param {string} dateStr - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö DD/MM/YYYY
 * @param {string} timeStr - ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö HH:MM
 * @returns {string} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY-MM-DD HH:MM:SS
 */
function formatDateTimeSQL(dateStr, timeStr) {
    try {
        if (!dateStr || !timeStr) {
            throw new Error('Date or time string is missing');
        }
        
        const [day, month, year] = dateStr.split('/');
        const [hour, minute] = timeStr.split(':');
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á Date object
        const dateTime = new Date(
            parseInt(year), 
            parseInt(month) - 1, 
            parseInt(day), 
            parseInt(hour), 
            parseInt(minute), 
            0 // seconds
        );
        
        if (isNaN(dateTime.getTime())) {
            throw new Error('Invalid date/time values');
        }
        
        // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö SQL: YYYY-MM-DD HH:MM:SS
        const sqlYear = dateTime.getFullYear();
        const sqlMonth = String(dateTime.getMonth() + 1).padStart(2, '0');
        const sqlDay = String(dateTime.getDate()).padStart(2, '0');
        const sqlHour = String(dateTime.getHours()).padStart(2, '0');
        const sqlMinute = String(dateTime.getMinutes()).padStart(2, '0');
        const sqlSecond = String(dateTime.getSeconds()).padStart(2, '0');
        
        return `${sqlYear}-${sqlMonth}-${sqlDay} ${sqlHour}:${sqlMinute}:${sqlSecond}`;
        
    } catch (error) {
        console.error('Error in formatDateTimeSQL:', error);
        throw new Error('Invalid date/time format');
    }
}

/**
 * ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å YYYY-MM-DD ‡πÄ‡∏õ‡πá‡∏ô DD/MM/YYYY
 * @param {string} dateStr - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY-MM-DD (‡∏à‡∏≤‡∏Å input type="date")
 * @returns {string} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö DD/MM/YYYY
 */
function convertDateFormat(dateStr) {
    if (!dateStr) return '';
    
    // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY-MM-DD ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô DD/MM/YYYY
    if (dateStr.includes('-')) {
        const [year, month, day] = dateStr.split('-');
        return `${day}/${month}/${year}`;
    }
    
    // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö DD/MM/YYYY ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
    return dateStr;
}

/**
 * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô dropdown
 * @param {string} hourSelectId - ID ‡∏Ç‡∏≠‡∏á select element ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
 * @param {string} minuteSelectId - ID ‡∏Ç‡∏≠‡∏á select element ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏≤‡∏ó‡∏µ
 * @param {string} timeString - ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö HH:MM
 */
function setConfirmTimeValue(hourSelectId, minuteSelectId, timeString) {
    if (!timeString) return;
    
    const [hours, minutes] = timeString.split(':');
    
    const hourElement = document.getElementById(hourSelectId);
    const minuteElement = document.getElementById(minuteSelectId);
    
    if (hourElement && hours) {
        hourElement.value = hours.padStart(2, '0');
    }
    if (minuteElement && minutes) {
        minuteElement.value = minutes.padStart(2, '0');
    }
}

/**
 * ‡∏Ñ‡∏•‡∏≤‡∏™‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡πâ‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏à‡∏ö‡∏á‡∏≤‡∏ô
 * ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OEE ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á backend
 */
class ConfirmCompleteManager {
    constructor() {
        this.taskData = null;      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        this.taskId = null;        // ID ‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
        this.isLoading = false;    // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    }

    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
     * - ‡∏î‡∏∂‡∏á task ID ‡∏à‡∏≤‡∏Å URL parameter
     * - ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô
     * - ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ event listeners
     * - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
     */
    async init() {
        try {
                        // ‡∏î‡∏∂‡∏á task ID ‡∏à‡∏≤‡∏Å URL parameter (?id=123)
            const urlParams = new URLSearchParams(window.location.search);
            this.taskId = urlParams.get('id');
            
            console.log('URL parameters:', window.location.search);
            console.log('Extracted taskId:', this.taskId, 'Type:', typeof this.taskId);
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ ID ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (!this.taskId) {
                this.showError('‡πÑ‡∏°‡πà‡∏û‡∏ö ID ‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö URL ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å');
                return;
            }

            console.log('Loading task data for ID:', this.taskId);
            
            // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ listeners ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
            await this.loadTaskData();
            this.setupEventListeners();
            this.initializeCalculations();
            
        } catch (error) {
            console.error('Init error:', error);
            this.showError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ' + error.message);
        }
    }

    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å backend
     * - ‡∏™‡πà‡∏á request ‡πÑ‡∏õ‡∏¢‡∏±‡∏á tasks.php?action=get_plan_detail
     * - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö response ‡πÅ‡∏•‡∏∞ error handling
     * - ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ß‡πâ‡πÉ‡∏ô this.taskData
     * - ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
     */
    async loadTaskData() {
        try {
            // ‡πÅ‡∏™‡∏î‡∏á loading spinner
            this.showLoading(true);
            
            // ‡∏™‡πà‡∏á request ‡πÑ‡∏õ‡∏¢‡∏±‡∏á backend ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô
            const response = await fetch(`tasks.php?action=get_plan_detail&id=${this.taskId}`);
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            // ‡πÅ‡∏õ‡∏•‡∏á response ‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            const result = await response.json();
            if (!result.success) {
                throw new Error(result.error || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
            }

            // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô console ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug
            this.taskData = result.data;
            console.log('Plan data loaded:', this.taskData);
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô (‡∏õ‡∏¥‡∏î‡πÑ‡∏ß‡πâ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
            // if (this.taskData.Status !== 'completed') {
            //     throw new Error('‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡πÄ‡∏™‡∏£‡πá‡∏à ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÑ‡∏î‡πâ');
            // }

            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
            this.populateTaskData();
            this.showForm();
            
        } catch (error) {
            console.error('Load task data error:', error);
            this.showError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: ' + error.message);
        } finally {
            // ‡∏ã‡πà‡∏≠‡∏ô loading spinner ‡πÄ‡∏™‡∏°‡∏≠
            this.showLoading(false);
        }
    }

    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
     * - ‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å this.taskData ‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ
     * - ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô
     * - ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏≤‡∏Å TargetOutput
     * - ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ StandardRunRate (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
     */
    populateTaskData() {
        if (!this.taskData) return;

        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡πÉ‡∏ô header
        const taskInfoDisplay = document.getElementById('taskInfoDisplay');
        if (taskInfoDisplay) {
            const taskInfo = `‡∏á‡∏≤‡∏ô: ${this.taskData.ProductDisplayName || this.taskData.ProductName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} | ` +
                           `‡πÅ‡∏ú‡∏ô‡∏Å: ${this.taskData.DepartmentName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} | ` +
                           `‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£: ${this.taskData.MachineName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`;
            taskInfoDisplay.textContent = taskInfo;
        }

        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏¥‡∏ï‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å TargetOutput
        if (this.taskData.TargetOutput) {
            const totalPiecesEl = document.getElementById('totalPieces');
            if (totalPiecesEl) {
                totalPiecesEl.value = this.taskData.TargetOutput;
            }
        }

        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ standard run rate ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if (this.taskData.StandardRunRate) {
            const idealRunRateEl = document.getElementById('idealRunRate');
            if (idealRunRateEl) {
                idealRunRateEl.value = this.taskData.StandardRunRate;
            }
        }

        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ downtime ‡πÅ‡∏•‡∏∞ downtime reason ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        if (this.taskData.DowntimeMinutes) {
            const downtimeEl = document.getElementById('downtime');
            if (downtimeEl) {
                downtimeEl.value = this.taskData.DowntimeMinutes;
            }
        }
        if (this.taskData.DowntimeReason) {
            const downtimeDetailEl = document.getElementById('downtimeDetail');
            if (downtimeDetailEl) {
                downtimeDetailEl.value = this.taskData.DowntimeReason;
            }
        }

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡∏•‡∏¥‡∏ï‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô‡πÉ‡∏´‡∏°‡πà
        // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏ô setupEventListeners()
        this.updatePlannedProductionTime();
    }

    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡πÑ‡∏°‡πà‡πÄ‡∏ï‡∏¥‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà)
     * - ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô dropdown ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
     * - ‡πÑ‡∏°‡πà‡πÄ‡∏ï‡∏¥‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
     * - ‡πÑ‡∏°‡πà‡πÄ‡∏ï‡∏¥‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏≠‡∏á
     */
    fillCurrentStartDateTime() {
        console.log('üïê fillCurrentStartDateTime() called - ‡πÄ‡∏ï‡∏¥‡∏°‡πÅ‡∏Ñ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡πÑ‡∏°‡πà‡πÄ‡∏ï‡∏¥‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà)');
        const now = new Date();
        
        // ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô dropdown (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
        const currentHour = String(now.getHours()).padStart(2, '0');  // 00-23
        const currentMinute = String(now.getMinutes()).padStart(2, '0'); // 00-59
        
        console.log(`üïê Current time: ${currentHour}:${currentMinute} (24-hour format)`);
        
        // ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö elements ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        const startHourEl = document.getElementById('actualStartHour');
        const startMinuteEl = document.getElementById('actualStartMinute');
        
        console.log('üîç Start time elements found:', {
            startHourEl: !!startHourEl,
            startMinuteEl: !!startMinuteEl
        });
        
        // ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡πÑ‡∏°‡πà‡πÄ‡∏ï‡∏¥‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà)
        if (startHourEl && startMinuteEl) {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ dropdown ‡∏°‡∏µ options ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
            const startHourOptions = startHourEl.querySelectorAll('option');
            const startMinuteOptions = startMinuteEl.querySelectorAll('option');
            
            console.log(`üîç Start time dropdowns - Hour: ${startHourOptions.length} options, Minute: ${startMinuteOptions.length} options`);
            
            if (startHourOptions.length > 1 && startMinuteOptions.length > 1) {
                startHourEl.value = currentHour;
                startMinuteEl.value = currentMinute;
                
                console.log(`‚úÖ ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ${currentHour}:${currentMinute}`);
                
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
                if (startHourEl.value !== currentHour || startMinuteEl.value !== currentMinute) {
                    console.warn(`‚ö†Ô∏è Start time not set correctly. Expected: ${currentHour}:${currentMinute}, Actual: ${startHourEl.value}:${startMinuteEl.value}`);
                }
            } else {
                console.warn(`‚ö†Ô∏è Start time dropdowns not ready yet`);
            }
        } else {
            console.error('‚ùå Start time elements not found!');
        }
        
        console.log(`üéØ Auto-fill completed (TIME ONLY):
        - Time: ${currentHour}:${currentMinute} (‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
        - Date: ‡πÑ‡∏°‡πà‡πÄ‡∏ï‡∏¥‡∏° - ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á`);
        
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß)
        setTimeout(() => {
            console.log('üîÑ Triggering calculateTimes() after filling start time');
            this.calculateTimes();
        }, 100);
    }

    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° "‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô")
     * - ‡πÄ‡∏ï‡∏¥‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
     * - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
     */
    updateCurrentDateTime() {
        console.log('üïê updateCurrentDateTime() called - ‡πÄ‡∏ï‡∏¥‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô');
        const now = new Date();
        
        // ‡πÄ‡∏ï‡∏¥‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY-MM-DD ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö input type="date")
        const day = String(now.getDate()).padStart(2, '0');
        const month = String(now.getMonth() + 1).padStart(2, '0');
        const year = now.getFullYear();
        const currentDateForInput = `${year}-${month}-${day}`;  // YYYY-MM-DD ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö input
        
        // ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô dropdown (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
        const currentHour = String(now.getHours()).padStart(2, '0');  // 00-23
        const currentMinute = String(now.getMinutes()).padStart(2, '0'); // 00-59
        
        // ‡πÄ‡∏ï‡∏¥‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        const startDateEl = document.getElementById('actualStartDate');
        if (startDateEl) {
            startDateEl.value = currentDateForInput;
            console.log(`‚úÖ ‡πÄ‡∏ï‡∏¥‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ${currentDateForInput}`);
        }
        
        // ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        const startHourEl = document.getElementById('actualStartHour');
        const startMinuteEl = document.getElementById('actualStartMinute');
        if (startHourEl && startMinuteEl) {
            startHourEl.value = currentHour;
            startMinuteEl.value = currentMinute;
            console.log(`‚úÖ ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ${currentHour}:${currentMinute}`);
        }
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏ß‡∏•‡∏≤
        this.calculateTimes();
    }

    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡∏•‡∏¥‡∏ï‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô (Planned Production Time)
     * - ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ index (PlannedStartTime ‡πÅ‡∏•‡∏∞ PlannedEndTime)
     * - ‡∏´‡∏±‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô (60 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏±‡∏Å‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô)
     * - ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå plannedProductionTime
     */
    updatePlannedProductionTime() {
        if (!this.taskData || !this.taskData.PlannedStartTime || !this.taskData.PlannedEndTime) {
            const plannedProductionTimeEl = document.getElementById('plannedProductionTime');
            if (plannedProductionTimeEl) {
                plannedProductionTimeEl.value = '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô';
            }
            return;
        }

        // ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ index
        const plannedStartTime = new Date(this.taskData.PlannedStartTime);
        const plannedEndTime = new Date(this.taskData.PlannedEndTime);
        
        if (isNaN(plannedStartTime) || isNaN(plannedEndTime) || plannedEndTime <= plannedStartTime) {
            const plannedProductionTimeEl = document.getElementById('plannedProductionTime');
            if (plannedProductionTimeEl) {
                plannedProductionTimeEl.value = '‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
            }
            return;
        }
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô (‡∏ô‡∏≤‡∏ó‡∏µ)
        const diffMs = plannedEndTime - plannedStartTime;
        const plannedTotalMinutes = Math.floor(diffMs / (1000 * 60));
        
        // === ‡∏™‡∏π‡∏ï‡∏£‡πÉ‡∏´‡∏°‡πà: ‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß ===
        // Planned Production Time = ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô (‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å)
        const plannedProductionTime = plannedTotalMinutes;
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡∏¥‡∏î‡∏•‡∏ö)
        const plannedProductionTimeEl = document.getElementById('plannedProductionTime');
        if (plannedProductionTimeEl) {
            plannedProductionTimeEl.value = `${Math.max(0, plannedProductionTime)} ‡∏ô‡∏≤‡∏ó‡∏µ (‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô - ‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å)`;
        }
        
        console.log('Planned Production Time calculated from plan data (NEW FORMULA):', {
            plannedStartTime: this.taskData.PlannedStartTime,
            plannedEndTime: this.taskData.PlannedEndTime,
            plannedTotalMinutes,
            plannedProductionTime: plannedProductionTime, // ‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å
            note: '‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏´‡∏±‡∏Å‡∏ó‡∏µ‡πà Actual Run Time ‡πÅ‡∏ó‡∏ô'
        });
    }

    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Event Listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏•‡∏∞ input ‡∏ï‡πà‡∏≤‡∏á‡πÜ
     * - Form submission
     * - ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤
     * - ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å
     * - ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡πÇ‡∏≠‡∏ó‡∏µ
     * - ‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ï‡πà‡∏≤‡∏á‡πÜ
     */
    setupEventListeners() {
        try {
            console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Event Listeners...');
            
            // ‡πÄ‡∏ï‡∏¥‡∏° dropdown ‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô
            populateConfirmTimeDropdowns();
            console.log('‚úÖ Time dropdowns populated');
            
            // ‡∏£‡∏≠‡πÉ‡∏´‡πâ dropdown ‡∏û‡∏£‡πâ‡∏≠‡∏° ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô)
            setTimeout(() => {
                console.log('üïê Attempting to fill current start date time...');
                this.fillCurrentStartDateTime();
            }, 300);  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡πÄ‡∏õ‡πá‡∏ô 300ms ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ dropdown ‡∏û‡∏£‡πâ‡∏≠‡∏°
            
            // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
            const form = document.getElementById('emergencyStopForm');
            if (form) {
                form.addEventListener('submit', (e) => this.handleFormSubmit(e));
            } else {
                console.warn('Form element not found');
            }

            // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (dropdown)
            const timeDropdowns = [
                'actualStartHour', 'actualStartMinute', 'actualEndHour', 'actualEndMinute'
            ];
            
            timeDropdowns.forEach(id => {
                const element = document.getElementById(id);
                if (element) {
                    element.addEventListener('change', () => {
                        console.log(`‚è∞ Time dropdown changed: ${id} = ${element.value}`);
                        this.calculateTimes();
                    });
                    console.log(`‚úÖ Event listener added for: ${id}`);
                } else {
                    console.warn(`‚ùå Time dropdown element '${id}' not found`);
                }
            });
            
            // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
            const dateElements = ['actualStartDate', 'actualEndDate'];
            dateElements.forEach(id => {
                const element = document.getElementById(id);
                if (element) {
                    element.addEventListener('change', () => {
                        console.log(`üìÖ Date changed: ${id} = ${element.value}`);
                        this.calculateTimes();
                    });
                    console.log(`‚úÖ Event listener added for: ${id}`);
                } else {
                    console.warn(`‚ùå Element ${id} not found`);
                }
            });

        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö checkbox ‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å
        document.querySelectorAll('input[name="breakTime[]"]').forEach(checkbox => {
            checkbox.addEventListener('change', () => this.calculateBreakTime());
        });

        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö checkbox ‡πÇ‡∏≠‡∏ó‡∏µ (‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏ü‡∏¥‡∏•‡∏î‡πå overtime)
        document.getElementById('overtimeEnable')?.addEventListener('change', (e) => {
            const overtimeInput = document.getElementById('overtime');
            if (overtimeInput) {
                overtimeInput.disabled = !e.target.checked;  // ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                if (!e.target.checked) {
                    overtimeInput.value = '';  // ‡∏•‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î
                }
            }
            this.calculateTimes();  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà
        });

        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
        document.getElementById('overtime')?.addEventListener('input', () => this.calculateTimes());
        document.getElementById('downtime')?.addEventListener('input', () => this.calculateTimes());
        document.getElementById('idealRunRate')?.addEventListener('input', () => this.calculatePerformance());
        document.getElementById('totalPieces')?.addEventListener('input', () => this.calculatePerformance());
        document.getElementById('rejectPieces')?.addEventListener('input', () => this.calculateQuality());

        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö checkbox ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Å‡∏∞ (10 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
        document.getElementById('shiftLength8h')?.addEventListener('change', () => this.calculateTimes());

        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° "‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô" (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        const currentTimeBtn = document.getElementById('useCurrentTimeBtn');
        if (currentTimeBtn) {
            currentTimeBtn.addEventListener('click', (e) => {
                e.preventDefault();
                this.updateCurrentDateTime();
                console.log('üïê ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô');
            });
        }

        // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        const confirmFooter = document.getElementById('confirmFooter');
        if (confirmFooter) {
            confirmFooter.style.display = 'block';
        }
        
        console.log('‚úÖ Event listeners setup complete');
        
        } catch (error) {
            console.error('Error setting up event listeners:', error);
            this.showToast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà', 'danger');
        }
    }

    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
     * ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
     */
    initializeCalculations() {
        try {
            console.log('üîÑ initializeCalculations() called');
            this.calculateBreakTime();     // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å
            this.calculateTimes();         // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ
            this.calculatePerformance();   // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Performance
            this.calculateQuality();       // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Quality
            console.log('‚úÖ initializeCalculations() completed');
        } catch (error) {
            console.error('‚ùå Error in initializeCalculations:', error);
        }
    }

    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏£‡∏ß‡∏°
     * - ‡∏£‡∏ß‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏à‡∏≤‡∏Å checkbox ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ
     * - ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡∏ß‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å
     * - ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏´‡∏°‡πà
     */
    calculateBreakTime() {
        try {
            let totalBreakMinutes = 0;
            
            // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á (‡∏ô‡∏≤‡∏ó‡∏µ)
            const breakTimes = {
                'morning': 15,   // ‡∏û‡∏±‡∏Å‡πÄ‡∏ä‡πâ‡∏≤ 15 ‡∏ô‡∏≤‡∏ó‡∏µ
                'lunch': 60,     // ‡∏û‡∏±‡∏Å‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô 60 ‡∏ô‡∏≤‡∏ó‡∏µ  
                'evening': 15    // ‡∏û‡∏±‡∏Å‡πÄ‡∏¢‡πá‡∏ô 15 ‡∏ô‡∏≤‡∏ó‡∏µ
            };

            // ‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏à‡∏≤‡∏Å checkbox ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            document.querySelectorAll('input[name="breakTime[]"]:checked').forEach(checkbox => {
                totalBreakMinutes += breakTimes[checkbox.value] || 0;
            });

            // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡∏ß‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å
            const breakTotalMinutesEl = document.getElementById('breakTotalMinutes');
            if (breakTotalMinutesEl) {
                breakTotalMinutesEl.textContent = totalBreakMinutes;
            }
            
            // ‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô alert ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏£‡∏ß‡∏°
            const breakTotalDisplayEl = document.getElementById('breakTotalDisplay');
            if (breakTotalDisplayEl) {
                breakTotalDisplayEl.style.display = totalBreakMinutes > 0 ? 'block' : 'none';
            }

            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏´‡∏°‡πà
            this.calculateTimes();
        } catch (error) {
            console.error('Error in calculateBreakTime:', error);
        }
    }

    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OEE
     * - ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡∏ß‡∏° (Total Minutes)
     * - ‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å (Break Minutes) 
     * - ‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏≠‡∏ó‡∏µ (Overtime Minutes)
     * - ‡πÄ‡∏ß‡∏•‡∏≤ downtime
     * - ‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡∏•‡∏¥‡∏ï‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô (Planned Production Time)
     * - ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á (Operating Time/Run Time)
     */
    calculateTimes() {
        console.log('üîÑ calculateTimes() called');
        
        // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å dropdown ‡πÅ‡∏ó‡∏ô input type="time"
        const startDateInput = document.getElementById('actualStartDate');
        const endDateInput = document.getElementById('actualEndDate');
        
        console.log('üìÖ Date inputs:', {
            startDateInput: startDateInput ? startDateInput.value : 'not found',
            endDateInput: endDateInput ? endDateInput.value : 'not found'
        });
        
        // ‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å dropdown
        const actualStartTime = getConfirmTimeValue('actualStartHour', 'actualStartMinute');
        const actualEndTime = getConfirmTimeValue('actualEndHour', 'actualEndMinute');
        
        console.log('‚è∞ Time values:', {
            actualStartTime,
            actualEndTime
        });
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ elements ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (!startDateInput || !endDateInput || !actualStartTime || !actualEndTime ||
            !startDateInput.value || !endDateInput.value) {
            console.log('‚ö†Ô∏è Missing date/time data, clearing fields');
            const operatingTimeEl = document.getElementById('operatingTime');
            const netRunTimeEl = document.getElementById('netRunTime');
            
            if (operatingTimeEl) operatingTimeEl.value = '';
            if (netRunTimeEl) netRunTimeEl.value = '';
            return;
        }

        console.log('‚úÖ All date/time data available, proceeding with calculation');

        // ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å YYYY-MM-DD ‡πÄ‡∏õ‡πá‡∏ô DD/MM/YYYY ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô isValidTimeRange()
        const startDateFormatted = convertDateFormat(startDateInput.value);
        const endDateFormatted = convertDateFormat(endDateInput.value);
        
        console.log('üìÖ Converted date formats:', {
            startDateOriginal: startDateInput.value,
            startDateFormatted,
            endDateOriginal: endDateInput.value,
            endDateFormatted
        });

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
        if (!isValidTimeRange(startDateFormatted, actualStartTime, endDateFormatted, actualEndTime)) {
            console.log('‚ùå Invalid time range detected');
            const operatingTimeEl = document.getElementById('operatingTime');
            if (operatingTimeEl) {
                operatingTimeEl.value = '‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
            }
            return;
        }

        console.log('‚úÖ Time range validation passed');

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á DateTime object ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì (‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å input type="date" ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á)
        const [startYear, startMonth, startDay] = startDateInput.value.split('-');  // YYYY-MM-DD
        const [startHour, startMinute] = actualStartTime.split(':');
        const startTime = new Date(parseInt(startYear), parseInt(startMonth) - 1, parseInt(startDay), parseInt(startHour), parseInt(startMinute));
        
        const [endYear, endMonth, endDay] = endDateInput.value.split('-');  // YYYY-MM-DD
        const [endHour, endMinute] = actualEndTime.split(':');
        const endTime = new Date(parseInt(endYear), parseInt(endMonth) - 1, parseInt(endDay), parseInt(endHour), parseInt(endMinute));

        console.log('üìÖ DateTime objects created:', {
            startTime: startTime.toLocaleString('th-TH'),
            endTime: endTime.toLocaleString('th-TH'),
            isValidStart: !isNaN(startTime.getTime()),
            isValidEnd: !isNaN(endTime.getTime())
        });

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á DateTime objects
        if (isNaN(startTime.getTime()) || isNaN(endTime.getTime())) {
            console.error('‚ùå Invalid DateTime objects created in calculateTimes()');
            const operatingTimeEl = document.getElementById('operatingTime');
            if (operatingTimeEl) {
                operatingTimeEl.value = '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
            }
            return;
        }

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡∏ß‡∏° (‡∏ô‡∏≤‡∏ó‡∏µ)
        const totalMinutes = Math.floor((endTime - startTime) / (1000 * 60));
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏£‡∏ß‡∏°
        let breakMinutes = 0;
        document.querySelectorAll('input[name="breakTime[]"]:checked').forEach(checkbox => {
            const breakTimes = { 'morning': 15, 'lunch': 60, 'evening': 15 };
            breakMinutes += breakTimes[checkbox.value] || 0;
        });

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏≠‡∏ó‡∏µ
        let overtimeMinutes = 0;
        if (document.getElementById('overtimeEnable')?.checked) {
            overtimeMinutes = parseInt(document.getElementById('overtime')?.value || '0');
        }

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤ downtime
        const downtimeMinutes = parseInt(document.getElementById('downtime')?.value || '0');

        // === ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≤‡∏°‡∏™‡∏π‡∏ï‡∏£‡πÉ‡∏´‡∏°‡πà ===
        // Actual Run Time = ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á - ‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏à‡∏£‡∏¥‡∏á - Downtime
        const actualRunTime = totalMinutes - breakMinutes - downtimeMinutes;
        
        console.log(`üìä calculateTimes() - ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤:
        - ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á: ${totalMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ
        - ‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏à‡∏£‡∏¥‡∏á: ${breakMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ  
        - Downtime: ${downtimeMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ
        - Actual Run Time: ${actualRunTime} ‡∏ô‡∏≤‡∏ó‡∏µ`);
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ (‡πÉ‡∏ä‡πâ Actual Run Time)
        const operatingTimeEl = document.getElementById('operatingTime');
        const netRunTimeEl = document.getElementById('netRunTime');
        
        console.log('üîç Debug elements found:', {
            operatingTimeEl: !!operatingTimeEl,
            netRunTimeEl: !!netRunTimeEl,
            actualRunTime: actualRunTime,
            operatingTimeElHTML: operatingTimeEl ? operatingTimeEl.outerHTML.substring(0, 100) : 'NOT FOUND',
            netRunTimeElHTML: netRunTimeEl ? netRunTimeEl.outerHTML.substring(0, 100) : 'NOT FOUND'
        });
        
        if (operatingTimeEl) {
            const newValue = `${Math.max(0, actualRunTime)} ‡∏ô‡∏≤‡∏ó‡∏µ`;
            operatingTimeEl.value = newValue;
            console.log('‚úÖ operatingTime updated to:', newValue);
            console.log('üîç operatingTime after update:', operatingTimeEl.value);
        } else {
            console.error('‚ùå operatingTime element not found in DOM!');
            console.log('üîç All input elements with id containing "operating":', 
                Array.from(document.querySelectorAll('input[id*="operating"]')).map(el => el.id));
        }
        
        if (netRunTimeEl) {
            const newValue = `${Math.max(0, actualRunTime)} ‡∏ô‡∏≤‡∏ó‡∏µ`;
            netRunTimeEl.value = newValue;
            console.log('‚úÖ netRunTime updated to:', newValue);
            console.log('üîç netRunTime after update:', netRunTimeEl.value);
        } else {
            console.error('‚ùå netRunTime element not found in DOM!');
            console.log('üîç All input elements with id containing "run":', 
                Array.from(document.querySelectorAll('input[id*="run"]')).map(el => el.id));
        }

        // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏∞‡∏ó‡∏µ‡πà‡∏°‡∏µ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•) - ‡∏Å‡∏∞ 10 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        const shiftMinutes = document.getElementById('shiftLength8h')?.checked ? 600 : 0;  // 10 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        const availableTime = shiftMinutes + overtimeMinutes;
        
        const shiftDisplay = document.getElementById('shiftAvailableTimeDisplay');
        const shiftText = document.getElementById('shiftAvailableTimeText');
        if (shiftDisplay && shiftText) {
            shiftText.textContent = `${availableTime} ‡∏ô‡∏≤‡∏ó‡∏µ`;
            shiftDisplay.style.display = 'block';
        }

        // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á
        const actualDurationTextEl = document.getElementById('actualDurationText');
        const actualDurationDisplayEl = document.getElementById('actualDurationDisplay');
        
        if (actualDurationTextEl) {
            actualDurationTextEl.textContent = `${totalMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ`;
        }
        if (actualDurationDisplayEl) {
            actualDurationDisplayEl.style.display = 'block';
        }

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OEE ‡πÉ‡∏´‡∏°‡πà
        this.calculateOEE();
    }

    calculatePerformance() {
        try {
            console.log('üîÑ calculatePerformance() called');
            const idealRate = parseFloat(document.getElementById('idealRunRate')?.value || '0');
            const totalPieces = parseInt(document.getElementById('totalPieces')?.value || '0');
            const netRunTimeEl = document.getElementById('netRunTime');
            const netRunTimeText = netRunTimeEl?.value || '';
            
            console.log('üîç Performance calculation inputs:', {
                idealRate,
                totalPieces,
                netRunTimeEl: !!netRunTimeEl,
                netRunTimeText
            });
            
            const netRunTimeMatch = netRunTimeText.match(/(\d+)/);
            const netRunTimeMinutes = netRunTimeMatch ? parseInt(netRunTimeMatch[1]) : 0;

            console.log('üîç Performance calculation values:', {
                netRunTimeMinutes,
                canCalculate: netRunTimeMinutes > 0 && totalPieces > 0
            });

            if (netRunTimeMinutes > 0 && totalPieces > 0) {
                const actualRate = totalPieces / netRunTimeMinutes;
                const actualRunRateEl = document.getElementById('actualRunRate');
                
                console.log('üîç actualRunRate element found:', !!actualRunRateEl);
                console.log('üîç Calculated actualRate:', actualRate);
                
                if (actualRunRateEl) {
                    const newValue = `${actualRate.toFixed(2)} ‡∏ä‡∏¥‡πâ‡∏ô/‡∏ô‡∏≤‡∏ó‡∏µ`;
                    actualRunRateEl.value = newValue;
                    console.log('‚úÖ actualRunRate updated to:', newValue);
                    console.log('üîç actualRunRate after update:', actualRunRateEl.value);
                } else {
                    console.error('‚ùå actualRunRate element not found in DOM!');
                    console.log('üîç All input elements with id containing "rate":', 
                        Array.from(document.querySelectorAll('input[id*="rate"]')).map(el => el.id));
                }
            } else {
                const actualRunRateEl = document.getElementById('actualRunRate');
                if (actualRunRateEl) {
                    actualRunRateEl.value = '';
                    console.log('‚ö†Ô∏è actualRunRate cleared (insufficient data)');
                } else {
                    console.error('‚ùå actualRunRate element not found in DOM!');
                }
            }

            this.calculateQuality();
        } catch (error) {
            console.error('Error in calculatePerformance:', error);
        }
    }

    calculateQuality() {
        try {
            const totalPieces = parseInt(document.getElementById('totalPieces')?.value || '0');
            const rejectPieces = parseInt(document.getElementById('rejectPieces')?.value || '0');
            
            const goodPieces = Math.max(0, totalPieces - rejectPieces);
            const goodPiecesEl = document.getElementById('goodPieces');
            if (goodPiecesEl) {
                goodPiecesEl.value = goodPieces;
            }

            this.calculateOEE();
        } catch (error) {
            console.error('Error in calculateQuality:', error);
        }
    }

    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤ OEE (Overall Equipment Effectiveness) - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡∏°‡πà
     * 
     * ‡∏™‡∏π‡∏ï‡∏£‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OEE ‡πÉ‡∏´‡∏°‡πà:
     * OEE = Availability √ó Performance √ó Quality (‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢ 10,000 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå)
     * 
     * ‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡πà:
     * - Availability = (Actual Run Time / Planned Production Time) √ó 100
     * - Performance = (Total Count / (Actual Run Time √ó Ideal Run Rate)) √ó 100  
     * - Quality = (Good Pieces / Total Pieces) √ó 100
     * 
     * ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:
     * - Planned Production Time = ‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô (‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å)
     * - Actual Run Time = ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á - ‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏à‡∏£‡∏¥‡∏á - Downtime
     * - Good Pieces = Total Pieces - Reject Pieces
     */
    calculateOEE() {
        try {
            // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÉ‡∏ä‡πâ dropdown ‡πÅ‡∏ó‡∏ô input type="time"
            const startDateInput = document.getElementById('actualStartDate')?.value;
            const endDateInput = document.getElementById('actualEndDate')?.value;
            
            // ‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å dropdown
            const actualStartTime = getConfirmTimeValue('actualStartHour', 'actualStartMinute');
            const actualEndTime = getConfirmTimeValue('actualEndHour', 'actualEndMinute');
            
            const idealRate = parseFloat(document.getElementById('idealRunRate')?.value || '0');
            const totalPieces = parseInt(document.getElementById('totalPieces')?.value || '0');
            const rejectPieces = parseInt(document.getElementById('rejectPieces')?.value || '0');
            const downtimeMinutes = parseInt(document.getElementById('downtime')?.value || '0');

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
            if (!startDateInput || !endDateInput || !actualStartTime || !actualEndTime || idealRate <= 0 || totalPieces <= 0) {
                this.resetOEEDisplay();
                return;
            }

            // ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô isValidTimeRange()
            const startDateFormatted = convertDateFormat(startDateInput);
            const endDateFormatted = convertDateFormat(endDateInput);

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
            if (!isValidTimeRange(startDateFormatted, actualStartTime, endDateFormatted, actualEndTime)) {
                this.resetOEEDisplay();
                return;
            }

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á DateTime object ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì (‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å input type="date" ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á)
            const [startYear, startMonth, startDay] = startDateInput.split('-');  // YYYY-MM-DD
            const [startHour, startMinute] = actualStartTime.split(':');
            const startTime = new Date(parseInt(startYear), parseInt(startMonth) - 1, parseInt(startDay), parseInt(startHour), parseInt(startMinute));
            
            const [endYear, endMonth, endDay] = endDateInput.split('-');  // YYYY-MM-DD
            const [endHour, endMinute] = actualEndTime.split(':');
            const endTime = new Date(parseInt(endYear), parseInt(endMonth) - 1, parseInt(endDay), parseInt(endHour), parseInt(endMinute));
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á DateTime objects
            if (isNaN(startTime.getTime()) || isNaN(endTime.getTime())) {
                console.error('‚ùå Invalid DateTime objects in calculateOEE()');
                this.resetOEEDisplay();
                return;
            }
            
            const totalMinutes = Math.floor((endTime - startTime) / (1000 * 60));

            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏£‡∏ß‡∏°
            let breakMinutes = 0;
            document.querySelectorAll('input[name="breakTime[]"]:checked').forEach(checkbox => {
                const breakTimes = { 'morning': 15, 'lunch': 60, 'evening': 15 };
                breakMinutes += breakTimes[checkbox.value] || 0;
            });

            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏≠‡∏ó‡∏µ
            let overtimeMinutes = 0;
            if (document.getElementById('overtimeEnable')?.checked) {
                overtimeMinutes = parseInt(document.getElementById('overtime')?.value || '0');
            }

            // === ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Planned Production Time ‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô (‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å) ===
            let plannedProductionTime = 0;
            if (this.taskData && this.taskData.PlannedStartTime && this.taskData.PlannedEndTime) {
                const plannedStartTime = new Date(this.taskData.PlannedStartTime);
                const plannedEndTime = new Date(this.taskData.PlannedEndTime);
                const plannedTotalMinutes = Math.floor((plannedEndTime - plannedStartTime) / (1000 * 60));
                // ‚úÖ ‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß - ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô
                plannedProductionTime = plannedTotalMinutes;
                console.log(`üìä Planned Production Time ‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô (‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å): ${plannedProductionTime} ‡∏ô‡∏≤‡∏ó‡∏µ`);
            } else {
                // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏¥‡∏°
                plannedProductionTime = totalMinutes;
                console.log(`‚ö†Ô∏è ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏õ‡πá‡∏ô Planned Production Time: ${plannedProductionTime} ‡∏ô‡∏≤‡∏ó‡∏µ`);
            }
            
            // === ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Actual Run Time (‡∏´‡∏±‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà) ===
            // Actual Run Time = ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á - ‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏à‡∏£‡∏¥‡∏á - Downtime
            const actualRunTime = totalMinutes - breakMinutes - downtimeMinutes;
            
            console.log(`üìä ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà:
            - ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á: ${totalMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ
            - ‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏à‡∏£‡∏¥‡∏á: ${breakMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ  
            - Downtime: ${downtimeMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ
            - Actual Run Time: ${actualRunTime} ‡∏ô‡∏≤‡∏ó‡∏µ
            - Planned Production Time: ${plannedProductionTime} ‡∏ô‡∏≤‡∏ó‡∏µ (‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å)`);

            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á OEE ‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏π‡∏ï‡∏£‡πÉ‡∏´‡∏°‡πà
            // ‚úÖ Availability = (Actual Run Time / Planned Production Time) √ó 100
            const availability = plannedProductionTime > 0 ? (actualRunTime / plannedProductionTime) * 100 : 0;
            
            // ‚úÖ Performance = (Total Count / (Actual Run Time √ó Ideal Run Rate)) √ó 100
            const theoreticalMaxCount = actualRunTime * idealRate; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ú‡∏•‡∏¥‡∏ï‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
            const performance = theoreticalMaxCount > 0 ? (totalPieces / theoreticalMaxCount) * 100 : 0;
            
            // Quality = Good Pieces / Total Pieces √ó 100
            const goodPieces = totalPieces - rejectPieces;
            const quality = totalPieces > 0 ? (goodPieces / totalPieces) * 100 : 0;

            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OEE ‡∏£‡∏ß‡∏° = (Availability √ó Performance √ó Quality) / 10,000
            const oeeTotal = (availability * performance * quality) / 10000;

            console.log(`üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OEE ‡πÉ‡∏´‡∏°‡πà:
            - Availability: ${availability.toFixed(2)}% (${actualRunTime}/${plannedProductionTime})
            - Performance: ${performance.toFixed(2)}% (${totalPieces}/${theoreticalMaxCount.toFixed(1)})
            - Quality: ${quality.toFixed(2)}% (${goodPieces}/${totalPieces})
            - OEE Total: ${oeeTotal.toFixed(2)}%`);

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
            this.updateOEEDisplay(availability, performance, quality, oeeTotal);

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
            const actualRunRateEl = document.getElementById('actualRunRate');
            if (actualRunRateEl && actualRunTime > 0) {
                const actualRunRate = totalPieces / actualRunTime;
                actualRunRateEl.value = `${actualRunRate.toFixed(2)} ‡∏ä‡∏¥‡πâ‡∏ô/‡∏ô‡∏≤‡∏ó‡∏µ`;
            }

            const operatingTimeEl = document.getElementById('operatingTime');
            if (operatingTimeEl) {
                const newValue = `${Math.max(0, actualRunTime)} ‡∏ô‡∏≤‡∏ó‡∏µ`;
                operatingTimeEl.value = newValue;
                console.log('üîÑ calculateOEE() - operatingTime updated to:', newValue);
            } else {
                console.error('‚ùå calculateOEE() - operatingTime element not found!');
            }

            const netRunTimeEl = document.getElementById('netRunTime');
            if (netRunTimeEl) {
                const newValue = `${Math.max(0, actualRunTime)} ‡∏ô‡∏≤‡∏ó‡∏µ`;
                netRunTimeEl.value = newValue;
                console.log('üîÑ calculateOEE() - netRunTime updated to:', newValue);
            } else {
                console.error('‚ùå calculateOEE() - netRunTime element not found!');
            }

        } catch (error) {
            console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OEE:', error);
            this.resetOEEDisplay();
        }
    }

    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ñ‡πà‡∏≤ OEE
     * 
     * @param {number} availability - ‡∏Ñ‡πà‡∏≤ Availability (%)
     * @param {number} performance - ‡∏Ñ‡πà‡∏≤ Performance (%)
     * @param {number} quality - ‡∏Ñ‡πà‡∏≤ Quality (%)
     * @param {number} oeeTotal - ‡∏Ñ‡πà‡∏≤ OEE ‡∏£‡∏ß‡∏° (%)
     */
    updateOEEDisplay(availability, performance, quality, oeeTotal) {
        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 0-100%)
        const formatPercent = (value) => `${Math.round(Math.max(0, Math.min(100, value)))}%`;
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        document.getElementById('oeeAvailability').textContent = formatPercent(availability);
        document.getElementById('oeePerformance').textContent = formatPercent(performance);
        document.getElementById('oeeQuality').textContent = formatPercent(quality);
        document.getElementById('oeeTotal').textContent = formatPercent(oeeTotal);

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏µ‡∏Ç‡∏≠‡∏á badge ‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
        this.updateBadgeColor('oeeAvailability', availability);
        this.updateBadgeColor('oeePerformance', performance);
        this.updateBadgeColor('oeeQuality', quality);
        this.updateBadgeColor('oeeTotal', oeeTotal);
    }

    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏µ‡∏Ç‡∏≠‡∏á badge ‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå
     * 
     * @param {string} elementId - ID ‡∏Ç‡∏≠‡∏á element ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ
     * @param {number} value - ‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ
     * 
     * ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô OEE:
     * - ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß (success): >= 85% = ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏° (World Class)
     * - ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô (info): 75-84% = ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏î‡∏µ (Good)  
     * - ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á (warning): 60-74% = ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (Average)
     * - ‡πÅ‡∏î‡∏á (danger): < 60% = ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏≤‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏ (Needs Improvement)
     */
    updateBadgeColor(elementId, value) {
        const element = document.getElementById(elementId);
        if (!element) return;

        // ‡∏•‡∏ö‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏µ‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å
        element.className = element.className.replace(/bg-\w+/g, '');
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏µ‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
        if (value >= 85) {
            element.classList.add('bg-success');      // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß - ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏° (World Class OEE)
        } else if (value >= 75) {
            element.classList.add('bg-info');         // ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô - ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏î‡∏µ (Good OEE)
        } else if (value >= 60) {
            element.classList.add('bg-warning');      // ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á - ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (Average OEE)
        } else {
            element.classList.add('bg-danger');       // ‡πÅ‡∏î‡∏á - ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏≤‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏
        }
    }

    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• OEE ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
     * - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ "-" ‡πÅ‡∏ó‡∏ô‡∏Ñ‡πà‡∏≤
     * - ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏ó‡∏≤ (secondary)
     */
    resetOEEDisplay() {
        ['oeeAvailability', 'oeePerformance', 'oeeQuality', 'oeeTotal'].forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                element.textContent = '-';
                element.className = element.className.replace(/bg-\w+/g, '') + ' bg-secondary';
            }
        });
    }

    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
     * - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
     * - ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
     * - ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
     * - ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
     * 
     * @param {Event} event - event object ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
     */
    async handleFormSubmit(event) {
        event.preventDefault();
        
        console.log('=== FORM SUBMIT DEBUG ===');
        console.log('Form submit started...');
        console.log('Current taskId:', this.taskId);
        console.log('Task data:', this.taskData);
        console.log('IsLoading:', this.isLoading);
        
        // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ã‡πâ‡∏≥‡∏Ç‡∏ì‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
        if (this.isLoading) {
            console.log('Already loading, skipping...');
            return;
        }

        try {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
            console.log('Validating form...');
            if (!this.validateForm()) {
                console.log('Form validation failed');
                return;
            }

            console.log('Form validation passed');
            this.isLoading = true;
            this.showLoading(true);

            // ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
            console.log('Collecting form data...');
            const formData = this.collectFormData();
            console.log('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• OEE:', formData);
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö PlanID ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
            if (!formData.PlanID || formData.PlanID <= 0) {
                throw new Error(`PlanID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${formData.PlanID}, taskId: ${this.taskId}`);
            }
            
            console.log('PlanID validated:', formData.PlanID);

            // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á backend API (‡πÉ‡∏ä‡πâ endpoint ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà)
            console.log('=== DEBUG: Form Data ===');
            console.log('PlanID:', formData.PlanID, 'Type:', typeof formData.PlanID);
            console.log('Full Form Data:', JSON.stringify(formData, null, 2));
            console.log('========================');
            
            const response = await fetch('tasks.php?action=save_production_result', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(formData)
            });

            console.log('Response status:', response.status);
            console.log('Response headers:', Object.fromEntries(response.headers.entries()));
            
            // ‡∏≠‡πà‡∏≤‡∏ô response ‡πÄ‡∏õ‡πá‡∏ô text ‡∏Å‡πà‡∏≠‡∏ô
            const responseText = await response.text();
            console.log('Raw response text:', responseText);
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
            if (!response.ok) {
                console.error('HTTP Error:', response.status, response.statusText);
                console.error('Response body:', responseText);
                throw new Error(`HTTP ${response.status}: ${response.statusText} - ${responseText.substring(0, 200)}`);
            }

            // Parse JSON response
            let result;
            try {
                result = JSON.parse(responseText);
            } catch (parseError) {
                console.error('JSON Parse Error:', parseError);
                throw new Error('Invalid JSON response: ' + responseText.substring(0, 100));
            }
            
            console.log('Parsed response:', result);
            
            if (!result.success) {
                throw new Error(result.error || '‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
            }

            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            this.showToast('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', 'success');
            
            // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
            setTimeout(() => {
                window.location.href = 'index.html';
            }, 2000);

        } catch (error) {
            console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°:', error);
            console.error('Error details:', {
                message: error.message,
                stack: error.stack,
                taskId: this.taskId,
                formElements: {
                    startDate: document.getElementById('actualStartDate')?.value,
                    startTime: document.getElementById('actualStartTime')?.value,
                    endDate: document.getElementById('actualEndDate')?.value,
                    endTime: document.getElementById('actualEndTime')?.value
                }
            });
            
            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á
            let errorMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
            
            if (error.message.includes('taskId')) {
                errorMessage = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á';
            } else if (error.message.includes('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà') || error.message.includes('‡πÄ‡∏ß‡∏•‡∏≤')) {
                errorMessage = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
            } else if (error.message.includes('‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢')) {
                errorMessage = '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏¥‡∏ï‡∏£‡∏ß‡∏°';
            } else if (error.message.includes('HTTP')) {
                errorMessage = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á';
            } else if (error.message.includes('JSON')) {
                errorMessage = '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö';
            }
            
            this.showToast(errorMessage, 'danger');
        } finally {
            this.isLoading = false;
            this.showLoading(false);
        }
    }

    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
     * 
     * @returns {boolean} true ‡∏´‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á, false ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
     */
    validateForm() {
        const form = document.getElementById('emergencyStopForm');
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö HTML5 validation
        if (!form.checkValidity()) {
            form.classList.add('was-validated');
            this.showToast('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô', 'warning');
            return false;
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î ‡πÉ‡∏ä‡πâ dropdown ‡πÅ‡∏ó‡∏ô input type="time"
        const startDateInput = document.getElementById('actualStartDate');
        const endDateInput = document.getElementById('actualEndDate');
        
        // ‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å dropdown
        const actualStartTime = getConfirmTimeValue('actualStartHour', 'actualStartMinute');
        const actualEndTime = getConfirmTimeValue('actualEndHour', 'actualEndMinute');
        
        if (!startDateInput || !endDateInput) {
            this.showToast('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà', 'danger');
            return false;
        }
        
        if (!startDateInput.value || !endDateInput.value || !actualStartTime || !actualEndTime) {
            this.showToast('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô', 'warning');
            return false;
        }
        
        // ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô isValidTimeRange()
        const startDateFormatted = convertDateFormat(startDateInput.value);
        const endDateFormatted = convertDateFormat(endDateInput.value);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
        if (!isValidTimeRange(startDateFormatted, actualStartTime, endDateFormatted, actualEndTime)) {
            this.showToast('‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô', 'warning');
            return false;
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏¥‡∏ï‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢
        const totalPiecesEl = document.getElementById('totalPieces');
        const rejectPiecesEl = document.getElementById('rejectPieces');
        
        if (!totalPiecesEl || !rejectPiecesEl) {
            this.showToast('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏¥‡∏ï ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà', 'danger');
            return false;
        }
        
        const totalPieces = parseInt(totalPiecesEl.value || '0');
        const rejectPieces = parseInt(rejectPiecesEl.value || '0');
        
        if (rejectPieces > totalPieces) {
            this.showToast('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏¥‡∏ï‡∏£‡∏ß‡∏°‡πÑ‡∏î‡πâ', 'warning');
            return false;
        }

        return true;
    }

    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
     * 
     * ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á ProductionResults:
     * - PlanID: ID ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô
     * - BreakMorningMinutes/BreakLunchMinutes/BreakEveningMinutes: ‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á
     * - StandardRunRate: ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
     * - GoodQuantity: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏¥‡∏ï‡∏î‡∏µ
     * - DowntimeMinutes: ‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
     * - PlannedWorkMinutes: ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô
     * - ActiveWorkMinutes: ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á
     * - OEE_Overall: OEE ‡∏£‡∏ß‡∏°
     * - ActualRunRate, WorkingHours, TotalBreakMinutes, DowntimeReason: ‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
     * 
     * @returns {Object} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á ProductionResults
     */
    collectFormData() {
        console.log('=== collectFormData() STARTED ===');
        console.log('Current taskId:', this.taskId, 'Type:', typeof this.taskId);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö taskId ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏∑‡πà‡∏ô
        if (!this.taskId) {
            throw new Error('taskId ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö URL parameter');
        }
        
        try {
            console.log('Step 1: Getting date/time elements...');
            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤ OEE ‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÅ‡∏¢‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
            const startDateInput = document.getElementById('actualStartDate');
            const endDateInput = document.getElementById('actualEndDate');
            
            // ‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å dropdown ‡πÅ‡∏ó‡∏ô input type="time"
            const actualStartTime = getConfirmTimeValue('actualStartHour', 'actualStartMinute');
            const actualEndTime = getConfirmTimeValue('actualEndHour', 'actualEndMinute');
            
            console.log('Date/Time elements:', { 
                startDateInput: startDateInput ? startDateInput.value : 'not found', 
                endDateInput: endDateInput ? endDateInput.value : 'not found', 
                actualStartTime, 
                actualEndTime 
            });
            
            if (!startDateInput || !endDateInput || !actualStartTime || !actualEndTime) {
                throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
            }
            
            // ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å YYYY-MM-DD ‡πÄ‡∏õ‡πá‡∏ô DD/MM/YYYY ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô isValidTimeRange()
            const startDateFormatted = convertDateFormat(startDateInput.value);
            const endDateFormatted = convertDateFormat(endDateInput.value);
            
            console.log('Converted date formats for validation:', {
                startDateOriginal: startDateInput.value,
                startDateFormatted,
                endDateOriginal: endDateInput.value,
                endDateFormatted
            });
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            if (!isValidTimeRange(startDateFormatted, actualStartTime, endDateFormatted, actualEndTime)) {
                throw new Error('‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô');
            }
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á DateTime ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì (‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å input type="date" ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á)
            const [startYear, startMonth, startDay] = startDateInput.value.split('-');  // YYYY-MM-DD
            const [startHour, startMinute] = actualStartTime.split(':');
            const startTime = new Date(parseInt(startYear), parseInt(startMonth) - 1, parseInt(startDay), parseInt(startHour), parseInt(startMinute));
            
            const [endYear, endMonth, endDay] = endDateInput.value.split('-');  // YYYY-MM-DD
            const [endHour, endMinute] = actualEndTime.split(':');
            const endTime = new Date(parseInt(endYear), parseInt(endMonth) - 1, parseInt(endDay), parseInt(endHour), parseInt(endMinute));
            
            const totalMinutes = Math.floor((endTime - startTime) / (1000 * 60));
            
            console.log('Step 2: Time calculation completed:', { 
                startTime: startTime.toLocaleString('th-TH'), 
                endTime: endTime.toLocaleString('th-TH'), 
                totalMinutes 
            });

        console.log('Step 3: Calculating break times...');
        // Break time calculation - ‡πÅ‡∏¢‡∏Å‡πÄ‡∏õ‡πá‡∏ô 3 ‡∏ä‡πà‡∏ß‡∏á
        let breakMorning = 0;
        let breakLunch = 0;
        let breakEvening = 0;
        
        document.querySelectorAll('input[name="breakTime[]"]:checked').forEach(checkbox => {
            const breakTimes = { 'morning': 15, 'lunch': 60, 'evening': 15 };
            if (checkbox.value === 'morning') breakMorning = breakTimes[checkbox.value];
            if (checkbox.value === 'lunch') breakLunch = breakTimes[checkbox.value];
            if (checkbox.value === 'evening') breakEvening = breakTimes[checkbox.value];
        });

        const totalBreakMinutes = breakMorning + breakLunch + breakEvening;
        console.log('Step 4: Break times calculated:', { breakMorning, breakLunch, breakEvening, totalBreakMinutes });

        console.log('Step 5: Calculating overtime...');
        // Calculate overtime
        let overtimeMinutes = 0;
        if (document.getElementById('overtimeEnable')?.checked) {
            overtimeMinutes = parseInt(document.getElementById('overtime')?.value || '0');
        }

        const downtimeMinutes = parseInt(document.getElementById('downtime')?.value || '0');
        const downtimeReason = document.getElementById('downtimeDetail')?.value || '';
        
        console.log('Step 6: Downtime calculated:', { downtimeMinutes, downtimeReason });
        
        console.log('Step 7: Calculating shift and production times...');
        // Calculate shift hours and planned production time - ‡∏Å‡∏∞ 10 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        const shiftHours = document.getElementById('shiftLength8h')?.checked ? 10.0 : 0;  // 10 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        
        // ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡∏•‡∏¥‡∏ï‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô
        let plannedProductionMinutes = 0;
        if (this.taskData && this.taskData.PlannedStartTime && this.taskData.PlannedEndTime) {
            const plannedStartTime = new Date(this.taskData.PlannedStartTime);
            const plannedEndTime = new Date(this.taskData.PlannedEndTime);
            const plannedTotalMinutes = Math.floor((plannedEndTime - plannedStartTime) / (1000 * 60));
            const standardBreakMinutes = 60; // ‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
            plannedProductionMinutes = Math.max(0, plannedTotalMinutes - standardBreakMinutes);
        } else {
            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏¥‡∏°
            plannedProductionMinutes = totalMinutes - totalBreakMinutes;
        }
        
        const runTimeMinutes = plannedProductionMinutes - downtimeMinutes;
        
        console.log('Step 8: Production times calculated:', { 
            shiftHours, plannedProductionMinutes, runTimeMinutes 
        });

        console.log('Step 9: Getting performance calculation fields...');
        // Performance calculation - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        const idealRunRateEl = document.getElementById('idealRunRate');
        const totalPiecesEl = document.getElementById('totalPieces');
        const rejectPiecesEl = document.getElementById('rejectPieces');
        
        if (!idealRunRateEl || !totalPiecesEl || !rejectPiecesEl) {
            throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà');
        }
        
        const idealRunRateUsed = parseFloat(idealRunRateEl.value || '0');
        const totalPieces = parseInt(totalPiecesEl.value || '0');
        const rejectPieces = parseInt(rejectPiecesEl.value || '0');
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if (idealRunRateUsed < 0 || totalPieces < 0 || rejectPieces < 0) {
            throw new Error('‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏•‡∏ö');
        }
        
        if (rejectPieces > totalPieces) {
            throw new Error('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏¥‡∏ï‡∏£‡∏ß‡∏°‡πÑ‡∏î‡πâ');
        }
        
        const goodPieces = totalPieces - rejectPieces;
        
        console.log('Step 10: Performance data validated:', { 
            idealRunRateUsed, totalPieces, rejectPieces, goodPieces 
        });

        console.log('Step 11: Calculating OEE components...');
        // OEE calculation with new correct formulas
        
        // ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡∏•‡∏¥‡∏ï‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô (‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å)
        let plannedProductionMinutesForOEE = 0;
        if (this.taskData && this.taskData.PlannedStartTime && this.taskData.PlannedEndTime) {
            const plannedStartTime = new Date(this.taskData.PlannedStartTime);
            const plannedEndTime = new Date(this.taskData.PlannedEndTime);
            const plannedTotalMinutes = Math.floor((plannedEndTime - plannedStartTime) / (1000 * 60));
            // ‚úÖ ‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
            plannedProductionMinutesForOEE = plannedTotalMinutes;
        } else {
            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏¥‡∏°
            plannedProductionMinutesForOEE = totalMinutes;
        }
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Actual Run Time = ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á - ‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏à‡∏£‡∏¥‡∏á - Downtime
        const actualRunTimeMinutes = totalMinutes - totalBreakMinutes - downtimeMinutes;
        
        // Availability = (Actual Run Time / Planned Production Time) √ó 100
        const availability = plannedProductionMinutesForOEE > 0 ? (actualRunTimeMinutes / plannedProductionMinutesForOEE) * 100 : 0;
        
        // Performance = (Total Count / (Actual Run Time √ó Ideal Run Rate)) √ó 100
        const theoreticalMaxCount = actualRunTimeMinutes * idealRunRateUsed;
        const performance = theoreticalMaxCount > 0 ? (totalPieces / theoreticalMaxCount) * 100 : 0;
        
        const quality = totalPieces > 0 ? (goodPieces / totalPieces) * 100 : 0;
        const oeeTotal = (availability * performance * quality) / 10000;
        
        console.log('Step 12: OEE calculated with new formula:', { 
            plannedProductionMinutesForOEE, actualRunTimeMinutes, availability, performance, quality, oeeTotal 
        });

        console.log('Step 13: Calculating additional fields...');
        // Calculate additional fields for new schema
        const actualRunRate = actualRunTimeMinutes > 0 ? (totalPieces / actualRunTimeMinutes) : 0;
        const workingHours = totalMinutes / 60; // Convert minutes to hours
        
        console.log('Step 14: Additional fields calculated:', { actualRunRate, workingHours });
        
        console.log('Step 15: Creating form data object...');
        const formData = {
            PlanID: parseInt(this.taskId),  // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô integer
            ActualStartTime: formatDateTimeSQL(startDateFormatted, actualStartTime),
            ActualEndTime: formatDateTimeSQL(endDateFormatted, actualEndTime),
            ShiftHours: shiftHours,
            OvertimeMinutes: overtimeMinutes,
            BreakMorningMinutes: breakMorning,
            BreakLunchMinutes: breakLunch,
            BreakEveningMinutes: breakEvening,
            StandardRunRate: idealRunRateUsed,
            TotalPieces: totalPieces,
            RejectPieces: rejectPieces,
            GoodQuantity: goodPieces,  // ‡πÄ‡∏û‡∏¥‡πà‡∏° GoodQuantity
            DowntimeMinutes: downtimeMinutes,
            DowntimeReason: downtimeReason,
            PlannedWorkMinutes: plannedProductionMinutesForOEE, // ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô (‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å)
            ActiveWorkMinutes: actualRunTimeMinutes, // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏•‡∏±‡∏á‡∏´‡∏±‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡πÅ‡∏•‡∏∞ downtime
            OEE_Availability: Math.round(availability * 100) / 100,
            OEE_Performance: Math.round(performance * 100) / 100,
            OEE_Quality: Math.round(quality * 100) / 100,
            OEE_Overall: Math.round(oeeTotal * 100) / 100,
            ActualRunRate: Math.round(actualRunRate * 100) / 100,
            WorkingHours: Math.round(workingHours * 100) / 100,  // ‡πÄ‡∏û‡∏¥‡πà‡∏° WorkingHours
            TotalBreakMinutes: totalBreakMinutes,  // ‡πÄ‡∏û‡∏¥‡πà‡∏° TotalBreakMinutes
            ConfirmedByUserID: 1
        };
        
        console.log('Step 16: Form data object created successfully');
        console.log('Form data collected for ProductionResults:', formData);
        console.log('PlanID check:', formData.PlanID, 'Type:', typeof formData.PlanID, 'Valid:', !isNaN(formData.PlanID) && formData.PlanID > 0);
        console.log('=== collectFormData() COMPLETED SUCCESSFULLY ===');
        
        return formData;
        
        } catch (error) {
            console.error('=== ERROR in collectFormData ===');
            console.error('Error occurred at step during form data collection');
            console.error('Error details:', {
                name: error.name,
                message: error.message,
                stack: error.stack
            });
            console.error('=== END ERROR LOG ===');
            throw error;
        }
    }

    // Utility functions
    formatDate(date) {
        const d = new Date(date);
        const day = String(d.getDate()).padStart(2, '0');
        const month = String(d.getMonth() + 1).padStart(2, '0');
        const year = d.getFullYear();
        return `${day}/${month}/${year}`;
    }

    formatDateTime(date) {
        const d = new Date(date);
        const dateStr = this.formatDate(d);
        const hours = String(d.getHours()).padStart(2, '0');
        const minutes = String(d.getMinutes()).padStart(2, '0');
        return `${dateStr} ${hours}:${minutes}`;
    }

    formatTime(date, includeSeconds = false) {
        const d = new Date(date);
        const hours = String(d.getHours()).padStart(2, '0');
        const minutes = String(d.getMinutes()).padStart(2, '0');
        
        if (includeSeconds) {
            const seconds = String(d.getSeconds()).padStart(2, '0');
            return `${hours}:${minutes}:${seconds}`;
        }
        
        return `${hours}:${minutes}`;
    }

    formatDateTimeLocal(date) {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');
        return `${year}-${month}-${day}T${hours}:${minutes}`;
    }

    formatDateTimeSQL(date) {
        if (!date || isNaN(date.getTime())) {
            throw new Error('Invalid date object provided to formatDateTimeSQL');
        }
        return date.toISOString().slice(0, 19).replace('T', ' ');
    }

    showLoading(show) {
        const loadingSection = document.getElementById('loadingSection');
        const form = document.getElementById('emergencyStopForm');
        
        if (loadingSection) {
            loadingSection.style.display = show ? 'block' : 'none';
        }
        
        if (form) {
            form.style.display = show ? 'none' : 'block';
        }

        // Disable form controls when loading
        const submitBtn = document.getElementById('confirmCompleteBtn');
        if (submitBtn) {
            submitBtn.disabled = show;
            if (show) {
                submitBtn.innerHTML = '<div class="spinner-border spinner-border-sm me-2"></div>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...';
            } else {
                submitBtn.innerHTML = '<i class="bi bi-check-circle me-2"></i>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å';
            }
        }
    }

    showForm() {
        document.getElementById('emergencyStopForm').style.display = 'block';
    }

    showError(message) {
        const loadingSection = document.getElementById('loadingSection');
        if (loadingSection) {
            loadingSection.innerHTML = `
                <div class="text-center py-5">
                    <i class="bi bi-exclamation-triangle text-danger fs-1 mb-3"></i>
                    <h5 class="text-danger mb-3">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</h5>
                    <p class="text-muted mb-4">${message}</p>
                    <a href="index.html" class="btn btn-primary">
                        <i class="bi bi-arrow-left me-2"></i>‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
                    </a>
                </div>
            `;
        }
    }

    showToast(message, type = 'success') {
        const toast = document.getElementById('mainToast');
        const toastBody = document.getElementById('mainToastBody');
        
        if (toast && toastBody) {
            toast.className = `toast align-items-center text-bg-${type} border-0`;
            toastBody.textContent = message;
            
            const bsToast = new bootstrap.Toast(toast, { delay: 4000 });
            bsToast.show();
        }
    }
    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö TaskManager)
     * ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏à‡∏≤‡∏Å‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô
     * @param {number} planId - ID ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
     * @returns {Promise<boolean>} - true ‡∏´‡∏≤‡∏Å‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
     */
    static async confirmTaskCompletion(planId) {
        try {
            // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á backend API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô
            const response = await fetch('tasks.php?action=save_production_result', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    PlanID: planId,
                    // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏à‡∏≤‡∏Å TaskManager
                    ActualStartTime: new Date().toISOString().slice(0, 19).replace('T', ' '),
                    ActualEndTime: new Date().toISOString().slice(0, 19).replace('T', ' '),
                    ShiftHours: 10.0,
                    OvertimeMinutes: 0,
                    BreakMorningMinutes: 0,
                    BreakLunchMinutes: 60,
                    BreakEveningMinutes: 0,
                    StandardRunRate: 0,
                    TotalPieces: 0,
                    RejectPieces: 0,
                    // ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á GoodQuantity, WorkingHours, TotalBreakMinutes ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô computed columns
                    DowntimeMinutes: 0,
                    DowntimeReason: '',
                    PlannedWorkMinutes: 0,
                    ActiveWorkMinutes: 0,
                    OEE_Availability: 0,
                    OEE_Performance: 0,
                    OEE_Quality: 0,
                    OEE_Overall: 0,
                    ActualRunRate: 0,
                    ConfirmedByUserID: 1
                })
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (!result.success) {
                throw new Error(result.error || '‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏á‡∏≤‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
            }

            console.log(`Plan ${planId} confirmed successfully`);
            return true;

        } catch (error) {
            console.error('Error confirming plan:', error);
            return false;
        }
    }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß (Global function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö TaskManager)
 * ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏à‡∏≤‡∏Å‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô
 * @param {number} planId - ID ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
 * @returns {Promise<boolean>} - true ‡∏´‡∏≤‡∏Å‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
 */
async function confirmTaskCompletion(planId) {
    return await ConfirmCompleteManager.confirmTaskCompletion(planId);
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô
 * ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ integrate ‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ
 */
function setupConfirmButton() {
    // ‡∏î‡∏∂‡∏á plan ID ‡∏à‡∏≤‡∏Å URL parameter
    const urlParams = new URLSearchParams(window.location.search);
    const planId = urlParams.get('id');
    
    if (!planId) {
        console.error('No plan ID found in URL');
        return;
    }
    
    // ‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
    const confirmButton = document.getElementById('confirmCompleteBtn');
    
    if (confirmButton) {
        confirmButton.addEventListener('click', async function(e) {
            e.preventDefault();
            
            // ‡πÅ‡∏™‡∏î‡∏á loading ‡∏´‡∏£‡∏∑‡∏≠ disable ‡∏õ‡∏∏‡πà‡∏°
            confirmButton.disabled = true;
            confirmButton.innerHTML = '<i class="spinner-border spinner-border-sm me-2"></i>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô...';
            
            try {
                // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô
                const success = await confirmTaskCompletion(parseInt(planId));
                
                if (success) {
                    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                    alert('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏à‡∏≤‡∏Å‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô');
                    
                    // redirect ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
                    window.location.href = 'index.html';
                } else {
                    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
                    alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô');
                    
                    // ‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
                    confirmButton.disabled = false;
                    confirmButton.innerHTML = '<i class="bi bi-check-circle me-2"></i>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô';
                }
            } catch (error) {
                console.error('Confirm error:', error);
                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô: ' + error.message);
                
                // ‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
                confirmButton.disabled = false;
                confirmButton.innerHTML = '<i class="bi bi-check-circle me-2"></i>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô';
            }
        });
    }
}

// Export functions for global use
window.confirmTaskCompletion = confirmTaskCompletion;
window.setupConfirmButton = setupConfirmButton;
window.ConfirmCompleteManager = ConfirmCompleteManager;

// Export ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
window.useCurrentDateTime = function() {
    const manager = window.currentConfirmManager;
    if (manager && manager.updateCurrentDateTime) {
        manager.updateCurrentDateTime();
        return true;
    }
    console.warn('ConfirmCompleteManager ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°');
    return false;
};

// ================================================================
// FORCE 24-HOUR TIME FORMAT
// ================================================================

/**
 * ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡πÅ‡∏•‡∏∞‡∏•‡∏ö AM/PM ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
 */

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    console.log('üîÑ DOM Content Loaded - Initializing ConfirmCompleteManager');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö elements ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    const criticalElements = [
        'operatingTime',
        'netRunTime', 
        'actualRunRate',
        'totalPieces',
        'idealRunRate',
        'rejectPieces',
        'actualStartHour',
        'actualStartMinute',
        'actualEndHour',
        'actualEndMinute'
    ];
    
    console.log('üîç Checking critical elements in DOM:');
    criticalElements.forEach(id => {
        const element = document.getElementById(id);
        console.log(`  - ${id}: ${element ? '‚úÖ FOUND' : '‚ùå NOT FOUND'}`);
        if (element) {
            console.log(`    Element type: ${element.tagName}, value: "${element.value}", readonly: ${element.readOnly}`);
        }
    });
    
    const manager = new ConfirmCompleteManager();
    // ‡πÄ‡∏Å‡πá‡∏ö reference ‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å
    window.currentConfirmManager = manager;
    manager.init();
});
